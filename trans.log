nohup: ignoring input
/diskb/yuhua/StageNet/train_SICH_cammap.py:10: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
Preparing training data ... 
Constructing model ... 
available device: cuda:0
Start training ... 
for distribution val
type 0= 44 type 1= 21
for distribution test
type 0= 54 type 1= 18
epoch 0
15.574420601129532
validation set
{'acc': 0.95384616, 'prec0': 0.9767442, 'prec1': 0.90909094, 'rec0': 0.95454544, 'rec1': 0.95238096, 'auroc': 0.9805194805194805, 'auprc': 0.9629560857801645, 'minpse': 0.9090909090909091}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.9230769, 'prec1': 0.7, 'rec0': 0.8888889, 'rec1': 0.7777778, 'auroc': 0.926954732510288, 'auprc': 0.8325661651267803, 'minpse': 0.7222222222222222}
epoch 1
17.109830617904663
validation set
{'acc': 0.95384616, 'prec0': 0.9767442, 'prec1': 0.90909094, 'rec0': 0.95454544, 'rec1': 0.95238096, 'auroc': 0.9837662337662337, 'auprc': 0.9755377350302161, 'minpse': 0.9090909090909091}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.9183673, 'prec1': 0.6086956, 'rec0': 0.8333333, 'rec1': 0.7777778, 'auroc': 0.8827160493827161, 'auprc': 0.8041873822592502, 'minpse': 0.6666666666666666}
epoch 2
15.563991159200668
validation set
{'acc': 0.9076923, 'prec0': 0.975, 'prec1': 0.8, 'rec0': 0.8863636, 'rec1': 0.95238096, 'auroc': 0.9534632034632033, 'auprc': 0.9180178339622764, 'minpse': 0.8095238095238095}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.95652175, 'prec1': 0.61538464, 'rec0': 0.8148148, 'rec1': 0.8888889, 'auroc': 0.9146090534979424, 'auprc': 0.7511479334476228, 'minpse': 0.6842105263157895}
epoch 3
16.54659867286682
validation set
{'acc': 0.9692308, 'prec0': 0.95652175, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.9047619, 'auroc': 0.9794372294372294, 'auprc': 0.9727696358131142, 'minpse': 0.9047619047619048}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.8965517, 'prec1': 0.85714287, 'rec0': 0.962963, 'rec1': 0.6666667, 'auroc': 0.9248971193415638, 'auprc': 0.8514848711622905, 'minpse': 0.7222222222222222}
epoch 4
16.221010774374008
validation set
{'acc': 0.95384616, 'prec0': 0.9767442, 'prec1': 0.90909094, 'rec0': 0.95454544, 'rec1': 0.95238096, 'auroc': 0.9880952380952381, 'auprc': 0.9775580031219129, 'minpse': 0.9090909090909091}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.9259259, 'prec1': 0.7777778, 'rec0': 0.9259259, 'rec1': 0.7777778, 'auroc': 0.9372427983539094, 'auprc': 0.8823032163309941, 'minpse': 0.7777777777777778}
epoch 5
16.55695128440857
validation set
{'acc': 0.93846154, 'prec0': 0.95454544, 'prec1': 0.9047619, 'rec0': 0.95454544, 'rec1': 0.9047619, 'auroc': 0.9599567099567099, 'auprc': 0.9358324241999445, 'minpse': 0.9047619047619048}
Mortality Prediction on the test set
{'acc': 0.9027778, 'prec0': 0.9122807, 'prec1': 0.8666667, 'rec0': 0.962963, 'rec1': 0.7222222, 'auroc': 0.9156378600823045, 'auprc': 0.8691999598905604, 'minpse': 0.7222222222222222}
epoch 6
16.003436475992203
validation set
{'acc': 0.95384616, 'prec0': 0.9767442, 'prec1': 0.90909094, 'rec0': 0.95454544, 'rec1': 0.95238096, 'auroc': 0.9837662337662337, 'auprc': 0.9742863335461263, 'minpse': 0.9090909090909091}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.92156863, 'prec1': 0.6666667, 'rec0': 0.8703704, 'rec1': 0.7777778, 'auroc': 0.8775720164609053, 'auprc': 0.8053369178662049, 'minpse': 0.6842105263157895}
epoch 7
16.622287571430206
validation set
{'acc': 0.9230769, 'prec0': 0.9756098, 'prec1': 0.8333333, 'rec0': 0.90909094, 'rec1': 0.95238096, 'auroc': 0.9859307359307359, 'auprc': 0.9751172127466123, 'minpse': 0.9047619047619048}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.92156863, 'prec1': 0.6666667, 'rec0': 0.8703704, 'rec1': 0.7777778, 'auroc': 0.8868312757201646, 'auprc': 0.8464862979397862, 'minpse': 0.7777777777777778}
epoch 8
15.923671662807465
validation set
{'acc': 0.9692308, 'prec0': 0.95652175, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.9047619, 'auroc': 0.9718614718614718, 'auprc': 0.9684664425564324, 'minpse': 0.9047619047619048}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.90909094, 'prec1': 0.7647059, 'rec0': 0.9259259, 'rec1': 0.7222222, 'auroc': 0.9104938271604938, 'auprc': 0.8395694081999767, 'minpse': 0.7222222222222222}
epoch 9
16.090729236602783
validation set
{'acc': 0.8769231, 'prec0': 0.95, 'prec1': 0.76, 'rec0': 0.8636364, 'rec1': 0.9047619, 'auroc': 0.9448051948051948, 'auprc': 0.9188033196990972, 'minpse': 0.8095238095238095}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.9183673, 'prec1': 0.6086956, 'rec0': 0.8333333, 'rec1': 0.7777778, 'auroc': 0.9084362139917695, 'auprc': 0.8199262712796698, 'minpse': 0.7222222222222222}
epoch 10
16.40431147813797
validation set
{'acc': 0.93846154, 'prec0': 0.95454544, 'prec1': 0.9047619, 'rec0': 0.95454544, 'rec1': 0.9047619, 'auroc': 0.9632034632034632, 'auprc': 0.9507736174155514, 'minpse': 0.9047619047619048}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8867925, 'prec1': 0.6315789, 'rec0': 0.8703704, 'rec1': 0.6666667, 'auroc': 0.8672839506172839, 'auprc': 0.7782321662013959, 'minpse': 0.6666666666666666}
epoch 11
17.009671449661255
validation set
{'acc': 0.93846154, 'prec0': 0.97619045, 'prec1': 0.8695652, 'rec0': 0.9318182, 'rec1': 0.95238096, 'auroc': 0.9848484848484849, 'auprc': 0.9715747144538112, 'minpse': 0.9047619047619048}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.9056604, 'prec1': 0.68421054, 'rec0': 0.8888889, 'rec1': 0.7222222, 'auroc': 0.8590534979423868, 'auprc': 0.7972589485387105, 'minpse': 0.7222222222222222}
epoch 12
15.510636866092682
validation set
{'acc': 0.9230769, 'prec0': 1.0, 'prec1': 0.8076923, 'rec0': 0.8863636, 'rec1': 1.0, 'auroc': 0.9891774891774892, 'auprc': 0.9792875041730877, 'minpse': 0.9047619047619048}
Mortality Prediction on the test set
{'acc': 0.625, 'prec0': 0.90909094, 'prec1': 0.3846154, 'rec0': 0.5555556, 'rec1': 0.8333333, 'auroc': 0.8878600823045267, 'auprc': 0.822763904409085, 'minpse': 0.7777777777777778}
epoch 13
17.03403115272522
validation set
{'acc': 0.9230769, 'prec0': 1.0, 'prec1': 0.8076923, 'rec0': 0.8863636, 'rec1': 1.0, 'auroc': 0.987012987012987, 'auprc': 0.973675537164062, 'minpse': 0.9047619047619048}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.90909094, 'prec1': 0.5, 'rec0': 0.7407407, 'rec1': 0.7777778, 'auroc': 0.8909465020576132, 'auprc': 0.8438170781818557, 'minpse': 0.7777777777777778}
epoch 14
15.131070077419281
validation set
{'acc': 0.84615386, 'prec0': 0.94736844, 'prec1': 0.7037037, 'rec0': 0.8181818, 'rec1': 0.9047619, 'auroc': 0.9242424242424242, 'auprc': 0.8759083493307931, 'minpse': 0.7619047619047619}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.9361702, 'prec1': 0.6, 'rec0': 0.8148148, 'rec1': 0.8333333, 'auroc': 0.9187242798353908, 'auprc': 0.8689826319292807, 'minpse': 0.7777777777777778}
epoch 15
15.36326289176941
validation set
{'acc': 0.93846154, 'prec0': 0.95454544, 'prec1': 0.9047619, 'rec0': 0.95454544, 'rec1': 0.9047619, 'auroc': 0.9772727272727273, 'auprc': 0.9646922506488691, 'minpse': 0.9047619047619048}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.9411765, 'prec1': 0.71428573, 'rec0': 0.8888889, 'rec1': 0.8333333, 'auroc': 0.9094650205761317, 'auprc': 0.8658617042201283, 'minpse': 0.7894736842105263}
epoch 16
16.706083476543427
validation set
{'acc': 0.95384616, 'prec0': 0.9767442, 'prec1': 0.90909094, 'rec0': 0.95454544, 'rec1': 0.95238096, 'auroc': 0.9859307359307359, 'auprc': 0.977507315628829, 'minpse': 0.9090909090909091}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.94, 'prec1': 0.6818182, 'rec0': 0.8703704, 'rec1': 0.8333333, 'auroc': 0.8827160493827161, 'auprc': 0.8313151341438748, 'minpse': 0.7368421052631579}
epoch 17
16.546813249588013
validation set
{'acc': 0.9230769, 'prec0': 0.9756098, 'prec1': 0.8333333, 'rec0': 0.90909094, 'rec1': 0.95238096, 'auroc': 0.9653679653679654, 'auprc': 0.9363937264464639, 'minpse': 0.8636363636363636}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.94, 'prec1': 0.6818182, 'rec0': 0.8703704, 'rec1': 0.8333333, 'auroc': 0.9454732510288065, 'auprc': 0.879520779713493, 'minpse': 0.7368421052631579}
epoch 18
14.753651589155197
validation set
{'acc': 0.95384616, 'prec0': 0.9767442, 'prec1': 0.90909094, 'rec0': 0.95454544, 'rec1': 0.95238096, 'auroc': 0.9837662337662337, 'auprc': 0.9739153664458358, 'minpse': 0.9090909090909091}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.91071427, 'prec1': 0.8125, 'rec0': 0.9444444, 'rec1': 0.7222222, 'auroc': 0.8549382716049383, 'auprc': 0.7910578247970923, 'minpse': 0.7222222222222222}
epoch 19
16.85345071554184
validation set
{'acc': 0.93846154, 'prec0': 0.97619045, 'prec1': 0.8695652, 'rec0': 0.9318182, 'rec1': 0.95238096, 'auroc': 0.9848484848484848, 'auprc': 0.9725339863792917, 'minpse': 0.9047619047619048}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.9411765, 'prec1': 0.71428573, 'rec0': 0.8888889, 'rec1': 0.8333333, 'auroc': 0.9176954732510288, 'auprc': 0.8685009899733218, 'minpse': 0.7777777777777778}
epoch 20
15.058793187141418
validation set
{'acc': 0.9230769, 'prec0': 0.9756098, 'prec1': 0.8333333, 'rec0': 0.90909094, 'rec1': 0.95238096, 'auroc': 0.9686147186147185, 'auprc': 0.9538342127419921, 'minpse': 0.9047619047619048}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.9583333, 'prec1': 0.6666667, 'rec0': 0.8518519, 'rec1': 0.8888889, 'auroc': 0.9310699588477366, 'auprc': 0.8596908836605262, 'minpse': 0.7777777777777778}
epoch 21
15.611564218997955
validation set
{'acc': 0.95384616, 'prec0': 0.9767442, 'prec1': 0.90909094, 'rec0': 0.95454544, 'rec1': 0.95238096, 'auroc': 0.9902597402597403, 'auprc': 0.9823388043312855, 'minpse': 0.9090909090909091}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.9259259, 'prec1': 0.7777778, 'rec0': 0.9259259, 'rec1': 0.7777778, 'auroc': 0.9053497942386831, 'auprc': 0.8570751006827443, 'minpse': 0.7777777777777778}
epoch 22
16.558875799179077
validation set
{'acc': 0.95384616, 'prec0': 0.9767442, 'prec1': 0.90909094, 'rec0': 0.95454544, 'rec1': 0.95238096, 'auroc': 0.9805194805194805, 'auprc': 0.960685968735695, 'minpse': 0.9090909090909091}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.9245283, 'prec1': 0.7368421, 'rec0': 0.9074074, 'rec1': 0.7777778, 'auroc': 0.9320987654320987, 'auprc': 0.8697145271573377, 'minpse': 0.7777777777777778}
epoch 23
14.793720602989197
validation set
{'acc': 0.9692308, 'prec0': 0.95652175, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.9047619, 'auroc': 0.9772727272727272, 'auprc': 0.9713804502134022, 'minpse': 0.9047619047619048}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.91071427, 'prec1': 0.8125, 'rec0': 0.9444444, 'rec1': 0.7222222, 'auroc': 0.904320987654321, 'auprc': 0.8346312619730429, 'minpse': 0.7222222222222222}
epoch 24
16.14983904361725
validation set
{'acc': 0.95384616, 'prec0': 0.9767442, 'prec1': 0.90909094, 'rec0': 0.95454544, 'rec1': 0.95238096, 'auroc': 0.9902597402597403, 'auprc': 0.9834427036807989, 'minpse': 0.9090909090909091}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.9245283, 'prec1': 0.7368421, 'rec0': 0.9074074, 'rec1': 0.7777778, 'auroc': 0.9176954732510287, 'auprc': 0.8577176380960628, 'minpse': 0.7368421052631579}
epoch 25
15.695621132850647
validation set
{'acc': 0.95384616, 'prec0': 0.9767442, 'prec1': 0.90909094, 'rec0': 0.95454544, 'rec1': 0.95238096, 'auroc': 0.974025974025974, 'auprc': 0.957695064390111, 'minpse': 0.9090909090909091}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.92, 'prec1': 0.6363636, 'rec0': 0.8518519, 'rec1': 0.7777778, 'auroc': 0.9176954732510288, 'auprc': 0.8684535827812176, 'minpse': 0.7222222222222222}
epoch 26
16.881548523902893
validation set
{'acc': 0.95384616, 'prec0': 0.9767442, 'prec1': 0.90909094, 'rec0': 0.95454544, 'rec1': 0.95238096, 'auroc': 0.9880952380952381, 'auprc': 0.9755958046122797, 'minpse': 0.9090909090909091}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.9074074, 'prec1': 0.7222222, 'rec0': 0.9074074, 'rec1': 0.7222222, 'auroc': 0.868312757201646, 'auprc': 0.7976305304683843, 'minpse': 0.7222222222222222}
epoch 27
17.0753153860569
validation set
{'acc': 0.93846154, 'prec0': 0.97619045, 'prec1': 0.8695652, 'rec0': 0.9318182, 'rec1': 0.95238096, 'auroc': 0.9826839826839827, 'auprc': 0.9645275973613603, 'minpse': 0.9047619047619048}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.9230769, 'prec1': 0.7, 'rec0': 0.8888889, 'rec1': 0.7777778, 'auroc': 0.8703703703703703, 'auprc': 0.7833243578564884, 'minpse': 0.7777777777777778}
epoch 28
14.235069185495377
validation set
{'acc': 0.86153847, 'prec0': 0.94871795, 'prec1': 0.7307692, 'rec0': 0.84090906, 'rec1': 0.9047619, 'auroc': 0.9307359307359307, 'auprc': 0.8906523867661567, 'minpse': 0.7727272727272727}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.9019608, 'prec1': 0.61904764, 'rec0': 0.8518519, 'rec1': 0.7222222, 'auroc': 0.8981481481481481, 'auprc': 0.7874432306549919, 'minpse': 0.7222222222222222}
epoch 29
14.68224424123764
validation set
{'acc': 0.95384616, 'prec0': 0.9767442, 'prec1': 0.90909094, 'rec0': 0.95454544, 'rec1': 0.95238096, 'auroc': 0.9805194805194805, 'auprc': 0.9673498838663588, 'minpse': 0.9090909090909091}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.9230769, 'prec1': 0.7, 'rec0': 0.8888889, 'rec1': 0.7777778, 'auroc': 0.9423868312757202, 'auprc': 0.888246179851222, 'minpse': 0.7368421052631579}
Reset trainable parameters of layer = Conv2d(1, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Linear(in_features=512, out_features=1000, bias=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Conv2d(64, 384, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=7200, bias=True)
Reset trainable parameters of layer = Linear(in_features=1000, out_features=6272, bias=True)
Reset trainable parameters of layer = Linear(in_features=300, out_features=50, bias=True)
Reset trainable parameters of layer = Linear(in_features=50, out_features=300, bias=True)
Reset trainable parameters of layer = Conv1d(300, 300, kernel_size=(24,), stride=(1,))
Reset trainable parameters of layer = Linear(in_features=300, out_features=1, bias=True)
Reset trainable parameters of layer = Linear(in_features=24, out_features=1, bias=True)
for distribution val
type 0= 49 type 1= 16
for distribution test
type 0= 54 type 1= 18
epoch 0
15.852096557617188
validation set
{'acc': 0.8769231, 'prec0': 0.9183673, 'prec1': 0.75, 'rec0': 0.9183673, 'rec1': 0.75, 'auroc': 0.7831632653061225, 'auprc': 0.6691228009407812, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.9259259, 'prec1': 0.7777778, 'rec0': 0.9259259, 'rec1': 0.7777778, 'auroc': 0.9002057613168726, 'auprc': 0.8489669103202524, 'minpse': 0.7777777777777778}
epoch 1
15.059834241867065
validation set
{'acc': 0.83076924, 'prec0': 0.9318182, 'prec1': 0.61904764, 'rec0': 0.8367347, 'rec1': 0.8125, 'auroc': 0.7971938775510204, 'auprc': 0.6458084168435732, 'minpse': 0.7058823529411765}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.97727275, 'prec1': 0.60714287, 'rec0': 0.7962963, 'rec1': 0.9444444, 'auroc': 0.9382716049382716, 'auprc': 0.8925996263340985, 'minpse': 0.7777777777777778}
epoch 2
16.445630371570587
validation set
{'acc': 0.84615386, 'prec0': 0.93333334, 'prec1': 0.65, 'rec0': 0.85714287, 'rec1': 0.8125, 'auroc': 0.7971938775510203, 'auprc': 0.6706364597795191, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.92, 'prec1': 0.6363636, 'rec0': 0.8518519, 'rec1': 0.7777778, 'auroc': 0.9084362139917697, 'auprc': 0.8413744370468349, 'minpse': 0.7777777777777778}
epoch 3
14.973075151443481
validation set
{'acc': 0.7692308, 'prec0': 0.925, 'prec1': 0.52, 'rec0': 0.75510204, 'rec1': 0.8125, 'auroc': 0.8010204081632653, 'auprc': 0.6599561868751982, 'minpse': 0.625}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.9148936, 'prec1': 0.56, 'rec0': 0.7962963, 'rec1': 0.7777778, 'auroc': 0.8590534979423867, 'auprc': 0.7246037381047503, 'minpse': 0.6190476190476191}
epoch 4
16.08948639035225
validation set
{'acc': 0.8153846, 'prec0': 0.877551, 'prec1': 0.625, 'rec0': 0.877551, 'rec1': 0.625, 'auroc': 0.7372448979591837, 'auprc': 0.5001000384525986, 'minpse': 0.625}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.94, 'prec1': 0.6818182, 'rec0': 0.8703704, 'rec1': 0.8333333, 'auroc': 0.8950617283950618, 'auprc': 0.7033828436466465, 'minpse': 0.8333333333333334}
epoch 5
14.308753162622452
validation set
{'acc': 0.8769231, 'prec0': 0.9183673, 'prec1': 0.75, 'rec0': 0.9183673, 'rec1': 0.75, 'auroc': 0.7908163265306123, 'auprc': 0.5766410627781922, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.9245283, 'prec1': 0.7368421, 'rec0': 0.9074074, 'rec1': 0.7777778, 'auroc': 0.9279835390946501, 'auprc': 0.8739067246757379, 'minpse': 0.7777777777777778}
epoch 6
15.277656257152557
validation set
{'acc': 0.84615386, 'prec0': 0.93333334, 'prec1': 0.65, 'rec0': 0.85714287, 'rec1': 0.8125, 'auroc': 0.7920918367346939, 'auprc': 0.6631110582527563, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.9245283, 'prec1': 0.7368421, 'rec0': 0.9074074, 'rec1': 0.7777778, 'auroc': 0.9146090534979423, 'auprc': 0.8688142666258412, 'minpse': 0.7777777777777778}
epoch 7
16.057807207107544
validation set
{'acc': 0.84615386, 'prec0': 0.93333334, 'prec1': 0.65, 'rec0': 0.85714287, 'rec1': 0.8125, 'auroc': 0.7997448979591837, 'auprc': 0.6655984631583634, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.96, 'prec1': 0.72727275, 'rec0': 0.8888889, 'rec1': 0.8888889, 'auroc': 0.9248971193415638, 'auprc': 0.8692227645470054, 'minpse': 0.7368421052631579}
epoch 8
13.686378717422485
validation set
{'acc': 0.83076924, 'prec0': 0.9318182, 'prec1': 0.61904764, 'rec0': 0.8367347, 'rec1': 0.8125, 'auroc': 0.778061224489796, 'auprc': 0.677660293920145, 'minpse': 0.6470588235294118}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.92156863, 'prec1': 0.6666667, 'rec0': 0.8703704, 'rec1': 0.7777778, 'auroc': 0.9166666666666666, 'auprc': 0.85384618948593, 'minpse': 0.7368421052631579}
epoch 9
15.467388153076172
validation set
{'acc': 0.86153847, 'prec0': 0.9166667, 'prec1': 0.7058824, 'rec0': 0.8979592, 'rec1': 0.75, 'auroc': 0.7831632653061223, 'auprc': 0.655851683931877, 'minpse': 0.7058823529411765}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.90909094, 'prec1': 0.7647059, 'rec0': 0.9259259, 'rec1': 0.7222222, 'auroc': 0.9362139917695473, 'auprc': 0.8712475459280398, 'minpse': 0.7777777777777778}
epoch 10
14.844724893569946
validation set
{'acc': 0.86153847, 'prec0': 0.9166667, 'prec1': 0.7058824, 'rec0': 0.8979592, 'rec1': 0.75, 'auroc': 0.7997448979591837, 'auprc': 0.6570390478782944, 'minpse': 0.7058823529411765}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.89285713, 'prec1': 0.75, 'rec0': 0.9259259, 'rec1': 0.6666667, 'auroc': 0.8590534979423868, 'auprc': 0.7889204489840932, 'minpse': 0.7222222222222222}
epoch 11
13.934905230998993
validation set
{'acc': 0.75384617, 'prec0': 0.88372093, 'prec1': 0.5, 'rec0': 0.7755102, 'rec1': 0.6875, 'auroc': 0.735969387755102, 'auprc': 0.5570167961316215, 'minpse': 0.5625}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.8695652, 'prec1': 0.46153846, 'rec0': 0.7407407, 'rec1': 0.6666667, 'auroc': 0.8631687242798354, 'auprc': 0.7320432628996572, 'minpse': 0.6666666666666666}
epoch 12
14.186844646930695
validation set
{'acc': 0.8153846, 'prec0': 0.9302326, 'prec1': 0.59090906, 'rec0': 0.81632656, 'rec1': 0.8125, 'auroc': 0.7908163265306123, 'auprc': 0.7303595117927838, 'minpse': 0.625}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.9183673, 'prec1': 0.6086956, 'rec0': 0.8333333, 'rec1': 0.7777778, 'auroc': 0.8569958847736625, 'auprc': 0.8066629366191, 'minpse': 0.7777777777777778}
epoch 13
14.826909005641937
validation set
{'acc': 0.8769231, 'prec0': 0.9361702, 'prec1': 0.7222222, 'rec0': 0.8979592, 'rec1': 0.8125, 'auroc': 0.7691326530612245, 'auprc': 0.6535902874486588, 'minpse': 0.7222222222222222}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.9245283, 'prec1': 0.7368421, 'rec0': 0.9074074, 'rec1': 0.7777778, 'auroc': 0.926954732510288, 'auprc': 0.8584514712016558, 'minpse': 0.7368421052631579}
epoch 14
15.002250790596008
validation set
{'acc': 0.63076925, 'prec0': 0.962963, 'prec1': 0.39473686, 'rec0': 0.53061223, 'rec1': 0.9375, 'auroc': 0.7767857142857143, 'auprc': 0.5805443880703798, 'minpse': 0.5625}
Mortality Prediction on the test set
{'acc': 0.6388889, 'prec0': 0.96666664, 'prec1': 0.4047619, 'rec0': 0.537037, 'rec1': 0.9444444, 'auroc': 0.8353909465020576, 'auprc': 0.6731363380158315, 'minpse': 0.6111111111111112}
epoch 15
15.305488020181656
validation set
{'acc': 0.86153847, 'prec0': 0.9166667, 'prec1': 0.7058824, 'rec0': 0.8979592, 'rec1': 0.75, 'auroc': 0.8022959183673469, 'auprc': 0.7031320970440915, 'minpse': 0.7058823529411765}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.91071427, 'prec1': 0.8125, 'rec0': 0.9444444, 'rec1': 0.7222222, 'auroc': 0.8930041152263375, 'auprc': 0.83045807087079, 'minpse': 0.7777777777777778}
epoch 16
14.806913375854492
validation set
{'acc': 0.7846154, 'prec0': 0.9268293, 'prec1': 0.5416667, 'rec0': 0.7755102, 'rec1': 0.8125, 'auroc': 0.7729591836734695, 'auprc': 0.6516756848121492, 'minpse': 0.625}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.9361702, 'prec1': 0.6, 'rec0': 0.8148148, 'rec1': 0.8333333, 'auroc': 0.9063786008230453, 'auprc': 0.8467850317226833, 'minpse': 0.7222222222222222}
epoch 17
14.788706094026566
validation set
{'acc': 0.8923077, 'prec0': 0.9375, 'prec1': 0.7647059, 'rec0': 0.9183673, 'rec1': 0.8125, 'auroc': 0.7920918367346939, 'auprc': 0.6662701937218232, 'minpse': 0.7647058823529411}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.9245283, 'prec1': 0.7368421, 'rec0': 0.9074074, 'rec1': 0.7777778, 'auroc': 0.904320987654321, 'auprc': 0.8504919234428394, 'minpse': 0.7368421052631579}
epoch 18
14.049975663423538
validation set
{'acc': 0.8, 'prec0': 0.90909094, 'prec1': 0.5714286, 'rec0': 0.81632656, 'rec1': 0.75, 'auroc': 0.8010204081632654, 'auprc': 0.6726116791982685, 'minpse': 0.625}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9166667, 'prec1': 0.5833333, 'rec0': 0.8148148, 'rec1': 0.7777778, 'auroc': 0.9166666666666667, 'auprc': 0.8147830205008165, 'minpse': 0.7}
epoch 19
14.171827495098114
validation set
{'acc': 0.86153847, 'prec0': 0.9347826, 'prec1': 0.68421054, 'rec0': 0.877551, 'rec1': 0.8125, 'auroc': 0.7933673469387754, 'auprc': 0.6789280914736994, 'minpse': 0.6842105263157895}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9166667, 'prec1': 0.5833333, 'rec0': 0.8148148, 'rec1': 0.7777778, 'auroc': 0.8755144032921811, 'auprc': 0.8151186774344882, 'minpse': 0.6666666666666666}
epoch 20
14.923200368881226
validation set
{'acc': 0.84615386, 'prec0': 0.93333334, 'prec1': 0.65, 'rec0': 0.85714287, 'rec1': 0.8125, 'auroc': 0.826530612244898, 'auprc': 0.7197295825972612, 'minpse': 0.7058823529411765}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.94, 'prec1': 0.6818182, 'rec0': 0.8703704, 'rec1': 0.8333333, 'auroc': 0.9063786008230452, 'auprc': 0.8481935409121364, 'minpse': 0.7368421052631579}
epoch 21
13.673845916986465
validation set
{'acc': 0.8, 'prec0': 0.9285714, 'prec1': 0.5652174, 'rec0': 0.79591835, 'rec1': 0.8125, 'auroc': 0.764030612244898, 'auprc': 0.5778895460917568, 'minpse': 0.6111111111111112}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.92156863, 'prec1': 0.6666667, 'rec0': 0.8703704, 'rec1': 0.7777778, 'auroc': 0.925925925925926, 'auprc': 0.8400724506694355, 'minpse': 0.7368421052631579}
epoch 22
14.762103587388992
validation set
{'acc': 0.86153847, 'prec0': 0.9347826, 'prec1': 0.68421054, 'rec0': 0.877551, 'rec1': 0.8125, 'auroc': 0.7793367346938775, 'auprc': 0.6214662286591686, 'minpse': 0.6842105263157895}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.8909091, 'prec1': 0.7058824, 'rec0': 0.9074074, 'rec1': 0.6666667, 'auroc': 0.9320987654320987, 'auprc': 0.8679816395618581, 'minpse': 0.6956521739130435}
epoch 23
14.697624295949936
validation set
{'acc': 0.7846154, 'prec0': 0.9268293, 'prec1': 0.5416667, 'rec0': 0.7755102, 'rec1': 0.8125, 'auroc': 0.7716836734693877, 'auprc': 0.5450707862123997, 'minpse': 0.5882352941176471}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.9318182, 'prec1': 0.53571427, 'rec0': 0.7592593, 'rec1': 0.8333333, 'auroc': 0.9012345679012346, 'auprc': 0.8411606683371267, 'minpse': 0.7222222222222222}
epoch 24
13.670470535755157
validation set
{'acc': 0.83076924, 'prec0': 0.9130435, 'prec1': 0.6315789, 'rec0': 0.85714287, 'rec1': 0.75, 'auroc': 0.7895408163265306, 'auprc': 0.7342301497516832, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.9411765, 'prec1': 0.71428573, 'rec0': 0.8888889, 'rec1': 0.8333333, 'auroc': 0.9403292181069959, 'auprc': 0.8852050048561886, 'minpse': 0.7777777777777778}
epoch 25
13.315318197011948
validation set
{'acc': 0.8, 'prec0': 0.9285714, 'prec1': 0.5652174, 'rec0': 0.79591835, 'rec1': 0.8125, 'auroc': 0.7857142857142858, 'auprc': 0.6541905032578854, 'minpse': 0.6470588235294118}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.93877554, 'prec1': 0.65217394, 'rec0': 0.8518519, 'rec1': 0.8333333, 'auroc': 0.8755144032921811, 'auprc': 0.8022714568787914, 'minpse': 0.7}
epoch 26
16.225835382938385
validation set
{'acc': 0.86153847, 'prec0': 0.9166667, 'prec1': 0.7058824, 'rec0': 0.8979592, 'rec1': 0.75, 'auroc': 0.798469387755102, 'auprc': 0.6934492667015156, 'minpse': 0.7058823529411765}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.8947368, 'prec1': 0.8, 'rec0': 0.9444444, 'rec1': 0.6666667, 'auroc': 0.8580246913580247, 'auprc': 0.783466061676652, 'minpse': 0.7222222222222222}
epoch 27
15.44879400730133
validation set
{'acc': 0.8, 'prec0': 0.9285714, 'prec1': 0.5652174, 'rec0': 0.79591835, 'rec1': 0.8125, 'auroc': 0.7882653061224489, 'auprc': 0.6520159689453615, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.93877554, 'prec1': 0.65217394, 'rec0': 0.8518519, 'rec1': 0.8333333, 'auroc': 0.9156378600823045, 'auprc': 0.8430886669710732, 'minpse': 0.7777777777777778}
epoch 28
14.677297830581665
validation set
{'acc': 0.86153847, 'prec0': 0.9166667, 'prec1': 0.7058824, 'rec0': 0.8979592, 'rec1': 0.75, 'auroc': 0.7997448979591837, 'auprc': 0.7230004032680963, 'minpse': 0.7058823529411765}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.91071427, 'prec1': 0.8125, 'rec0': 0.9444444, 'rec1': 0.7222222, 'auroc': 0.8734567901234569, 'auprc': 0.8119995323099898, 'minpse': 0.7222222222222222}
epoch 29
13.396754115819931
validation set
{'acc': 0.86153847, 'prec0': 0.9347826, 'prec1': 0.68421054, 'rec0': 0.877551, 'rec1': 0.8125, 'auroc': 0.7959183673469387, 'auprc': 0.6608089556312154, 'minpse': 0.6842105263157895}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.9230769, 'prec1': 0.7, 'rec0': 0.8888889, 'rec1': 0.7777778, 'auroc': 0.9248971193415637, 'auprc': 0.8797933664879317, 'minpse': 0.7777777777777778}
Reset trainable parameters of layer = Conv2d(1, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Linear(in_features=512, out_features=1000, bias=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Conv2d(64, 384, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=7200, bias=True)
Reset trainable parameters of layer = Linear(in_features=1000, out_features=6272, bias=True)
Reset trainable parameters of layer = Linear(in_features=300, out_features=50, bias=True)
Reset trainable parameters of layer = Linear(in_features=50, out_features=300, bias=True)
Reset trainable parameters of layer = Conv1d(300, 300, kernel_size=(24,), stride=(1,))
Reset trainable parameters of layer = Linear(in_features=300, out_features=1, bias=True)
Reset trainable parameters of layer = Linear(in_features=24, out_features=1, bias=True)
for distribution val
type 0= 46 type 1= 19
for distribution test
type 0= 54 type 1= 18
epoch 0
16.431183248758316
validation set
{'acc': 0.95384616, 'prec0': 1.0, 'prec1': 0.8636364, 'rec0': 0.9347826, 'rec1': 1.0, 'auroc': 0.9942791762013731, 'auprc': 0.9867950789818152, 'minpse': 0.9473684210526315}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.925, 'prec1': 0.46875, 'rec0': 0.6851852, 'rec1': 0.8333333, 'auroc': 0.8683127572016461, 'auprc': 0.7982840818682835, 'minpse': 0.6666666666666666}
epoch 1
16.52813395857811
validation set
{'acc': 0.9692308, 'prec0': 1.0, 'prec1': 0.9047619, 'rec0': 0.95652175, 'rec1': 1.0, 'auroc': 0.9977116704805492, 'auprc': 0.9948621553884711, 'minpse': 0.9473684210526315}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.95454544, 'prec1': 0.5714286, 'rec0': 0.7777778, 'rec1': 0.8888889, 'auroc': 0.9125514403292181, 'auprc': 0.8424627617336684, 'minpse': 0.7368421052631579}
epoch 2
16.50044935941696
validation set
{'acc': 0.95384616, 'prec0': 1.0, 'prec1': 0.8636364, 'rec0': 0.9347826, 'rec1': 1.0, 'auroc': 0.9919908466819223, 'auprc': 0.9802032317165932, 'minpse': 0.9473684210526315}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.9245283, 'prec1': 0.7368421, 'rec0': 0.9074074, 'rec1': 0.7777778, 'auroc': 0.9434156378600822, 'auprc': 0.893304305726165, 'minpse': 0.75}
epoch 3
17.730708420276642
validation set
{'acc': 0.84615386, 'prec0': 0.95, 'prec1': 0.68, 'rec0': 0.82608694, 'rec1': 0.8947368, 'auroc': 0.9279176201372998, 'auprc': 0.881195879049383, 'minpse': 0.7894736842105263}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.88461536, 'prec1': 0.6, 'rec0': 0.8518519, 'rec1': 0.6666667, 'auroc': 0.8796296296296298, 'auprc': 0.7673329722387892, 'minpse': 0.6666666666666666}
epoch 4
15.542280435562134
validation set
{'acc': 0.9846154, 'prec0': 1.0, 'prec1': 0.95, 'rec0': 0.9782609, 'rec1': 1.0, 'auroc': 0.9988558352402747, 'auprc': 0.9972991689750692, 'minpse': 0.95}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.9423077, 'prec1': 0.75, 'rec0': 0.9074074, 'rec1': 0.8333333, 'auroc': 0.9320987654320987, 'auprc': 0.8821540333084612, 'minpse': 0.7894736842105263}
epoch 5
16.942907392978668
validation set
{'acc': 0.9076923, 'prec0': 1.0, 'prec1': 0.76, 'rec0': 0.8695652, 'rec1': 1.0, 'auroc': 0.9748283752860412, 'auprc': 0.947213904423152, 'minpse': 0.8421052631578947}
Mortality Prediction on the test set
{'acc': 0.7083333, 'prec0': 0.9714286, 'prec1': 0.45945945, 'rec0': 0.6296296, 'rec1': 0.9444444, 'auroc': 0.8940329218106996, 'auprc': 0.7721149283247282, 'minpse': 0.625}
epoch 6
16.032774031162262
validation set
{'acc': 0.8923077, 'prec0': 0.93333334, 'prec1': 0.8, 'rec0': 0.9130435, 'rec1': 0.84210527, 'auroc': 0.9256292906178489, 'auprc': 0.8987016170642337, 'minpse': 0.8}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.92156863, 'prec1': 0.6666667, 'rec0': 0.8703704, 'rec1': 0.7777778, 'auroc': 0.904320987654321, 'auprc': 0.6914046514756486, 'minpse': 0.7222222222222222}
epoch 7
15.934272170066833
validation set
{'acc': 0.9846154, 'prec0': 1.0, 'prec1': 0.95, 'rec0': 0.9782609, 'rec1': 1.0, 'auroc': 0.994279176201373, 'auprc': 0.9848503159343145, 'minpse': 0.95}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.94, 'prec1': 0.6818182, 'rec0': 0.8703704, 'rec1': 0.8333333, 'auroc': 0.9372427983539094, 'auprc': 0.8858096841646398, 'minpse': 0.7777777777777778}
epoch 8
16.220823168754578
validation set
{'acc': 0.95384616, 'prec0': 1.0, 'prec1': 0.8636364, 'rec0': 0.9347826, 'rec1': 1.0, 'auroc': 0.9954233409610984, 'auprc': 0.9898050549020079, 'minpse': 0.9473684210526315}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.95454544, 'prec1': 0.5714286, 'rec0': 0.7777778, 'rec1': 0.8888889, 'auroc': 0.904320987654321, 'auprc': 0.8417175697851225, 'minpse': 0.7222222222222222}
epoch 9
16.816553711891174
validation set
{'acc': 0.9076923, 'prec0': 1.0, 'prec1': 0.76, 'rec0': 0.8695652, 'rec1': 1.0, 'auroc': 0.9794050343249427, 'auprc': 0.950439558563031, 'minpse': 0.8947368421052632}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.97619045, 'prec1': 0.56666666, 'rec0': 0.7592593, 'rec1': 0.9444444, 'auroc': 0.9372427983539094, 'auprc': 0.8927411622293742, 'minpse': 0.7777777777777778}
epoch 10
17.001676976680756
validation set
{'acc': 0.9230769, 'prec0': 0.9183673, 'prec1': 0.9375, 'rec0': 0.9782609, 'rec1': 0.7894737, 'auroc': 0.9130434782608695, 'auprc': 0.8921065552566889, 'minpse': 0.7894736842105263}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.89285713, 'prec1': 0.75, 'rec0': 0.9259259, 'rec1': 0.6666667, 'auroc': 0.926954732510288, 'auprc': 0.8410299963424034, 'minpse': 0.7222222222222222}
epoch 11
16.608760744333267
validation set
{'acc': 0.9846154, 'prec0': 0.9787234, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.94736844, 'auroc': 0.9965675057208239, 'auprc': 0.9926520847573479, 'minpse': 0.9473684210526315}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.9302326, 'prec1': 0.51724136, 'rec0': 0.7407407, 'rec1': 0.8333333, 'auroc': 0.8960905349794239, 'auprc': 0.8298072597967919, 'minpse': 0.7222222222222222}
epoch 12
16.259433835744858
validation set
{'acc': 0.9692308, 'prec0': 0.9782609, 'prec1': 0.94736844, 'rec0': 0.9782609, 'rec1': 0.94736844, 'auroc': 0.9908466819221968, 'auprc': 0.9826995288491134, 'minpse': 0.9473684210526315}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.9245283, 'prec1': 0.7368421, 'rec0': 0.9074074, 'rec1': 0.7777778, 'auroc': 0.8991769547325102, 'auprc': 0.8350966835806819, 'minpse': 0.7777777777777778}
epoch 13
15.419724106788635
validation set
{'acc': 0.9692308, 'prec0': 0.9782609, 'prec1': 0.94736844, 'rec0': 0.9782609, 'rec1': 0.94736844, 'auroc': 0.9908466819221967, 'auprc': 0.981248257382362, 'minpse': 0.9473684210526315}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.90909094, 'prec1': 0.5, 'rec0': 0.7407407, 'rec1': 0.7777778, 'auroc': 0.8724279835390947, 'auprc': 0.8127847635278748, 'minpse': 0.6666666666666666}
epoch 14
16.649368286132812
validation set
{'acc': 0.9692308, 'prec0': 1.0, 'prec1': 0.9047619, 'rec0': 0.95652175, 'rec1': 1.0, 'auroc': 0.9965675057208239, 'auprc': 0.9920151255331311, 'minpse': 0.9473684210526315}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.9230769, 'prec1': 0.7, 'rec0': 0.8888889, 'rec1': 0.7777778, 'auroc': 0.9002057613168725, 'auprc': 0.8552892536238289, 'minpse': 0.7777777777777778}
epoch 15
17.120492577552795
validation set
{'acc': 0.9846154, 'prec0': 1.0, 'prec1': 0.95, 'rec0': 0.9782609, 'rec1': 1.0, 'auroc': 0.9977116704805492, 'auprc': 0.9944521391197292, 'minpse': 0.95}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.9591837, 'prec1': 0.6956522, 'rec0': 0.8703704, 'rec1': 0.8888889, 'auroc': 0.9331275720164609, 'auprc': 0.8814356964259373, 'minpse': 0.7368421052631579}
epoch 16
19.24668973684311
validation set
{'acc': 0.95384616, 'prec0': 0.9574468, 'prec1': 0.9444444, 'rec0': 0.9782609, 'rec1': 0.8947368, 'auroc': 0.9771167048054921, 'auprc': 0.9588061745941803, 'minpse': 0.8947368421052632}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.91071427, 'prec1': 0.8125, 'rec0': 0.9444444, 'rec1': 0.7222222, 'auroc': 0.8878600823045267, 'auprc': 0.8196213525996751, 'minpse': 0.7368421052631579}
epoch 17
15.972371280193329
validation set
{'acc': 0.95384616, 'prec0': 1.0, 'prec1': 0.8636364, 'rec0': 0.9347826, 'rec1': 1.0, 'auroc': 0.9954233409610984, 'auprc': 0.9898050549020079, 'minpse': 0.9473684210526315}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.9148936, 'prec1': 0.56, 'rec0': 0.7962963, 'rec1': 0.7777778, 'auroc': 0.8693415637860081, 'auprc': 0.7957316756849837, 'minpse': 0.7222222222222222}
epoch 18
17.955196619033813
validation set
{'acc': 0.9076923, 'prec0': 0.95454544, 'prec1': 0.8095238, 'rec0': 0.9130435, 'rec1': 0.8947368, 'auroc': 0.965675057208238, 'auprc': 0.9268811774840358, 'minpse': 0.8421052631578947}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.9574468, 'prec1': 0.64, 'rec0': 0.8333333, 'rec1': 0.8888889, 'auroc': 0.9238683127572016, 'auprc': 0.866104958614504, 'minpse': 0.7777777777777778}
epoch 19
16.402843177318573
validation set
{'acc': 0.9692308, 'prec0': 0.9782609, 'prec1': 0.94736844, 'rec0': 0.9782609, 'rec1': 0.94736844, 'auroc': 0.9908466819221967, 'auprc': 0.981248257382362, 'minpse': 0.9473684210526315}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.9411765, 'prec1': 0.71428573, 'rec0': 0.8888889, 'rec1': 0.8333333, 'auroc': 0.9331275720164609, 'auprc': 0.8837005563725784, 'minpse': 0.7777777777777778}
epoch 20
14.896872103214264
validation set
{'acc': 0.9076923, 'prec0': 0.9347826, 'prec1': 0.84210527, 'rec0': 0.9347826, 'rec1': 0.84210527, 'auroc': 0.9382151029748284, 'auprc': 0.9051590485569598, 'minpse': 0.8421052631578947}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.89285713, 'prec1': 0.75, 'rec0': 0.9259259, 'rec1': 0.6666667, 'auroc': 0.8508230452674896, 'auprc': 0.7457939871259534, 'minpse': 0.6842105263157895}
epoch 21
16.920858085155487
validation set
{'acc': 0.9692308, 'prec0': 0.9583333, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.8947368, 'auroc': 0.9839816933638443, 'auprc': 0.9705026990553307, 'minpse': 0.8947368421052632}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.91071427, 'prec1': 0.8125, 'rec0': 0.9444444, 'rec1': 0.7222222, 'auroc': 0.9084362139917695, 'auprc': 0.85835668709575, 'minpse': 0.7777777777777778}
epoch 22
17.407935678958893
validation set
{'acc': 0.93846154, 'prec0': 0.9375, 'prec1': 0.9411765, 'rec0': 0.9782609, 'rec1': 0.84210527, 'auroc': 0.9416475972540046, 'auprc': 0.9205928399908074, 'minpse': 0.8421052631578947}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.9259259, 'prec1': 0.7777778, 'rec0': 0.9259259, 'rec1': 0.7777778, 'auroc': 0.9372427983539093, 'auprc': 0.8750046869079264, 'minpse': 0.7777777777777778}
epoch 23
16.608255833387375
validation set
{'acc': 0.9692308, 'prec0': 1.0, 'prec1': 0.9047619, 'rec0': 0.95652175, 'rec1': 1.0, 'auroc': 0.9977116704805492, 'auprc': 0.9948621553884711, 'minpse': 0.9473684210526315}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.9130435, 'prec1': 0.53846157, 'rec0': 0.7777778, 'rec1': 0.7777778, 'auroc': 0.8734567901234568, 'auprc': 0.8094766688991903, 'minpse': 0.7222222222222222}
epoch 24
16.874254286289215
validation set
{'acc': 0.9692308, 'prec0': 1.0, 'prec1': 0.9047619, 'rec0': 0.95652175, 'rec1': 1.0, 'auroc': 0.9965675057208239, 'auprc': 0.9920151255331311, 'minpse': 0.9473684210526315}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.9285714, 'prec1': 0.5, 'rec0': 0.7222222, 'rec1': 0.8333333, 'auroc': 0.8641975308641975, 'auprc': 0.7766550619118342, 'minpse': 0.7222222222222222}
epoch 25
14.975576043128967
validation set
{'acc': 0.9692308, 'prec0': 1.0, 'prec1': 0.9047619, 'rec0': 0.95652175, 'rec1': 1.0, 'auroc': 0.9862700228832952, 'auprc': 0.9638229569120069, 'minpse': 0.9047619047619048}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.9230769, 'prec1': 0.7, 'rec0': 0.8888889, 'rec1': 0.7777778, 'auroc': 0.947530864197531, 'auprc': 0.8850957433589219, 'minpse': 0.7777777777777778}
epoch 26
17.003093242645264
validation set
{'acc': 0.86153847, 'prec0': 0.974359, 'prec1': 0.6923077, 'rec0': 0.82608694, 'rec1': 0.94736844, 'auroc': 0.9336384439359268, 'auprc': 0.8950000328332532, 'minpse': 0.7894736842105263}
Mortality Prediction on the test set
{'acc': 0.7083333, 'prec0': 0.902439, 'prec1': 0.4516129, 'rec0': 0.6851852, 'rec1': 0.7777778, 'auroc': 0.882716049382716, 'auprc': 0.8204625413918083, 'minpse': 0.7777777777777778}
epoch 27
15.309473186731339
validation set
{'acc': 0.9230769, 'prec0': 1.0, 'prec1': 0.7916667, 'rec0': 0.8913044, 'rec1': 1.0, 'auroc': 0.9862700228832951, 'auprc': 0.9708923346399789, 'minpse': 0.8947368421052632}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.9047619, 'prec1': 0.46666667, 'rec0': 0.7037037, 'rec1': 0.7777778, 'auroc': 0.8569958847736625, 'auprc': 0.7680535397482187, 'minpse': 0.7222222222222222}
epoch 28
15.889639109373093
validation set
{'acc': 0.95384616, 'prec0': 0.93877554, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.84210527, 'auroc': 0.9382151029748284, 'auprc': 0.9285082420639337, 'minpse': 0.8421052631578947}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.9245283, 'prec1': 0.7368421, 'rec0': 0.9074074, 'rec1': 0.7777778, 'auroc': 0.9022633744855967, 'auprc': 0.8641390176203828, 'minpse': 0.7777777777777778}
epoch 29
16.31736272573471
validation set
{'acc': 0.84615386, 'prec0': 0.90909094, 'prec1': 0.71428573, 'rec0': 0.8695652, 'rec1': 0.7894737, 'auroc': 0.8867276887871853, 'auprc': 0.8202901706781118, 'minpse': 0.7368421052631579}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8727273, 'prec1': 0.64705884, 'rec0': 0.8888889, 'rec1': 0.6111111, 'auroc': 0.8868312757201646, 'auprc': 0.7829850365601398, 'minpse': 0.6666666666666666}
Reset trainable parameters of layer = Conv2d(1, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Linear(in_features=512, out_features=1000, bias=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Conv2d(64, 384, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=7200, bias=True)
Reset trainable parameters of layer = Linear(in_features=1000, out_features=6272, bias=True)
Reset trainable parameters of layer = Linear(in_features=300, out_features=50, bias=True)
Reset trainable parameters of layer = Linear(in_features=50, out_features=300, bias=True)
Reset trainable parameters of layer = Conv1d(300, 300, kernel_size=(24,), stride=(1,))
Reset trainable parameters of layer = Linear(in_features=300, out_features=1, bias=True)
Reset trainable parameters of layer = Linear(in_features=24, out_features=1, bias=True)
for distribution val
type 0= 45 type 1= 20
for distribution test
type 0= 54 type 1= 18
epoch 0
17.745497047901154
validation set
{'acc': 0.9076923, 'prec0': 0.9148936, 'prec1': 0.8888889, 'rec0': 0.95555556, 'rec1': 0.8, 'auroc': 0.9055555555555556, 'auprc': 0.8885218564982141, 'minpse': 0.8}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.92156863, 'prec1': 0.6666667, 'rec0': 0.8703704, 'rec1': 0.7777778, 'auroc': 0.9084362139917695, 'auprc': 0.8226262517438988, 'minpse': 0.7777777777777778}
epoch 1
16.72843909263611
validation set
{'acc': 0.9230769, 'prec0': 0.9, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.75, 'auroc': 0.9055555555555554, 'auprc': 0.8876443427957624, 'minpse': 0.8}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8360656, 'prec1': 0.72727275, 'rec0': 0.9444444, 'rec1': 0.44444445, 'auroc': 0.8343621399176955, 'auprc': 0.73086327495955, 'minpse': 0.6666666666666666}
epoch 2
15.888783603906631
validation set
{'acc': 0.9230769, 'prec0': 0.9166667, 'prec1': 0.9411765, 'rec0': 0.9777778, 'rec1': 0.8, 'auroc': 0.9299999999999999, 'auprc': 0.9102210358911704, 'minpse': 0.8}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.9361702, 'prec1': 0.6, 'rec0': 0.8148148, 'rec1': 0.8333333, 'auroc': 0.8847736625514404, 'auprc': 0.8106093503657255, 'minpse': 0.6666666666666666}
epoch 3
15.86770761013031
validation set
{'acc': 0.9230769, 'prec0': 0.9, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.75, 'auroc': 0.9188888888888889, 'auprc': 0.8979079980191353, 'minpse': 0.8}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.8833333, 'prec1': 0.9166667, 'rec0': 0.9814815, 'rec1': 0.6111111, 'auroc': 0.8899176954732511, 'auprc': 0.8379696009916802, 'minpse': 0.7142857142857143}
epoch 4
15.082978665828705
validation set
{'acc': 0.93846154, 'prec0': 0.9183673, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.8, 'auroc': 0.9299999999999999, 'auprc': 0.9114518405975076, 'minpse': 0.8}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.9056604, 'prec1': 0.68421054, 'rec0': 0.8888889, 'rec1': 0.7222222, 'auroc': 0.8703703703703703, 'auprc': 0.8344525482597778, 'minpse': 0.7222222222222222}
epoch 5
15.557975500822067
validation set
{'acc': 0.9230769, 'prec0': 0.9, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.75, 'auroc': 0.9311111111111111, 'auprc': 0.9013002987303373, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.86206895, 'prec1': 0.71428573, 'rec0': 0.9259259, 'rec1': 0.5555556, 'auroc': 0.8786008230452675, 'auprc': 0.8020751920111306, 'minpse': 0.7222222222222222}
epoch 6
14.11870089173317
validation set
{'acc': 0.9230769, 'prec0': 0.9166667, 'prec1': 0.9411765, 'rec0': 0.9777778, 'rec1': 0.8, 'auroc': 0.9244444444444444, 'auprc': 0.9044294180544181, 'minpse': 0.8}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.8965517, 'prec1': 0.85714287, 'rec0': 0.962963, 'rec1': 0.6666667, 'auroc': 0.9207818930041152, 'auprc': 0.8674032825510364, 'minpse': 0.7777777777777778}
epoch 7
15.650459706783295
validation set
{'acc': 0.9230769, 'prec0': 0.9347826, 'prec1': 0.8947368, 'rec0': 0.95555556, 'rec1': 0.85, 'auroc': 0.9344444444444444, 'auprc': 0.9211473435659636, 'minpse': 0.85}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.9423077, 'prec1': 0.75, 'rec0': 0.9074074, 'rec1': 0.8333333, 'auroc': 0.8960905349794239, 'auprc': 0.8445331019986357, 'minpse': 0.7894736842105263}
epoch 8
15.792317390441895
validation set
{'acc': 0.8923077, 'prec0': 0.9318182, 'prec1': 0.8095238, 'rec0': 0.9111111, 'rec1': 0.85, 'auroc': 0.91, 'auprc': 0.8811112011938209, 'minpse': 0.8095238095238095}
Mortality Prediction on the test set
{'acc': 0.6944444, 'prec0': 0.9, 'prec1': 0.4375, 'rec0': 0.6666667, 'rec1': 0.7777778, 'auroc': 0.8600823045267489, 'auprc': 0.7848630010579352, 'minpse': 0.6666666666666666}
epoch 9
15.714919716119766
validation set
{'acc': 0.8923077, 'prec0': 0.9318182, 'prec1': 0.8095238, 'rec0': 0.9111111, 'rec1': 0.85, 'auroc': 0.9322222222222223, 'auprc': 0.9112241635983056, 'minpse': 0.8095238095238095}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.9375, 'prec1': 0.625, 'rec0': 0.8333333, 'rec1': 0.8333333, 'auroc': 0.8775720164609052, 'auprc': 0.8298062053890558, 'minpse': 0.7777777777777778}
epoch 10
15.905888497829437
validation set
{'acc': 0.93846154, 'prec0': 0.9183673, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.8, 'auroc': 0.9277777777777777, 'auprc': 0.9168883591898298, 'minpse': 0.8095238095238095}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.8965517, 'prec1': 0.85714287, 'rec0': 0.962963, 'rec1': 0.6666667, 'auroc': 0.9393004115226338, 'auprc': 0.8836044570258552, 'minpse': 0.75}
epoch 11
14.9693084359169
validation set
{'acc': 0.9076923, 'prec0': 0.9148936, 'prec1': 0.8888889, 'rec0': 0.95555556, 'rec1': 0.8, 'auroc': 0.9044444444444444, 'auprc': 0.8450356268984566, 'minpse': 0.8}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.8909091, 'prec1': 0.7058824, 'rec0': 0.9074074, 'rec1': 0.6666667, 'auroc': 0.889917695473251, 'auprc': 0.814462538274378, 'minpse': 0.6842105263157895}
epoch 12
16.30716109275818
validation set
{'acc': 0.9230769, 'prec0': 0.9166667, 'prec1': 0.9411765, 'rec0': 0.9777778, 'rec1': 0.8, 'auroc': 0.9344444444444444, 'auprc': 0.9137616474356829, 'minpse': 0.8}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.94, 'prec1': 0.6818182, 'rec0': 0.8703704, 'rec1': 0.8333333, 'auroc': 0.8981481481481481, 'auprc': 0.845216743706309, 'minpse': 0.7894736842105263}
epoch 13
15.520998120307922
validation set
{'acc': 0.9230769, 'prec0': 0.9347826, 'prec1': 0.8947368, 'rec0': 0.95555556, 'rec1': 0.85, 'auroc': 0.9122222222222223, 'auprc': 0.9154800219779118, 'minpse': 0.85}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.9375, 'prec1': 0.625, 'rec0': 0.8333333, 'rec1': 0.8333333, 'auroc': 0.9403292181069958, 'auprc': 0.8914925352425352, 'minpse': 0.7777777777777778}
epoch 14
15.282308369874954
validation set
{'acc': 0.8923077, 'prec0': 0.88, 'prec1': 0.93333334, 'rec0': 0.9777778, 'rec1': 0.7, 'auroc': 0.8366666666666667, 'auprc': 0.7989407358310598, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.84126985, 'prec1': 0.8888889, 'rec0': 0.9814815, 'rec1': 0.44444445, 'auroc': 0.8847736625514404, 'auprc': 0.7593971019924358, 'minpse': 0.631578947368421}
epoch 15
13.94159722328186
validation set
{'acc': 0.9230769, 'prec0': 0.9, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.75, 'auroc': 0.9233333333333333, 'auprc': 0.9012329885642695, 'minpse': 0.8}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.86885244, 'prec1': 0.90909094, 'rec0': 0.9814815, 'rec1': 0.5555556, 'auroc': 0.8960905349794239, 'auprc': 0.835430589221059, 'minpse': 0.7777777777777778}
epoch 16
15.361912369728088
validation set
{'acc': 0.86153847, 'prec0': 0.875, 'prec1': 0.8235294, 'rec0': 0.93333334, 'rec1': 0.7, 'auroc': 0.8533333333333334, 'auprc': 0.8251060114552332, 'minpse': 0.7}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.90909094, 'prec1': 0.7647059, 'rec0': 0.9259259, 'rec1': 0.7222222, 'auroc': 0.9166666666666667, 'auprc': 0.7517171234911949, 'minpse': 0.7222222222222222}
epoch 17
15.02767376601696
validation set
{'acc': 0.9230769, 'prec0': 0.9166667, 'prec1': 0.9411765, 'rec0': 0.9777778, 'rec1': 0.8, 'auroc': 0.9344444444444444, 'auprc': 0.9142057323016193, 'minpse': 0.8}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.90909094, 'prec1': 0.7647059, 'rec0': 0.9259259, 'rec1': 0.7222222, 'auroc': 0.9125514403292181, 'auprc': 0.8574607494562907, 'minpse': 0.7222222222222222}
epoch 18
15.801821649074554
validation set
{'acc': 0.93846154, 'prec0': 0.9183673, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.8, 'auroc': 0.9177777777777777, 'auprc': 0.9017447795077205, 'minpse': 0.8}
Mortality Prediction on the test set
{'acc': 0.9027778, 'prec0': 0.9122807, 'prec1': 0.8666667, 'rec0': 0.962963, 'rec1': 0.7222222, 'auroc': 0.948559670781893, 'auprc': 0.9044491781921722, 'minpse': 0.8333333333333334}
epoch 19
15.147304058074951
validation set
{'acc': 0.93846154, 'prec0': 0.9361702, 'prec1': 0.9444444, 'rec0': 0.9777778, 'rec1': 0.85, 'auroc': 0.9422222222222222, 'auprc': 0.9300455891783654, 'minpse': 0.85}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.9230769, 'prec1': 0.7, 'rec0': 0.8888889, 'rec1': 0.7777778, 'auroc': 0.904320987654321, 'auprc': 0.852546510598904, 'minpse': 0.7777777777777778}
epoch 20
15.082883387804031
validation set
{'acc': 0.9076923, 'prec0': 0.95348835, 'prec1': 0.8181818, 'rec0': 0.9111111, 'rec1': 0.9, 'auroc': 0.9244444444444445, 'auprc': 0.9232812716240957, 'minpse': 0.85}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.93333334, 'prec1': 0.5555556, 'rec0': 0.7777778, 'rec1': 0.8333333, 'auroc': 0.9094650205761317, 'auprc': 0.8475131184420751, 'minpse': 0.7777777777777778}
epoch 21
16.430533945560455
validation set
{'acc': 0.93846154, 'prec0': 0.9361702, 'prec1': 0.9444444, 'rec0': 0.9777778, 'rec1': 0.85, 'auroc': 0.9322222222222222, 'auprc': 0.9236731708368957, 'minpse': 0.85}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.9230769, 'prec1': 0.7, 'rec0': 0.8888889, 'rec1': 0.7777778, 'auroc': 0.9290123456790123, 'auprc': 0.8735005750267586, 'minpse': 0.7777777777777778}
epoch 22
15.550748854875565
validation set
{'acc': 0.9076923, 'prec0': 0.95348835, 'prec1': 0.8181818, 'rec0': 0.9111111, 'rec1': 0.9, 'auroc': 0.928888888888889, 'auprc': 0.9181590612720367, 'minpse': 0.85}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.93333334, 'prec1': 0.5555556, 'rec0': 0.7777778, 'rec1': 0.8333333, 'auroc': 0.8930041152263375, 'auprc': 0.8288903043475917, 'minpse': 0.75}
epoch 23
16.035593569278717
validation set
{'acc': 0.84615386, 'prec0': 0.85714287, 'prec1': 0.8125, 'rec0': 0.93333334, 'rec1': 0.65, 'auroc': 0.8288888888888888, 'auprc': 0.7393610016816129, 'minpse': 0.7}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.87931037, 'prec1': 0.78571427, 'rec0': 0.9444444, 'rec1': 0.6111111, 'auroc': 0.8621399176954733, 'auprc': 0.6380731217080184, 'minpse': 0.6666666666666666}
epoch 24
14.753286927938461
validation set
{'acc': 0.9076923, 'prec0': 0.9148936, 'prec1': 0.8888889, 'rec0': 0.95555556, 'rec1': 0.8, 'auroc': 0.8999999999999999, 'auprc': 0.8835659944867107, 'minpse': 0.8}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.9245283, 'prec1': 0.7368421, 'rec0': 0.9074074, 'rec1': 0.7777778, 'auroc': 0.9341563786008229, 'auprc': 0.8576406300273258, 'minpse': 0.7368421052631579}
epoch 25
15.861536204814911
validation set
{'acc': 0.9076923, 'prec0': 0.95348835, 'prec1': 0.8181818, 'rec0': 0.9111111, 'rec1': 0.9, 'auroc': 0.9311111111111111, 'auprc': 0.9215512391705428, 'minpse': 0.85}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.9130435, 'prec1': 0.53846157, 'rec0': 0.7777778, 'rec1': 0.7777778, 'auroc': 0.9094650205761317, 'auprc': 0.855346478049973, 'minpse': 0.7777777777777778}
epoch 26
14.37592300772667
validation set
{'acc': 0.93846154, 'prec0': 0.9183673, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.8, 'auroc': 0.9388888888888889, 'auprc': 0.920410694023226, 'minpse': 0.8}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.94, 'prec1': 0.6818182, 'rec0': 0.8703704, 'rec1': 0.8333333, 'auroc': 0.8919753086419753, 'auprc': 0.819861823713185, 'minpse': 0.7142857142857143}
epoch 27
15.949734330177307
validation set
{'acc': 0.9076923, 'prec0': 0.9148936, 'prec1': 0.8888889, 'rec0': 0.95555556, 'rec1': 0.8, 'auroc': 0.9377777777777778, 'auprc': 0.9140197388040104, 'minpse': 0.8}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9166667, 'prec1': 0.5833333, 'rec0': 0.8148148, 'rec1': 0.7777778, 'auroc': 0.8868312757201646, 'auprc': 0.8036523925242636, 'minpse': 0.7777777777777778}
epoch 28
14.520442724227905
validation set
{'acc': 0.9230769, 'prec0': 0.9, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.75, 'auroc': 0.9222222222222223, 'auprc': 0.8970933618012422, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.86440676, 'prec1': 0.7692308, 'rec0': 0.9444444, 'rec1': 0.5555556, 'auroc': 0.8755144032921811, 'auprc': 0.8024437269353901, 'minpse': 0.7222222222222222}
epoch 29
14.881504118442535
validation set
{'acc': 0.9230769, 'prec0': 0.9347826, 'prec1': 0.8947368, 'rec0': 0.95555556, 'rec1': 0.85, 'auroc': 0.9211111111111112, 'auprc': 0.9094096046890956, 'minpse': 0.85}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.9183673, 'prec1': 0.6086956, 'rec0': 0.8333333, 'rec1': 0.7777778, 'auroc': 0.9197530864197531, 'auprc': 0.8773443600433696, 'minpse': 0.7777777777777778}
Reset trainable parameters of layer = Conv2d(1, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Linear(in_features=512, out_features=1000, bias=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Conv2d(64, 384, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=7200, bias=True)
Reset trainable parameters of layer = Linear(in_features=1000, out_features=6272, bias=True)
Reset trainable parameters of layer = Linear(in_features=300, out_features=50, bias=True)
Reset trainable parameters of layer = Linear(in_features=50, out_features=300, bias=True)
Reset trainable parameters of layer = Conv1d(300, 300, kernel_size=(24,), stride=(1,))
Reset trainable parameters of layer = Linear(in_features=300, out_features=1, bias=True)
Reset trainable parameters of layer = Linear(in_features=24, out_features=1, bias=True)
for distribution val
type 0= 52 type 1= 13
for distribution test
type 0= 54 type 1= 18
epoch 0
17.11482036113739
validation set
{'acc': 0.95384616, 'prec0': 1.0, 'prec1': 0.8125, 'rec0': 0.9423077, 'rec1': 1.0, 'auroc': 0.9896449704142012, 'auprc': 0.9596401995440458, 'minpse': 0.8571428571428571}
Mortality Prediction on the test set
{'acc': 0.9166667, 'prec0': 0.9285714, 'prec1': 0.875, 'rec0': 0.962963, 'rec1': 0.7777778, 'auroc': 0.9300411522633745, 'auprc': 0.8622397105010113, 'minpse': 0.7777777777777778}
epoch 1
17.71515268087387
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.89285713, 'prec1': 0.75, 'rec0': 0.9259259, 'rec1': 0.6666667, 'auroc': 0.8796296296296297, 'auprc': 0.8143959588197389, 'minpse': 0.6666666666666666}
epoch 2
15.864723980426788
validation set
{'acc': 0.9846154, 'prec0': 0.9811321, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.9230769, 'auroc': 0.9940828402366865, 'auprc': 0.9813348416289593, 'minpse': 0.9230769230769231}
Mortality Prediction on the test set
{'acc': 0.9166667, 'prec0': 0.9, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.6666667, 'auroc': 0.8960905349794238, 'auprc': 0.8344835687043571, 'minpse': 0.6666666666666666}
epoch 3
17.571553587913513
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.8947368, 'prec1': 0.8, 'rec0': 0.9444444, 'rec1': 0.6666667, 'auroc': 0.8878600823045267, 'auprc': 0.8200991820747411, 'minpse': 0.6666666666666666}
epoch 4
17.367494642734528
validation set
{'acc': 0.93846154, 'prec0': 0.98, 'prec1': 0.8, 'rec0': 0.9423077, 'rec1': 0.9230769, 'auroc': 0.9349112426035504, 'auprc': 0.9134805993403279, 'minpse': 0.8461538461538461}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.90909094, 'prec1': 0.7647059, 'rec0': 0.9259259, 'rec1': 0.7222222, 'auroc': 0.9012345679012347, 'auprc': 0.801199063292852, 'minpse': 0.7368421052631579}
epoch 5
16.821073532104492
validation set
{'acc': 0.8923077, 'prec0': 0.9787234, 'prec1': 0.6666667, 'rec0': 0.88461536, 'rec1': 0.9230769, 'auroc': 0.9393491124260355, 'auprc': 0.9011648733368192, 'minpse': 0.7857142857142857}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.92, 'prec1': 0.6363636, 'rec0': 0.8518519, 'rec1': 0.7777778, 'auroc': 0.8858024691358024, 'auprc': 0.7713234882000115, 'minpse': 0.7368421052631579}
epoch 6
15.766051709651947
validation set
{'acc': 0.9846154, 'prec0': 1.0, 'prec1': 0.9285714, 'rec0': 0.9807692, 'rec1': 1.0, 'auroc': 0.9955621301775147, 'auprc': 0.9814288275826737, 'minpse': 0.9285714285714286}
Mortality Prediction on the test set
{'acc': 0.9166667, 'prec0': 0.9137931, 'prec1': 0.9285714, 'rec0': 0.9814815, 'rec1': 0.7222222, 'auroc': 0.9084362139917695, 'auprc': 0.8623630740327233, 'minpse': 0.7222222222222222}
epoch 7
15.875667035579681
validation set
{'acc': 0.9692308, 'prec0': 0.962963, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.84615386, 'auroc': 0.9275147928994083, 'auprc': 0.9167591631794418, 'minpse': 0.8461538461538461}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.83870965, 'prec1': 0.8, 'rec0': 0.962963, 'rec1': 0.44444445, 'auroc': 0.8981481481481481, 'auprc': 0.8071735334695901, 'minpse': 0.7777777777777778}
epoch 8
16.443717807531357
validation set
{'acc': 0.93846154, 'prec0': 0.98, 'prec1': 0.8, 'rec0': 0.9423077, 'rec1': 0.9230769, 'auroc': 0.9275147928994083, 'auprc': 0.9171590810883008, 'minpse': 0.8461538461538461}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.9245283, 'prec1': 0.7368421, 'rec0': 0.9074074, 'rec1': 0.7777778, 'auroc': 0.9002057613168725, 'auprc': 0.8264715135818478, 'minpse': 0.7777777777777778}
epoch 9
16.048489212989807
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.9027778, 'prec0': 0.89830506, 'prec1': 0.9230769, 'rec0': 0.9814815, 'rec1': 0.6666667, 'auroc': 0.9320987654320987, 'auprc': 0.8852519570630185, 'minpse': 0.8333333333333334}
epoch 10
16.437559187412262
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.9027778, 'prec0': 0.8852459, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.6111111, 'auroc': 0.911522633744856, 'auprc': 0.862285477040859, 'minpse': 0.7894736842105263}
epoch 11
16.961524784564972
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.8833333, 'prec1': 0.9166667, 'rec0': 0.9814815, 'rec1': 0.6111111, 'auroc': 0.8878600823045267, 'auprc': 0.8354589870432257, 'minpse': 0.7222222222222222}
epoch 12
15.936047226190567
validation set
{'acc': 0.95384616, 'prec0': 1.0, 'prec1': 0.8125, 'rec0': 0.9423077, 'rec1': 1.0, 'auroc': 0.9955621301775148, 'auprc': 0.9850961538461538, 'minpse': 0.9230769230769231}
Mortality Prediction on the test set
{'acc': 0.9166667, 'prec0': 0.9137931, 'prec1': 0.9285714, 'rec0': 0.9814815, 'rec1': 0.7222222, 'auroc': 0.9279835390946501, 'auprc': 0.8777938158060654, 'minpse': 0.7777777777777778}
epoch 13
18.38775461912155
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.87931037, 'prec1': 0.78571427, 'rec0': 0.9444444, 'rec1': 0.6111111, 'auroc': 0.8713991769547325, 'auprc': 0.7919567030174273, 'minpse': 0.6666666666666666}
epoch 14
16.65355947613716
validation set
{'acc': 0.9846154, 'prec0': 0.9811321, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.9230769, 'auroc': 0.9940828402366865, 'auprc': 0.9813348416289593, 'minpse': 0.9230769230769231}
Mortality Prediction on the test set
{'acc': 0.9166667, 'prec0': 0.9, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.6666667, 'auroc': 0.911522633744856, 'auprc': 0.8647217955685338, 'minpse': 0.7777777777777778}
epoch 15
15.761530548334122
validation set
{'acc': 0.9846154, 'prec0': 0.9811321, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.9230769, 'auroc': 0.9940828402366865, 'auprc': 0.9813348416289593, 'minpse': 0.9230769230769231}
Mortality Prediction on the test set
{'acc': 0.9027778, 'prec0': 0.89830506, 'prec1': 0.9230769, 'rec0': 0.9814815, 'rec1': 0.6666667, 'auroc': 0.926954732510288, 'auprc': 0.8791228291921964, 'minpse': 0.7894736842105263}
epoch 16
17.851116180419922
validation set
{'acc': 0.9846154, 'prec0': 0.9811321, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.9230769, 'auroc': 0.9896449704142012, 'auprc': 0.9723684210526315, 'minpse': 0.9230769230769231}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.8666667, 'prec1': 0.8333333, 'rec0': 0.962963, 'rec1': 0.5555556, 'auroc': 0.8827160493827161, 'auprc': 0.8106073046729692, 'minpse': 0.7777777777777778}
epoch 17
17.752696841955185
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.9027778, 'prec0': 0.8852459, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.6111111, 'auroc': 0.9115226337448561, 'auprc': 0.8589865661920146, 'minpse': 0.7894736842105263}
epoch 18
16.10364145040512
validation set
{'acc': 0.9846154, 'prec0': 0.9811321, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.9230769, 'auroc': 0.9659763313609468, 'auprc': 0.9501526251526251, 'minpse': 0.9230769230769231}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.9259259, 'prec1': 0.7777778, 'rec0': 0.9259259, 'rec1': 0.7777778, 'auroc': 0.9104938271604939, 'auprc': 0.8615897644233188, 'minpse': 0.7894736842105263}
epoch 19
17.266533374786377
validation set
{'acc': 0.9846154, 'prec0': 0.9811321, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.9230769, 'auroc': 0.9911242603550295, 'auprc': 0.975033738191633, 'minpse': 0.9230769230769231}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.87096775, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.5555556, 'auroc': 0.8827160493827161, 'auprc': 0.8217488478731019, 'minpse': 0.7222222222222222}
epoch 20
16.514070063829422
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.88135594, 'prec1': 0.84615386, 'rec0': 0.962963, 'rec1': 0.6111111, 'auroc': 0.8950617283950617, 'auprc': 0.838672861878211, 'minpse': 0.7777777777777778}
epoch 21
17.87389212846756
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.86885244, 'prec1': 0.90909094, 'rec0': 0.9814815, 'rec1': 0.5555556, 'auroc': 0.8611111111111112, 'auprc': 0.7791468220155453, 'minpse': 0.631578947368421}
epoch 22
16.43349426984787
validation set
{'acc': 0.9846154, 'prec0': 0.9811321, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.9230769, 'auroc': 0.9911242603550295, 'auprc': 0.975033738191633, 'minpse': 0.9230769230769231}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.8548387, 'prec1': 0.9, 'rec0': 0.9814815, 'rec1': 0.5, 'auroc': 0.8652263374485597, 'auprc': 0.8033155316186987, 'minpse': 0.7368421052631579}
epoch 23
18.033007740974426
validation set
{'acc': 0.9846154, 'prec0': 0.9811321, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.9230769, 'auroc': 0.9940828402366865, 'auprc': 0.9813348416289593, 'minpse': 0.9230769230769231}
Mortality Prediction on the test set
{'acc': 0.9027778, 'prec0': 0.92727274, 'prec1': 0.8235294, 'rec0': 0.9444444, 'rec1': 0.7777778, 'auroc': 0.9320987654320988, 'auprc': 0.8775889906539553, 'minpse': 0.7777777777777778}
epoch 24
16.596314907073975
validation set
{'acc': 0.93846154, 'prec0': 1.0, 'prec1': 0.7647059, 'rec0': 0.9230769, 'rec1': 1.0, 'auroc': 0.9911242603550297, 'auprc': 0.9699231763711402, 'minpse': 0.8571428571428571}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.97727275, 'prec1': 0.60714287, 'rec0': 0.7962963, 'rec1': 0.9444444, 'auroc': 0.9248971193415637, 'auprc': 0.8546066119302652, 'minpse': 0.7}
epoch 25
16.165955245494843
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.9166667, 'prec0': 0.9, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.6666667, 'auroc': 0.934156378600823, 'auprc': 0.8774824475790919, 'minpse': 0.7368421052631579}
epoch 26
16.34476712346077
validation set
{'acc': 0.9692308, 'prec0': 1.0, 'prec1': 0.8666667, 'rec0': 0.96153843, 'rec1': 1.0, 'auroc': 0.9970414201183432, 'auprc': 0.9893772893772894, 'minpse': 0.9230769230769231}
Mortality Prediction on the test set
{'acc': 0.9027778, 'prec0': 0.92727274, 'prec1': 0.8235294, 'rec0': 0.9444444, 'rec1': 0.7777778, 'auroc': 0.9104938271604939, 'auprc': 0.8593219697626271, 'minpse': 0.7777777777777778}
epoch 27
16.233705788850784
validation set
{'acc': 0.9846154, 'prec0': 1.0, 'prec1': 0.9285714, 'rec0': 0.9807692, 'rec1': 1.0, 'auroc': 0.9955621301775147, 'auprc': 0.9814288275826737, 'minpse': 0.9285714285714286}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.9056604, 'prec1': 0.68421054, 'rec0': 0.8888889, 'rec1': 0.7222222, 'auroc': 0.8724279835390946, 'auprc': 0.7953876501663582, 'minpse': 0.7222222222222222}
epoch 28
15.972335934638977
validation set
{'acc': 0.8923077, 'prec0': 0.9787234, 'prec1': 0.6666667, 'rec0': 0.88461536, 'rec1': 0.9230769, 'auroc': 0.9571005917159763, 'auprc': 0.8715306099129629, 'minpse': 0.7692307692307693}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.87234044, 'prec1': 0.48, 'rec0': 0.7592593, 'rec1': 0.6666667, 'auroc': 0.7973251028806585, 'auprc': 0.6679522654536421, 'minpse': 0.5714285714285714}
epoch 29
17.111568093299866
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.9074074, 'prec1': 0.7222222, 'rec0': 0.9074074, 'rec1': 0.7222222, 'auroc': 0.8940329218106996, 'auprc': 0.8287067432079487, 'minpse': 0.7222222222222222}
Reset trainable parameters of layer = Conv2d(1, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Linear(in_features=512, out_features=1000, bias=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Conv2d(64, 384, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=7200, bias=True)
Reset trainable parameters of layer = Linear(in_features=1000, out_features=6272, bias=True)
Reset trainable parameters of layer = Linear(in_features=300, out_features=50, bias=True)
Reset trainable parameters of layer = Linear(in_features=50, out_features=300, bias=True)
Reset trainable parameters of layer = Conv1d(300, 300, kernel_size=(24,), stride=(1,))
Reset trainable parameters of layer = Linear(in_features=300, out_features=1, bias=True)
Reset trainable parameters of layer = Linear(in_features=24, out_features=1, bias=True)
for distribution val
type 0= 53 type 1= 12
for distribution test
type 0= 54 type 1= 18
epoch 0
16.636183857917786
validation set
{'acc': 0.9846154, 'prec0': 0.9814815, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.9166667, 'auroc': 0.9779874213836478, 'auprc': 0.9542307692307691, 'minpse': 0.9166666666666666}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.86206895, 'prec1': 0.71428573, 'rec0': 0.9259259, 'rec1': 0.5555556, 'auroc': 0.8765432098765433, 'auprc': 0.798700442315027, 'minpse': 0.7222222222222222}
epoch 1
16.80554574728012
validation set
{'acc': 0.9846154, 'prec0': 0.9814815, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.9166667, 'auroc': 0.9858490566037736, 'auprc': 0.963392857142857, 'minpse': 0.9166666666666666}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.90909094, 'prec1': 0.7647059, 'rec0': 0.9259259, 'rec1': 0.7222222, 'auroc': 0.8858024691358025, 'auprc': 0.8118665154517288, 'minpse': 0.7222222222222222}
epoch 2
17.287275910377502
validation set
{'acc': 0.9692308, 'prec0': 0.96363634, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.8333333, 'auroc': 0.9528301886792453, 'auprc': 0.9160019394394394, 'minpse': 0.8333333333333334}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.9245283, 'prec1': 0.7368421, 'rec0': 0.9074074, 'rec1': 0.7777778, 'auroc': 0.9156378600823045, 'auprc': 0.8564469288675001, 'minpse': 0.7368421052631579}
epoch 3
16.493572533130646
validation set
{'acc': 0.9846154, 'prec0': 0.9814815, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.9166667, 'auroc': 0.988993710691824, 'auprc': 0.9684454191033137, 'minpse': 0.9166666666666666}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.9148936, 'prec1': 0.56, 'rec0': 0.7962963, 'rec1': 0.7777778, 'auroc': 0.8940329218106996, 'auprc': 0.8200754370793011, 'minpse': 0.7222222222222222}
epoch 4
17.84108594059944
validation set
{'acc': 0.9692308, 'prec0': 0.96363634, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.8333333, 'auroc': 0.9701257861635221, 'auprc': 0.927321047008547, 'minpse': 0.8333333333333334}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.91071427, 'prec1': 0.8125, 'rec0': 0.9444444, 'rec1': 0.7222222, 'auroc': 0.9248971193415638, 'auprc': 0.8800003596557975, 'minpse': 0.7777777777777778}
epoch 5
16.92143404483795
validation set
{'acc': 0.93846154, 'prec0': 0.9622642, 'prec1': 0.8333333, 'rec0': 0.9622642, 'rec1': 0.8333333, 'auroc': 0.9261006289308177, 'auprc': 0.803480706493383, 'minpse': 0.8333333333333334}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.9074074, 'prec1': 0.7222222, 'rec0': 0.9074074, 'rec1': 0.7222222, 'auroc': 0.9310699588477366, 'auprc': 0.8755802282034422, 'minpse': 0.7222222222222222}
epoch 6
16.8773835003376
validation set
{'acc': 0.9692308, 'prec0': 0.96363634, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.8333333, 'auroc': 0.9339622641509434, 'auprc': 0.8907450336456423, 'minpse': 0.8333333333333334}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.91071427, 'prec1': 0.8125, 'rec0': 0.9444444, 'rec1': 0.7222222, 'auroc': 0.888888888888889, 'auprc': 0.8460743444450765, 'minpse': 0.7777777777777778}
epoch 7
16.661187648773193
validation set
{'acc': 0.8769231, 'prec0': 0.9787234, 'prec1': 0.6111111, 'rec0': 0.8679245, 'rec1': 0.9166667, 'auroc': 0.9481132075471699, 'auprc': 0.8910401553783908, 'minpse': 0.7692307692307693}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9347826, 'prec1': 0.5769231, 'rec0': 0.7962963, 'rec1': 0.8333333, 'auroc': 0.9074074074074074, 'auprc': 0.8438009401135969, 'minpse': 0.7777777777777778}
epoch 8
17.475188851356506
validation set
{'acc': 0.95384616, 'prec0': 0.9807692, 'prec1': 0.84615386, 'rec0': 0.9622642, 'rec1': 0.9166667, 'auroc': 0.9701257861635221, 'auprc': 0.9142872636622636, 'minpse': 0.8461538461538461}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.88461536, 'prec1': 0.6, 'rec0': 0.8518519, 'rec1': 0.6666667, 'auroc': 0.838477366255144, 'auprc': 0.7149931934357114, 'minpse': 0.6111111111111112}
epoch 9
17.416520535945892
validation set
{'acc': 0.93846154, 'prec0': 0.98039216, 'prec1': 0.78571427, 'rec0': 0.9433962, 'rec1': 0.9166667, 'auroc': 0.9544025157232705, 'auprc': 0.8867203025469154, 'minpse': 0.7857142857142857}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.8909091, 'prec1': 0.7058824, 'rec0': 0.9074074, 'rec1': 0.6666667, 'auroc': 0.8374485596707818, 'auprc': 0.7218614734752221, 'minpse': 0.6666666666666666}
epoch 10
16.603532552719116
validation set
{'acc': 0.93846154, 'prec0': 0.98039216, 'prec1': 0.78571427, 'rec0': 0.9433962, 'rec1': 0.9166667, 'auroc': 0.9748427672955975, 'auprc': 0.9372199328449328, 'minpse': 0.8333333333333334}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.8888889, 'prec1': 0.6666667, 'rec0': 0.8888889, 'rec1': 0.6666667, 'auroc': 0.8353909465020576, 'auprc': 0.739949350381832, 'minpse': 0.6666666666666666}
epoch 11
16.12488552927971
validation set
{'acc': 0.9846154, 'prec0': 0.9814815, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.9166667, 'auroc': 0.9827044025157233, 'auprc': 0.9592391304347826, 'minpse': 0.9166666666666666}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.86440676, 'prec1': 0.7692308, 'rec0': 0.9444444, 'rec1': 0.5555556, 'auroc': 0.8631687242798354, 'auprc': 0.7771194462478933, 'minpse': 0.6666666666666666}
epoch 12
15.437524735927582
validation set
{'acc': 0.9692308, 'prec0': 0.9811321, 'prec1': 0.9166667, 'rec0': 0.9811321, 'rec1': 0.9166667, 'auroc': 0.9842767295597484, 'auprc': 0.9561327561327561, 'minpse': 0.9166666666666666}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.9056604, 'prec1': 0.68421054, 'rec0': 0.8888889, 'rec1': 0.7222222, 'auroc': 0.8724279835390947, 'auprc': 0.795990391393725, 'minpse': 0.6842105263157895}
epoch 13
16.02825838327408
validation set
{'acc': 0.9846154, 'prec0': 0.9814815, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.9166667, 'auroc': 0.9811320754716981, 'auprc': 0.957427536231884, 'minpse': 0.9166666666666666}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.89285713, 'prec1': 0.75, 'rec0': 0.9259259, 'rec1': 0.6666667, 'auroc': 0.9032921810699588, 'auprc': 0.8414818769583932, 'minpse': 0.7777777777777778}
epoch 14
15.813400506973267
validation set
{'acc': 0.9846154, 'prec0': 0.9814815, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.9166667, 'auroc': 0.9905660377358491, 'auprc': 0.9714052287581699, 'minpse': 0.9166666666666666}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.94, 'prec1': 0.6818182, 'rec0': 0.8703704, 'rec1': 0.8333333, 'auroc': 0.9074074074074074, 'auprc': 0.8567679610074465, 'minpse': 0.7777777777777778}
epoch 15
16.370379149913788
validation set
{'acc': 0.8769231, 'prec0': 0.9591837, 'prec1': 0.625, 'rec0': 0.8867925, 'rec1': 0.8333333, 'auroc': 0.9056603773584906, 'auprc': 0.7747420722636241, 'minpse': 0.6428571428571429}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.9183673, 'prec1': 0.6086956, 'rec0': 0.8333333, 'rec1': 0.7777778, 'auroc': 0.8909465020576132, 'auprc': 0.666955747242985, 'minpse': 0.6842105263157895}
epoch 16
17.66332110762596
validation set
{'acc': 0.9692308, 'prec0': 0.9811321, 'prec1': 0.9166667, 'rec0': 0.9811321, 'rec1': 0.9166667, 'auroc': 0.9764150943396227, 'auprc': 0.9469706682206681, 'minpse': 0.9166666666666666}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.92156863, 'prec1': 0.6666667, 'rec0': 0.8703704, 'rec1': 0.7777778, 'auroc': 0.9238683127572016, 'auprc': 0.8733814705440541, 'minpse': 0.7777777777777778}
epoch 17
15.932549923658371
validation set
{'acc': 0.9692308, 'prec0': 0.9811321, 'prec1': 0.9166667, 'rec0': 0.9811321, 'rec1': 0.9166667, 'auroc': 0.9827044025157233, 'auprc': 0.9539592352092352, 'minpse': 0.9166666666666666}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.93877554, 'prec1': 0.65217394, 'rec0': 0.8518519, 'rec1': 0.8333333, 'auroc': 0.9300411522633745, 'auprc': 0.888930012206871, 'minpse': 0.7777777777777778}
epoch 18
17.026103258132935
validation set
{'acc': 0.9846154, 'prec0': 0.9814815, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.9166667, 'auroc': 0.9559748427672956, 'auprc': 0.9409188034188034, 'minpse': 0.9166666666666666}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.9245283, 'prec1': 0.7368421, 'rec0': 0.9074074, 'rec1': 0.7777778, 'auroc': 0.9063786008230452, 'auprc': 0.8445604780610653, 'minpse': 0.7777777777777778}
epoch 19
16.650614500045776
validation set
{'acc': 0.9692308, 'prec0': 0.96363634, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.8333333, 'auroc': 0.9606918238993711, 'auprc': 0.9201668906810035, 'minpse': 0.8333333333333334}
Mortality Prediction on the test set
{'acc': 0.9027778, 'prec0': 0.92727274, 'prec1': 0.8235294, 'rec0': 0.9444444, 'rec1': 0.7777778, 'auroc': 0.867283950617284, 'auprc': 0.7972128481817562, 'minpse': 0.7777777777777778}
epoch 20
16.334758758544922
validation set
{'acc': 0.93846154, 'prec0': 0.98039216, 'prec1': 0.78571427, 'rec0': 0.9433962, 'rec1': 0.9166667, 'auroc': 0.9748427672955975, 'auprc': 0.9372199328449328, 'minpse': 0.8333333333333334}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.875, 'prec1': 0.5, 'rec0': 0.7777778, 'rec1': 0.6666667, 'auroc': 0.8415637860082305, 'auprc': 0.7593732872618737, 'minpse': 0.6111111111111112}
epoch 21
17.1235568523407
validation set
{'acc': 0.9846154, 'prec0': 0.9814815, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.9166667, 'auroc': 0.9842767295597485, 'auprc': 0.9612193362193362, 'minpse': 0.9166666666666666}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.9074074, 'prec1': 0.7222222, 'rec0': 0.9074074, 'rec1': 0.7222222, 'auroc': 0.9228395061728395, 'auprc': 0.8809711718985913, 'minpse': 0.7222222222222222}
epoch 22
16.12925237417221
validation set
{'acc': 0.9846154, 'prec0': 0.9814815, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.9166667, 'auroc': 0.9842767295597485, 'auprc': 0.9612193362193362, 'minpse': 0.9166666666666666}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.92156863, 'prec1': 0.6666667, 'rec0': 0.8703704, 'rec1': 0.7777778, 'auroc': 0.9382716049382716, 'auprc': 0.8827717985217031, 'minpse': 0.7222222222222222}
epoch 23
16.048989713191986
validation set
{'acc': 0.9846154, 'prec0': 0.9814815, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.9166667, 'auroc': 0.9858490566037736, 'auprc': 0.963392857142857, 'minpse': 0.9166666666666666}
Mortality Prediction on the test set
{'acc': 0.9027778, 'prec0': 0.9122807, 'prec1': 0.8666667, 'rec0': 0.962963, 'rec1': 0.7222222, 'auroc': 0.9012345679012346, 'auprc': 0.8496902598653806, 'minpse': 0.7222222222222222}
epoch 24
16.956736654043198
validation set
{'acc': 0.9846154, 'prec0': 0.9814815, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.9166667, 'auroc': 0.9811320754716981, 'auprc': 0.957427536231884, 'minpse': 0.9166666666666666}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.875, 'prec1': 0.6875, 'rec0': 0.9074074, 'rec1': 0.6111111, 'auroc': 0.8775720164609053, 'auprc': 0.8015449151368026, 'minpse': 0.6666666666666666}
epoch 25
16.917966425418854
validation set
{'acc': 0.9692308, 'prec0': 0.9811321, 'prec1': 0.9166667, 'rec0': 0.9811321, 'rec1': 0.9166667, 'auroc': 0.9842767295597484, 'auprc': 0.9561327561327561, 'minpse': 0.9166666666666666}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.92, 'prec1': 0.6363636, 'rec0': 0.8518519, 'rec1': 0.7777778, 'auroc': 0.8991769547325104, 'auprc': 0.8376239399201993, 'minpse': 0.6842105263157895}
epoch 26
16.548191636800766
validation set
{'acc': 0.9846154, 'prec0': 0.9814815, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.9166667, 'auroc': 0.9748427672955975, 'auprc': 0.9514991181657847, 'minpse': 0.9166666666666666}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.9245283, 'prec1': 0.7368421, 'rec0': 0.9074074, 'rec1': 0.7777778, 'auroc': 0.9146090534979424, 'auprc': 0.8514866193345663, 'minpse': 0.7777777777777778}
epoch 27
16.22043126821518
validation set
{'acc': 0.9692308, 'prec0': 0.96363634, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.8333333, 'auroc': 0.9559748427672956, 'auprc': 0.9070327150037295, 'minpse': 0.8333333333333334}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.90909094, 'prec1': 0.7647059, 'rec0': 0.9259259, 'rec1': 0.7222222, 'auroc': 0.8765432098765432, 'auprc': 0.8144385024518507, 'minpse': 0.7222222222222222}
epoch 28
15.962233632802963
validation set
{'acc': 0.9846154, 'prec0': 0.9814815, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.9166667, 'auroc': 0.979559748427673, 'auprc': 0.9557638888888889, 'minpse': 0.9166666666666666}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.8666667, 'prec1': 0.8333333, 'rec0': 0.962963, 'rec1': 0.5555556, 'auroc': 0.8569958847736625, 'auprc': 0.7815999728136975, 'minpse': 0.7222222222222222}
epoch 29
16.22811657190323
validation set
{'acc': 0.9846154, 'prec0': 0.9814815, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.9166667, 'auroc': 0.988993710691824, 'auprc': 0.9684454191033137, 'minpse': 0.9166666666666666}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.86440676, 'prec1': 0.7692308, 'rec0': 0.9444444, 'rec1': 0.5555556, 'auroc': 0.8806584362139918, 'auprc': 0.8082098033258576, 'minpse': 0.7222222222222222}
Reset trainable parameters of layer = Conv2d(1, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Linear(in_features=512, out_features=1000, bias=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Conv2d(64, 384, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=7200, bias=True)
Reset trainable parameters of layer = Linear(in_features=1000, out_features=6272, bias=True)
Reset trainable parameters of layer = Linear(in_features=300, out_features=50, bias=True)
Reset trainable parameters of layer = Linear(in_features=50, out_features=300, bias=True)
Reset trainable parameters of layer = Conv1d(300, 300, kernel_size=(24,), stride=(1,))
Reset trainable parameters of layer = Linear(in_features=300, out_features=1, bias=True)
Reset trainable parameters of layer = Linear(in_features=24, out_features=1, bias=True)
for distribution val
type 0= 45 type 1= 20
for distribution test
type 0= 54 type 1= 18
epoch 0
17.674041509628296
validation set
{'acc': 0.8769231, 'prec0': 0.9512195, 'prec1': 0.75, 'rec0': 0.8666667, 'rec1': 0.9, 'auroc': 0.9066666666666667, 'auprc': 0.8038600055773157, 'minpse': 0.7619047619047619}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.92156863, 'prec1': 0.6666667, 'rec0': 0.8703704, 'rec1': 0.7777778, 'auroc': 0.9176954732510287, 'auprc': 0.8423039569752186, 'minpse': 0.7777777777777778}
epoch 1
16.42434272170067
validation set
{'acc': 0.9230769, 'prec0': 0.95454544, 'prec1': 0.85714287, 'rec0': 0.93333334, 'rec1': 0.9, 'auroc': 0.9466666666666667, 'auprc': 0.9363878221231163, 'minpse': 0.8571428571428571}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.90909094, 'prec1': 0.5, 'rec0': 0.7407407, 'rec1': 0.7777778, 'auroc': 0.8683127572016461, 'auprc': 0.7692547510012849, 'minpse': 0.631578947368421}
epoch 2
16.713365256786346
validation set
{'acc': 0.95384616, 'prec0': 0.95652175, 'prec1': 0.94736844, 'rec0': 0.9777778, 'rec1': 0.9, 'auroc': 0.9522222222222223, 'auprc': 0.9434679171578486, 'minpse': 0.9}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.8863636, 'prec1': 0.4642857, 'rec0': 0.7222222, 'rec1': 0.7222222, 'auroc': 0.8703703703703702, 'auprc': 0.8093246715497767, 'minpse': 0.6666666666666666}
epoch 3
15.439378410577774
validation set
{'acc': 0.86153847, 'prec0': 0.875, 'prec1': 0.8235294, 'rec0': 0.93333334, 'rec1': 0.7, 'auroc': 0.8911111111111111, 'auprc': 0.8303599449296271, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.8909091, 'prec1': 0.7058824, 'rec0': 0.9074074, 'rec1': 0.6666667, 'auroc': 0.9300411522633745, 'auprc': 0.8592531923467861, 'minpse': 0.7222222222222222}
epoch 4
16.20268514752388
validation set
{'acc': 0.93846154, 'prec0': 0.9361702, 'prec1': 0.9444444, 'rec0': 0.9777778, 'rec1': 0.85, 'auroc': 0.9566666666666666, 'auprc': 0.9401882450356878, 'minpse': 0.85}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8727273, 'prec1': 0.64705884, 'rec0': 0.8888889, 'rec1': 0.6111111, 'auroc': 0.8549382716049382, 'auprc': 0.7826496281763733, 'minpse': 0.6666666666666666}
epoch 5
16.155339866876602
validation set
{'acc': 0.8769231, 'prec0': 0.9111111, 'prec1': 0.8, 'rec0': 0.9111111, 'rec1': 0.8, 'auroc': 0.8977777777777778, 'auprc': 0.8486464705726376, 'minpse': 0.8}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.9074074, 'prec1': 0.7222222, 'rec0': 0.9074074, 'rec1': 0.7222222, 'auroc': 0.9218106995884775, 'auprc': 0.835966401673826, 'minpse': 0.75}
epoch 6
16.401748418807983
validation set
{'acc': 0.93846154, 'prec0': 0.95555556, 'prec1': 0.9, 'rec0': 0.95555556, 'rec1': 0.9, 'auroc': 0.9522222222222222, 'auprc': 0.9314215022960209, 'minpse': 0.9}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.8863636, 'prec1': 0.4642857, 'rec0': 0.7222222, 'rec1': 0.7222222, 'auroc': 0.8683127572016461, 'auprc': 0.7653489028012852, 'minpse': 0.6666666666666666}
epoch 7
16.02383728325367
validation set
{'acc': 0.93846154, 'prec0': 0.95555556, 'prec1': 0.9, 'rec0': 0.95555556, 'rec1': 0.9, 'auroc': 0.9522222222222222, 'auprc': 0.9300717267338784, 'minpse': 0.9}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9, 'prec1': 0.59090906, 'rec0': 0.8333333, 'rec1': 0.7222222, 'auroc': 0.8899176954732511, 'auprc': 0.8073594509094382, 'minpse': 0.6666666666666666}
epoch 8
15.995415985584259
validation set
{'acc': 0.93846154, 'prec0': 0.9183673, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.8, 'auroc': 0.9477777777777778, 'auprc': 0.9278420134369267, 'minpse': 0.85}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.8833333, 'prec1': 0.9166667, 'rec0': 0.9814815, 'rec1': 0.6111111, 'auroc': 0.8878600823045267, 'auprc': 0.8347632193975545, 'minpse': 0.7777777777777778}
epoch 9
16.835216283798218
validation set
{'acc': 0.93846154, 'prec0': 0.9361702, 'prec1': 0.9444444, 'rec0': 0.9777778, 'rec1': 0.85, 'auroc': 0.9555555555555555, 'auprc': 0.9379040786773085, 'minpse': 0.85}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.8947368, 'prec1': 0.8, 'rec0': 0.9444444, 'rec1': 0.6666667, 'auroc': 0.8631687242798354, 'auprc': 0.792397970516656, 'minpse': 0.7222222222222222}
epoch 10
16.333942741155624
validation set
{'acc': 0.93846154, 'prec0': 0.95555556, 'prec1': 0.9, 'rec0': 0.95555556, 'rec1': 0.9, 'auroc': 0.9644444444444444, 'auprc': 0.9470343883637562, 'minpse': 0.9}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.93877554, 'prec1': 0.65217394, 'rec0': 0.8518519, 'rec1': 0.8333333, 'auroc': 0.9300411522633745, 'auprc': 0.8585742213860671, 'minpse': 0.6842105263157895}
epoch 11
16.869642913341522
validation set
{'acc': 0.93846154, 'prec0': 0.9361702, 'prec1': 0.9444444, 'rec0': 0.9777778, 'rec1': 0.85, 'auroc': 0.9588888888888889, 'auprc': 0.9432538602323209, 'minpse': 0.85}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.8947368, 'prec1': 0.8, 'rec0': 0.9444444, 'rec1': 0.6666667, 'auroc': 0.9012345679012346, 'auprc': 0.8205772428782645, 'minpse': 0.7222222222222222}
epoch 12
15.339913457632065
validation set
{'acc': 0.93846154, 'prec0': 0.9183673, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.8, 'auroc': 0.9422222222222223, 'auprc': 0.9240381429652932, 'minpse': 0.8095238095238095}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.8965517, 'prec1': 0.85714287, 'rec0': 0.962963, 'rec1': 0.6666667, 'auroc': 0.9259259259259259, 'auprc': 0.8532011187421292, 'minpse': 0.7222222222222222}
epoch 13
16.42237001657486
validation set
{'acc': 0.8153846, 'prec0': 0.9459459, 'prec1': 0.64285713, 'rec0': 0.7777778, 'rec1': 0.9, 'auroc': 0.8555555555555555, 'auprc': 0.7375637049325251, 'minpse': 0.7}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.925, 'prec1': 0.46875, 'rec0': 0.6851852, 'rec1': 0.8333333, 'auroc': 0.8960905349794239, 'auprc': 0.8159155441320162, 'minpse': 0.8333333333333334}
epoch 14
15.678622722625732
validation set
{'acc': 0.93846154, 'prec0': 0.9183673, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.8, 'auroc': 0.9266666666666666, 'auprc': 0.9050722937132674, 'minpse': 0.8}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.9259259, 'prec1': 0.7777778, 'rec0': 0.9259259, 'rec1': 0.7777778, 'auroc': 0.926954732510288, 'auprc': 0.8587020706140502, 'minpse': 0.7777777777777778}
epoch 15
15.494160026311874
validation set
{'acc': 0.86153847, 'prec0': 0.8913044, 'prec1': 0.7894737, 'rec0': 0.9111111, 'rec1': 0.75, 'auroc': 0.8811111111111112, 'auprc': 0.8423553374773498, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.9259259, 'prec1': 0.7777778, 'rec0': 0.9259259, 'rec1': 0.7777778, 'auroc': 0.8960905349794239, 'auprc': 0.8385289934151146, 'minpse': 0.7777777777777778}
epoch 16
16.457318663597107
validation set
{'acc': 0.8769231, 'prec0': 0.9111111, 'prec1': 0.8, 'rec0': 0.9111111, 'rec1': 0.8, 'auroc': 0.9099999999999999, 'auprc': 0.8783863435042832, 'minpse': 0.8}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.9245283, 'prec1': 0.7368421, 'rec0': 0.9074074, 'rec1': 0.7777778, 'auroc': 0.9146090534979423, 'auprc': 0.8283907382338223, 'minpse': 0.7777777777777778}
epoch 17
16.04024675488472
validation set
{'acc': 0.95384616, 'prec0': 0.95652175, 'prec1': 0.94736844, 'rec0': 0.9777778, 'rec1': 0.9, 'auroc': 0.9666666666666668, 'auprc': 0.9499816394441194, 'minpse': 0.9}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.9056604, 'prec1': 0.68421054, 'rec0': 0.8888889, 'rec1': 0.7222222, 'auroc': 0.918724279835391, 'auprc': 0.8597766626857624, 'minpse': 0.7}
epoch 18
16.7742560505867
validation set
{'acc': 0.86153847, 'prec0': 0.90909094, 'prec1': 0.7619048, 'rec0': 0.8888889, 'rec1': 0.8, 'auroc': 0.92, 'auprc': 0.8780298846350354, 'minpse': 0.7619047619047619}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.9245283, 'prec1': 0.7368421, 'rec0': 0.9074074, 'rec1': 0.7777778, 'auroc': 0.8827160493827161, 'auprc': 0.7928577204306049, 'minpse': 0.7368421052631579}
epoch 19
15.092734009027481
validation set
{'acc': 0.95384616, 'prec0': 0.9375, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.85, 'auroc': 0.9655555555555555, 'auprc': 0.9470384664355254, 'minpse': 0.85}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.88135594, 'prec1': 0.84615386, 'rec0': 0.962963, 'rec1': 0.6111111, 'auroc': 0.8940329218106997, 'auprc': 0.8294714162404847, 'minpse': 0.7777777777777778}
epoch 20
16.347207009792328
validation set
{'acc': 0.95384616, 'prec0': 0.9375, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.85, 'auroc': 0.9555555555555556, 'auprc': 0.9378800063023853, 'minpse': 0.85}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.9259259, 'prec1': 0.7777778, 'rec0': 0.9259259, 'rec1': 0.7777778, 'auroc': 0.9310699588477366, 'auprc': 0.8755657854309815, 'minpse': 0.7777777777777778}
epoch 21
15.08827942609787
validation set
{'acc': 0.84615386, 'prec0': 0.90697676, 'prec1': 0.72727275, 'rec0': 0.8666667, 'rec1': 0.8, 'auroc': 0.8766666666666667, 'auprc': 0.8223532696319975, 'minpse': 0.7272727272727273}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.9361702, 'prec1': 0.6, 'rec0': 0.8148148, 'rec1': 0.8333333, 'auroc': 0.9032921810699588, 'auprc': 0.8129748596721074, 'minpse': 0.7777777777777778}
epoch 22
16.93181774020195
validation set
{'acc': 0.95384616, 'prec0': 0.9375, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.85, 'auroc': 0.961111111111111, 'auprc': 0.9440484573621408, 'minpse': 0.85}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.8833333, 'prec1': 0.9166667, 'rec0': 0.9814815, 'rec1': 0.6111111, 'auroc': 0.9125514403292181, 'auprc': 0.8569652500316606, 'minpse': 0.7777777777777778}
epoch 23
16.912679731845856
validation set
{'acc': 0.75384617, 'prec0': 0.93939394, 'prec1': 0.5625, 'rec0': 0.6888889, 'rec1': 0.9, 'auroc': 0.8511111111111112, 'auprc': 0.7127934605118995, 'minpse': 0.7}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.972973, 'prec1': 0.4857143, 'rec0': 0.6666667, 'rec1': 0.9444444, 'auroc': 0.9084362139917695, 'auprc': 0.7952919734622951, 'minpse': 0.7142857142857143}
epoch 24
15.916605085134506
validation set
{'acc': 0.93846154, 'prec0': 0.95555556, 'prec1': 0.9, 'rec0': 0.95555556, 'rec1': 0.9, 'auroc': 0.9444444444444444, 'auprc': 0.9275155359910815, 'minpse': 0.9}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.90697676, 'prec1': 0.4827586, 'rec0': 0.7222222, 'rec1': 0.7777778, 'auroc': 0.8621399176954733, 'auprc': 0.7891020702394483, 'minpse': 0.6666666666666666}
epoch 25
15.262177050113678
validation set
{'acc': 0.7692308, 'prec0': 0.9166667, 'prec1': 0.5862069, 'rec0': 0.73333335, 'rec1': 0.85, 'auroc': 0.8555555555555555, 'auprc': 0.7580258622941302, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.9756098, 'prec1': 0.5483871, 'rec0': 0.7407407, 'rec1': 0.9444444, 'auroc': 0.9125514403292181, 'auprc': 0.7595553492426688, 'minpse': 0.7777777777777778}
epoch 26
15.163159608840942
validation set
{'acc': 0.93846154, 'prec0': 0.9183673, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.8, 'auroc': 0.9566666666666667, 'auprc': 0.934474148965982, 'minpse': 0.85}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.8666667, 'prec1': 0.8333333, 'rec0': 0.962963, 'rec1': 0.5555556, 'auroc': 0.8796296296296297, 'auprc': 0.8084979174029393, 'minpse': 0.7777777777777778}
epoch 27
15.681300044059753
validation set
{'acc': 0.93846154, 'prec0': 0.9361702, 'prec1': 0.9444444, 'rec0': 0.9777778, 'rec1': 0.85, 'auroc': 0.9444444444444444, 'auprc': 0.9289352884585182, 'minpse': 0.85}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.86440676, 'prec1': 0.7692308, 'rec0': 0.9444444, 'rec1': 0.5555556, 'auroc': 0.868312757201646, 'auprc': 0.762938675386588, 'minpse': 0.7222222222222222}
epoch 28
16.18069225549698
validation set
{'acc': 0.84615386, 'prec0': 0.90697676, 'prec1': 0.72727275, 'rec0': 0.8666667, 'rec1': 0.8, 'auroc': 0.9088888888888889, 'auprc': 0.8659290737436001, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.9583333, 'prec1': 0.6666667, 'rec0': 0.8518519, 'rec1': 0.8888889, 'auroc': 0.9310699588477367, 'auprc': 0.8758261929363409, 'minpse': 0.7777777777777778}
epoch 29
15.097308099269867
validation set
{'acc': 0.93846154, 'prec0': 0.9361702, 'prec1': 0.9444444, 'rec0': 0.9777778, 'rec1': 0.85, 'auroc': 0.95, 'auprc': 0.9341113909956786, 'minpse': 0.85}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.8703704, 'prec1': 0.6111111, 'rec0': 0.8703704, 'rec1': 0.6111111, 'auroc': 0.8549382716049383, 'auprc': 0.7652480843578306, 'minpse': 0.6111111111111112}
Reset trainable parameters of layer = Conv2d(1, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Linear(in_features=512, out_features=1000, bias=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Conv2d(64, 384, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=7200, bias=True)
Reset trainable parameters of layer = Linear(in_features=1000, out_features=6272, bias=True)
Reset trainable parameters of layer = Linear(in_features=300, out_features=50, bias=True)
Reset trainable parameters of layer = Linear(in_features=50, out_features=300, bias=True)
Reset trainable parameters of layer = Conv1d(300, 300, kernel_size=(24,), stride=(1,))
Reset trainable parameters of layer = Linear(in_features=300, out_features=1, bias=True)
Reset trainable parameters of layer = Linear(in_features=24, out_features=1, bias=True)
for distribution val
type 0= 42 type 1= 23
for distribution test
type 0= 54 type 1= 18
epoch 0
17.16455429792404
validation set
{'acc': 0.9692308, 'prec0': 0.97619045, 'prec1': 0.95652175, 'rec0': 0.97619045, 'rec1': 0.95652175, 'auroc': 0.9865424430641823, 'auprc': 0.9817637142500926, 'minpse': 0.9565217391304348}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9347826, 'prec1': 0.5769231, 'rec0': 0.7962963, 'rec1': 0.8333333, 'auroc': 0.8775720164609053, 'auprc': 0.821719870262202, 'minpse': 0.7222222222222222}
epoch 1
16.136528849601746
validation set
{'acc': 0.9846154, 'prec0': 0.9767442, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.95652175, 'auroc': 0.9886128364389235, 'auprc': 0.9857203751065643, 'minpse': 0.9565217391304348}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.90909094, 'prec1': 0.7647059, 'rec0': 0.9259259, 'rec1': 0.7222222, 'auroc': 0.8960905349794239, 'auprc': 0.8196631150704712, 'minpse': 0.7777777777777778}
epoch 2
16.10908567905426
validation set
{'acc': 0.9692308, 'prec0': 0.97619045, 'prec1': 0.95652175, 'rec0': 0.97619045, 'rec1': 0.95652175, 'auroc': 0.9824016563146999, 'auprc': 0.9772414627329562, 'minpse': 0.9565217391304348}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.95652175, 'prec1': 0.61538464, 'rec0': 0.8148148, 'rec1': 0.8888889, 'auroc': 0.9300411522633745, 'auprc': 0.8731879255619241, 'minpse': 0.7777777777777778}
epoch 3
16.011869728565216
validation set
{'acc': 0.95384616, 'prec0': 0.95348835, 'prec1': 0.95454544, 'rec0': 0.97619045, 'rec1': 0.9130435, 'auroc': 0.9772256728778468, 'auprc': 0.9682093078546168, 'minpse': 0.9130434782608695}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.9230769, 'prec1': 0.7, 'rec0': 0.8888889, 'rec1': 0.7777778, 'auroc': 0.917695473251029, 'auprc': 0.8515001003751785, 'minpse': 0.7222222222222222}
epoch 4
17.169141054153442
validation set
{'acc': 0.9846154, 'prec0': 0.9767442, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.95652175, 'auroc': 0.9906832298136645, 'auprc': 0.9875745091164094, 'minpse': 0.9565217391304348}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.9245283, 'prec1': 0.7368421, 'rec0': 0.9074074, 'rec1': 0.7777778, 'auroc': 0.8981481481481481, 'auprc': 0.8488663181730746, 'minpse': 0.7777777777777778}
epoch 5
16.11367231607437
validation set
{'acc': 0.9076923, 'prec0': 0.9736842, 'prec1': 0.8148148, 'rec0': 0.88095236, 'rec1': 0.95652175, 'auroc': 0.9513457556935817, 'auprc': 0.933077981066448, 'minpse': 0.84}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.925, 'prec1': 0.46875, 'rec0': 0.6851852, 'rec1': 0.8333333, 'auroc': 0.8611111111111112, 'auprc': 0.7885397360967525, 'minpse': 0.6666666666666666}
epoch 6
16.577185034751892
validation set
{'acc': 0.9692308, 'prec0': 0.95454544, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.9130435, 'auroc': 0.9917184265010353, 'auprc': 0.987141910411254, 'minpse': 0.9166666666666666}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.90909094, 'prec1': 0.7647059, 'rec0': 0.9259259, 'rec1': 0.7222222, 'auroc': 0.9434156378600823, 'auprc': 0.8884402575570363, 'minpse': 0.7222222222222222}
epoch 7
15.338111758232117
validation set
{'acc': 0.9230769, 'prec0': 0.974359, 'prec1': 0.84615386, 'rec0': 0.9047619, 'rec1': 0.95652175, 'auroc': 0.9761904761904763, 'auprc': 0.9665913297763362, 'minpse': 0.875}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.9302326, 'prec1': 0.51724136, 'rec0': 0.7407407, 'rec1': 0.8333333, 'auroc': 0.8796296296296297, 'auprc': 0.7989033466224356, 'minpse': 0.6666666666666666}
epoch 8
16.244723439216614
validation set
{'acc': 0.95384616, 'prec0': 0.93333334, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.8695652, 'auroc': 0.9761904761904762, 'auprc': 0.9686814115647067, 'minpse': 0.8695652173913043}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.91071427, 'prec1': 0.8125, 'rec0': 0.9444444, 'rec1': 0.7222222, 'auroc': 0.9393004115226338, 'auprc': 0.8961680514634649, 'minpse': 0.7777777777777778}
epoch 9
17.812444180250168
validation set
{'acc': 0.9846154, 'prec0': 0.9767442, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.95652175, 'auroc': 0.994824016563147, 'auprc': 0.9920922475270301, 'minpse': 0.9565217391304348}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.90909094, 'prec1': 0.7647059, 'rec0': 0.9259259, 'rec1': 0.7222222, 'auroc': 0.8909465020576132, 'auprc': 0.8208318603674849, 'minpse': 0.7222222222222222}
epoch 10
16.57573166489601
validation set
{'acc': 0.9692308, 'prec0': 0.95454544, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.9130435, 'auroc': 0.989648033126294, 'auprc': 0.9840211213074781, 'minpse': 0.9130434782608695}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.9259259, 'prec1': 0.7777778, 'rec0': 0.9259259, 'rec1': 0.7777778, 'auroc': 0.897119341563786, 'auprc': 0.8329373607339694, 'minpse': 0.7777777777777778}
epoch 11
17.413207948207855
validation set
{'acc': 0.9692308, 'prec0': 0.97619045, 'prec1': 0.95652175, 'rec0': 0.97619045, 'rec1': 0.95652175, 'auroc': 0.9855072463768115, 'auprc': 0.9821419024160044, 'minpse': 0.9565217391304348}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9166667, 'prec1': 0.5833333, 'rec0': 0.8148148, 'rec1': 0.7777778, 'auroc': 0.8909465020576132, 'auprc': 0.8183649701182094, 'minpse': 0.6666666666666666}
epoch 12
14.497907817363739
validation set
{'acc': 0.9692308, 'prec0': 0.97619045, 'prec1': 0.95652175, 'rec0': 0.97619045, 'rec1': 0.95652175, 'auroc': 0.9927536231884059, 'auprc': 0.9889105419057834, 'minpse': 0.9565217391304348}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.9411765, 'prec1': 0.71428573, 'rec0': 0.8888889, 'rec1': 0.8333333, 'auroc': 0.9084362139917694, 'auprc': 0.864664862321992, 'minpse': 0.7894736842105263}
epoch 13
16.474103689193726
validation set
{'acc': 0.9692308, 'prec0': 0.95454544, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.9130435, 'auroc': 0.9886128364389235, 'auprc': 0.9826374968803754, 'minpse': 0.9130434782608695}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.91071427, 'prec1': 0.8125, 'rec0': 0.9444444, 'rec1': 0.7222222, 'auroc': 0.8631687242798354, 'auprc': 0.8063625502370109, 'minpse': 0.7777777777777778}
epoch 14
15.874449491500854
validation set
{'acc': 0.9692308, 'prec0': 0.95454544, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.9130435, 'auroc': 0.9782608695652174, 'auprc': 0.9726381178779979, 'minpse': 0.9130434782608695}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.9259259, 'prec1': 0.7777778, 'rec0': 0.9259259, 'rec1': 0.7777778, 'auroc': 0.8837448559670782, 'auprc': 0.7989680814246396, 'minpse': 0.7777777777777778}
epoch 15
15.383176743984222
validation set
{'acc': 0.93846154, 'prec0': 0.9318182, 'prec1': 0.95238096, 'rec0': 0.97619045, 'rec1': 0.8695652, 'auroc': 0.963768115942029, 'auprc': 0.9556616440764483, 'minpse': 0.8695652173913043}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.9230769, 'prec1': 0.7, 'rec0': 0.8888889, 'rec1': 0.7777778, 'auroc': 0.9053497942386832, 'auprc': 0.8157728744379353, 'minpse': 0.7777777777777778}
epoch 16
17.223391950130463
validation set
{'acc': 0.9692308, 'prec0': 0.97619045, 'prec1': 0.95652175, 'rec0': 0.97619045, 'rec1': 0.95652175, 'auroc': 0.9855072463768115, 'auprc': 0.9809172887233601, 'minpse': 0.9565217391304348}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9, 'prec1': 0.59090906, 'rec0': 0.8333333, 'rec1': 0.7222222, 'auroc': 0.8662551440329218, 'auprc': 0.7779127922372688, 'minpse': 0.6666666666666666}
epoch 17
15.256987065076828
validation set
{'acc': 0.93846154, 'prec0': 0.975, 'prec1': 0.88, 'rec0': 0.9285714, 'rec1': 0.95652175, 'auroc': 0.979296066252588, 'auprc': 0.9705292190922974, 'minpse': 0.9130434782608695}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.95652175, 'prec1': 0.61538464, 'rec0': 0.8148148, 'rec1': 0.8888889, 'auroc': 0.9300411522633745, 'auprc': 0.88313980430877, 'minpse': 0.7777777777777778}
epoch 18
16.62955665588379
validation set
{'acc': 0.95384616, 'prec0': 0.95348835, 'prec1': 0.95454544, 'rec0': 0.97619045, 'rec1': 0.9130435, 'auroc': 0.9761904761904763, 'auprc': 0.9727419743565024, 'minpse': 0.9130434782608695}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9, 'prec1': 0.59090906, 'rec0': 0.8333333, 'rec1': 0.7222222, 'auroc': 0.8837448559670782, 'auprc': 0.8032066122857879, 'minpse': 0.7222222222222222}
epoch 19
15.787246346473694
validation set
{'acc': 0.93846154, 'prec0': 0.975, 'prec1': 0.88, 'rec0': 0.9285714, 'rec1': 0.95652175, 'auroc': 0.9720496894409938, 'auprc': 0.9635165665663663, 'minpse': 0.88}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.9285714, 'prec1': 0.5, 'rec0': 0.7222222, 'rec1': 0.8333333, 'auroc': 0.8559670781893004, 'auprc': 0.7730695960033751, 'minpse': 0.6111111111111112}
epoch 20
16.728147447109222
validation set
{'acc': 0.9692308, 'prec0': 0.97619045, 'prec1': 0.95652175, 'rec0': 0.97619045, 'rec1': 0.95652175, 'auroc': 0.9886128364389233, 'auprc': 0.9846855845792518, 'minpse': 0.9565217391304348}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.9245283, 'prec1': 0.7368421, 'rec0': 0.9074074, 'rec1': 0.7777778, 'auroc': 0.8775720164609053, 'auprc': 0.8081656833480819, 'minpse': 0.7777777777777778}
epoch 21
15.631996154785156
validation set
{'acc': 0.9692308, 'prec0': 0.97619045, 'prec1': 0.95652175, 'rec0': 0.97619045, 'rec1': 0.95652175, 'auroc': 0.9865424430641822, 'auprc': 0.9829406277032208, 'minpse': 0.9565217391304348}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.9375, 'prec1': 0.625, 'rec0': 0.8333333, 'rec1': 0.8333333, 'auroc': 0.8837448559670782, 'auprc': 0.8346727619322751, 'minpse': 0.6818181818181818}
epoch 22
15.134045422077179
validation set
{'acc': 0.95384616, 'prec0': 0.9756098, 'prec1': 0.9166667, 'rec0': 0.95238096, 'rec1': 0.95652175, 'auroc': 0.984472049689441, 'auprc': 0.9781517779822015, 'minpse': 0.9166666666666666}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.95454544, 'prec1': 0.5714286, 'rec0': 0.7777778, 'rec1': 0.8888889, 'auroc': 0.9125514403292181, 'auprc': 0.8446104629468156, 'minpse': 0.7222222222222222}
epoch 23
17.253761410713196
validation set
{'acc': 0.95384616, 'prec0': 0.93333334, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.8695652, 'auroc': 0.9772256728778468, 'auprc': 0.9699643300777515, 'minpse': 0.9130434782608695}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.9245283, 'prec1': 0.7368421, 'rec0': 0.9074074, 'rec1': 0.7777778, 'auroc': 0.9382716049382716, 'auprc': 0.865779125125731, 'minpse': 0.75}
epoch 24
15.408064991235733
validation set
{'acc': 0.9692308, 'prec0': 0.95454544, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.9130435, 'auroc': 0.9824016563146998, 'auprc': 0.9789036499438448, 'minpse': 0.9166666666666666}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.8947368, 'prec1': 0.8, 'rec0': 0.9444444, 'rec1': 0.6666667, 'auroc': 0.9351851851851851, 'auprc': 0.86651187326345, 'minpse': 0.7368421052631579}
epoch 25
15.445789963006973
validation set
{'acc': 0.95384616, 'prec0': 0.95348835, 'prec1': 0.95454544, 'rec0': 0.97619045, 'rec1': 0.9130435, 'auroc': 0.974120082815735, 'auprc': 0.9706907282134785, 'minpse': 0.9130434782608695}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.9019608, 'prec1': 0.61904764, 'rec0': 0.8518519, 'rec1': 0.7222222, 'auroc': 0.8960905349794239, 'auprc': 0.8211774385024213, 'minpse': 0.6666666666666666}
epoch 26
16.665450423955917
validation set
{'acc': 0.93846154, 'prec0': 0.9130435, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.82608694, 'auroc': 0.9658385093167702, 'auprc': 0.956304173818892, 'minpse': 0.8695652173913043}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.8947368, 'prec1': 0.8, 'rec0': 0.9444444, 'rec1': 0.6666667, 'auroc': 0.890946502057613, 'auprc': 0.7301676738747818, 'minpse': 0.7222222222222222}
epoch 27
15.714732468128204
validation set
{'acc': 0.9846154, 'prec0': 0.9767442, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.95652175, 'auroc': 0.9906832298136645, 'auprc': 0.9875745091164094, 'minpse': 0.9565217391304348}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.9056604, 'prec1': 0.68421054, 'rec0': 0.8888889, 'rec1': 0.7222222, 'auroc': 0.9362139917695473, 'auprc': 0.8708056270527883, 'minpse': 0.7142857142857143}
epoch 28
15.657820671796799
validation set
{'acc': 0.95384616, 'prec0': 0.95348835, 'prec1': 0.95454544, 'rec0': 0.97619045, 'rec1': 0.9130435, 'auroc': 0.9803312629399585, 'auprc': 0.9738455184107357, 'minpse': 0.9130434782608695}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.92156863, 'prec1': 0.6666667, 'rec0': 0.8703704, 'rec1': 0.7777778, 'auroc': 0.9012345679012345, 'auprc': 0.8028351708957546, 'minpse': 0.7368421052631579}
epoch 29
17.00667443871498
validation set
{'acc': 0.95384616, 'prec0': 0.9756098, 'prec1': 0.9166667, 'rec0': 0.95238096, 'rec1': 0.95652175, 'auroc': 0.9813664596273292, 'auprc': 0.9768803109639842, 'minpse': 0.9166666666666666}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.9285714, 'prec1': 0.5, 'rec0': 0.7222222, 'rec1': 0.8333333, 'auroc': 0.8786008230452675, 'auprc': 0.7953670448083212, 'minpse': 0.7222222222222222}
Reset trainable parameters of layer = Conv2d(1, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Linear(in_features=512, out_features=1000, bias=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Conv2d(64, 384, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=7200, bias=True)
Reset trainable parameters of layer = Linear(in_features=1000, out_features=6272, bias=True)
Reset trainable parameters of layer = Linear(in_features=300, out_features=50, bias=True)
Reset trainable parameters of layer = Linear(in_features=50, out_features=300, bias=True)
Reset trainable parameters of layer = Conv1d(300, 300, kernel_size=(24,), stride=(1,))
Reset trainable parameters of layer = Linear(in_features=300, out_features=1, bias=True)
Reset trainable parameters of layer = Linear(in_features=24, out_features=1, bias=True)
for distribution val
type 0= 49 type 1= 16
for distribution test
type 0= 54 type 1= 18
epoch 0
17.88549280166626
validation set
{'acc': 0.9230769, 'prec0': 0.9782609, 'prec1': 0.7894737, 'rec0': 0.9183673, 'rec1': 0.9375, 'auroc': 0.9770408163265306, 'auprc': 0.9435028249238292, 'minpse': 0.8235294117647058}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.90384614, 'prec1': 0.65, 'rec0': 0.8703704, 'rec1': 0.7222222, 'auroc': 0.8786008230452675, 'auprc': 0.7956080278927304, 'minpse': 0.6666666666666666}
epoch 1
17.033765375614166
validation set
{'acc': 0.9846154, 'prec0': 0.98, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.9375, 'auroc': 0.9923469387755102, 'auprc': 0.9825487012987013, 'minpse': 0.9375}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.877193, 'prec1': 0.73333335, 'rec0': 0.9259259, 'rec1': 0.6111111, 'auroc': 0.8981481481481481, 'auprc': 0.8195152619010269, 'minpse': 0.6842105263157895}
epoch 2
15.60160231590271
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.9027778, 'prec0': 0.9122807, 'prec1': 0.8666667, 'rec0': 0.962963, 'rec1': 0.7222222, 'auroc': 0.9084362139917695, 'auprc': 0.8422047713828869, 'minpse': 0.7777777777777778}
epoch 3
17.021614134311676
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.91071427, 'prec1': 0.8125, 'rec0': 0.9444444, 'rec1': 0.7222222, 'auroc': 0.904320987654321, 'auprc': 0.8504050374494319, 'minpse': 0.7777777777777778}
epoch 4
15.41042098402977
validation set
{'acc': 0.9846154, 'prec0': 0.98, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.9375, 'auroc': 0.9923469387755102, 'auprc': 0.9825487012987013, 'minpse': 0.9375}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.87931037, 'prec1': 0.78571427, 'rec0': 0.9444444, 'rec1': 0.6111111, 'auroc': 0.8786008230452674, 'auprc': 0.8008324448650523, 'minpse': 0.6666666666666666}
epoch 5
16.65068769454956
validation set
{'acc': 0.9230769, 'prec0': 1.0, 'prec1': 0.7619048, 'rec0': 0.8979592, 'rec1': 1.0, 'auroc': 0.9872448979591837, 'auprc': 0.9687108395989975, 'minpse': 0.875}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.8695652, 'prec1': 0.46153846, 'rec0': 0.7407407, 'rec1': 0.6666667, 'auroc': 0.8395061728395062, 'auprc': 0.7270152919942792, 'minpse': 0.6111111111111112}
epoch 6
16.810754001140594
validation set
{'acc': 0.9692308, 'prec0': 1.0, 'prec1': 0.8888889, 'rec0': 0.9591837, 'rec1': 1.0, 'auroc': 0.9961734693877551, 'auprc': 0.9888148488562092, 'minpse': 0.9375}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.9074074, 'prec1': 0.7222222, 'rec0': 0.9074074, 'rec1': 0.7222222, 'auroc': 0.9104938271604939, 'auprc': 0.7514901949513857, 'minpse': 0.7368421052631579}
epoch 7
16.359416604042053
validation set
{'acc': 0.9846154, 'prec0': 1.0, 'prec1': 0.9411765, 'rec0': 0.97959185, 'rec1': 1.0, 'auroc': 0.9974489795918368, 'auprc': 0.992172181372549, 'minpse': 0.9411764705882353}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.86206895, 'prec1': 0.71428573, 'rec0': 0.9259259, 'rec1': 0.5555556, 'auroc': 0.9084362139917694, 'auprc': 0.7930210263640346, 'minpse': 0.6666666666666666}
epoch 8
17.48762947320938
validation set
{'acc': 0.9846154, 'prec0': 1.0, 'prec1': 0.9411765, 'rec0': 0.97959185, 'rec1': 1.0, 'auroc': 0.9987244897959183, 'auprc': 0.9962086397058824, 'minpse': 0.9411764705882353}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.91071427, 'prec1': 0.8125, 'rec0': 0.9444444, 'rec1': 0.7222222, 'auroc': 0.9279835390946503, 'auprc': 0.8518767222056696, 'minpse': 0.75}
epoch 9
15.969626247882843
validation set
{'acc': 0.9846154, 'prec0': 1.0, 'prec1': 0.9411765, 'rec0': 0.97959185, 'rec1': 1.0, 'auroc': 0.9987244897959183, 'auprc': 0.9962086397058824, 'minpse': 0.9411764705882353}
Mortality Prediction on the test set
{'acc': 0.9027778, 'prec0': 0.9122807, 'prec1': 0.8666667, 'rec0': 0.962963, 'rec1': 0.7222222, 'auroc': 0.9012345679012346, 'auprc': 0.8587260301651952, 'minpse': 0.7222222222222222}
epoch 10
17.616799473762512
validation set
{'acc': 0.9692308, 'prec0': 1.0, 'prec1': 0.8888889, 'rec0': 0.9591837, 'rec1': 1.0, 'auroc': 0.9897959183673469, 'auprc': 0.9658640328217535, 'minpse': 0.8888888888888888}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.8909091, 'prec1': 0.7058824, 'rec0': 0.9074074, 'rec1': 0.6666667, 'auroc': 0.8693415637860082, 'auprc': 0.7580873464858204, 'minpse': 0.6666666666666666}
epoch 11
15.33289286494255
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.8666667, 'prec1': 0.8333333, 'rec0': 0.962963, 'rec1': 0.5555556, 'auroc': 0.8858024691358024, 'auprc': 0.818447309422476, 'minpse': 0.7777777777777778}
epoch 12
17.81423568725586
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.87096775, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.5555556, 'auroc': 0.9156378600823045, 'auprc': 0.8792374243506834, 'minpse': 0.7894736842105263}
epoch 13
16.13046082854271
validation set
{'acc': 0.9846154, 'prec0': 1.0, 'prec1': 0.9411765, 'rec0': 0.97959185, 'rec1': 1.0, 'auroc': 0.9974489795918368, 'auprc': 0.992172181372549, 'minpse': 0.9411764705882353}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.89285713, 'prec1': 0.75, 'rec0': 0.9259259, 'rec1': 0.6666667, 'auroc': 0.8981481481481481, 'auprc': 0.7703606477146302, 'minpse': 0.7777777777777778}
epoch 14
15.807584971189499
validation set
{'acc': 0.9846154, 'prec0': 1.0, 'prec1': 0.9411765, 'rec0': 0.97959185, 'rec1': 1.0, 'auroc': 0.9987244897959183, 'auprc': 0.9962086397058824, 'minpse': 0.9411764705882353}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.9230769, 'prec1': 0.7, 'rec0': 0.8888889, 'rec1': 0.7777778, 'auroc': 0.918724279835391, 'auprc': 0.8760537048912213, 'minpse': 0.7272727272727273}
epoch 15
16.61467957496643
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.87096775, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.5555556, 'auroc': 0.9156378600823045, 'auprc': 0.8534642162559958, 'minpse': 0.7368421052631579}
epoch 16
15.512130588293076
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.9305556, 'prec0': 0.91525424, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.7222222, 'auroc': 0.897119341563786, 'auprc': 0.8690821223492056, 'minpse': 0.7894736842105263}
epoch 17
16.317233979701996
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.85, 'prec1': 0.75, 'rec0': 0.9444444, 'rec1': 0.5, 'auroc': 0.8641975308641976, 'auprc': 0.7709223743102193, 'minpse': 0.7222222222222222}
epoch 18
16.398513346910477
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.9027778, 'prec0': 0.8852459, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.6111111, 'auroc': 0.9423868312757201, 'auprc': 0.8992366144680002, 'minpse': 0.7777777777777778}
epoch 19
17.583615630865097
validation set
{'acc': 0.9846154, 'prec0': 1.0, 'prec1': 0.9411765, 'rec0': 0.97959185, 'rec1': 1.0, 'auroc': 0.9987244897959183, 'auprc': 0.9962086397058824, 'minpse': 0.9411764705882353}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.87931037, 'prec1': 0.78571427, 'rec0': 0.9444444, 'rec1': 0.6111111, 'auroc': 0.8456790123456791, 'auprc': 0.7388076416662287, 'minpse': 0.6666666666666666}
epoch 20
16.79613620042801
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.85, 'prec1': 0.75, 'rec0': 0.9444444, 'rec1': 0.5, 'auroc': 0.8508230452674896, 'auprc': 0.7800033829372661, 'minpse': 0.7222222222222222}
epoch 21
16.19269350171089
validation set
{'acc': 0.95384616, 'prec0': 1.0, 'prec1': 0.84210527, 'rec0': 0.93877554, 'rec1': 1.0, 'auroc': 0.9936224489795918, 'auprc': 0.9815055216165414, 'minpse': 0.9375}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.9423077, 'prec1': 0.75, 'rec0': 0.9074074, 'rec1': 0.8333333, 'auroc': 0.9248971193415638, 'auprc': 0.8279875889170265, 'minpse': 0.75}
epoch 22
16.946287482976913
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.85714287, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.5, 'auroc': 0.9094650205761318, 'auprc': 0.8578486625652775, 'minpse': 0.7777777777777778}
epoch 23
17.696263819932938
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.87931037, 'prec1': 0.78571427, 'rec0': 0.9444444, 'rec1': 0.6111111, 'auroc': 0.875514403292181, 'auprc': 0.790755402583346, 'minpse': 0.7368421052631579}
epoch 24
16.596730709075928
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.87931037, 'prec1': 0.78571427, 'rec0': 0.9444444, 'rec1': 0.6111111, 'auroc': 0.8405349794238683, 'auprc': 0.7536758419498841, 'minpse': 0.6666666666666666}
epoch 25
16.23875319957733
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.90909094, 'prec1': 0.7647059, 'rec0': 0.9259259, 'rec1': 0.7222222, 'auroc': 0.9084362139917695, 'auprc': 0.8479185815081036, 'minpse': 0.7777777777777778}
epoch 26
16.073845267295837
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.8947368, 'prec1': 0.8, 'rec0': 0.9444444, 'rec1': 0.6666667, 'auroc': 0.8899176954732511, 'auprc': 0.8226671821251674, 'minpse': 0.6842105263157895}
epoch 27
16.204105228185654
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.877193, 'prec1': 0.73333335, 'rec0': 0.9259259, 'rec1': 0.6111111, 'auroc': 0.8837448559670782, 'auprc': 0.7985506917847993, 'minpse': 0.6666666666666666}
epoch 28
17.387223720550537
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.8548387, 'prec1': 0.9, 'rec0': 0.9814815, 'rec1': 0.5, 'auroc': 0.8796296296296297, 'auprc': 0.8040697165417381, 'minpse': 0.7777777777777778}
epoch 29
16.984563916921616
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.87931037, 'prec1': 0.78571427, 'rec0': 0.9444444, 'rec1': 0.6111111, 'auroc': 0.868312757201646, 'auprc': 0.8073169097396442, 'minpse': 0.7777777777777778}
Reset trainable parameters of layer = Conv2d(1, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Linear(in_features=512, out_features=1000, bias=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Conv2d(64, 384, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=7200, bias=True)
Reset trainable parameters of layer = Linear(in_features=1000, out_features=6272, bias=True)
Reset trainable parameters of layer = Linear(in_features=300, out_features=50, bias=True)
Reset trainable parameters of layer = Linear(in_features=50, out_features=300, bias=True)
Reset trainable parameters of layer = Conv1d(300, 300, kernel_size=(24,), stride=(1,))
Reset trainable parameters of layer = Linear(in_features=300, out_features=1, bias=True)
Reset trainable parameters of layer = Linear(in_features=24, out_features=1, bias=True)
for distribution val
type 0= 41 type 1= 23
for distribution test
type 0= 54 type 1= 18
epoch 0
16.349218368530273
validation set
{'acc': 0.96875, 'prec0': 0.9756098, 'prec1': 0.95652175, 'rec0': 0.9756098, 'rec1': 0.95652175, 'auroc': 0.9872746553552492, 'auprc': 0.9763064480738535, 'minpse': 0.9565217391304348}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.9423077, 'prec1': 0.75, 'rec0': 0.9074074, 'rec1': 0.8333333, 'auroc': 0.8991769547325102, 'auprc': 0.8306828268627896, 'minpse': 0.75}
epoch 1
15.416138410568237
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.9423077, 'prec1': 0.75, 'rec0': 0.9074074, 'rec1': 0.8333333, 'auroc': 0.9320987654320988, 'auprc': 0.8821945581860662, 'minpse': 0.7894736842105263}
epoch 2
17.772320926189423
validation set
{'acc': 0.984375, 'prec0': 0.97619045, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.95652175, 'auroc': 0.9978791092258749, 'auprc': 0.9964492753623189, 'minpse': 0.9565217391304348}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.8965517, 'prec1': 0.85714287, 'rec0': 0.962963, 'rec1': 0.6666667, 'auroc': 0.9393004115226338, 'auprc': 0.887716225690413, 'minpse': 0.7619047619047619}
epoch 3
17.416786462068558
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.9019608, 'prec1': 0.61904764, 'rec0': 0.8518519, 'rec1': 0.7222222, 'auroc': 0.8703703703703703, 'auprc': 0.8055777572384963, 'minpse': 0.7222222222222222}
epoch 4
17.717971086502075
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.90909094, 'prec1': 0.7647059, 'rec0': 0.9259259, 'rec1': 0.7222222, 'auroc': 0.9074074074074074, 'auprc': 0.8438578528446077, 'minpse': 0.7777777777777778}
epoch 5
15.504508465528488
validation set
{'acc': 0.9375, 'prec0': 0.974359, 'prec1': 0.88, 'rec0': 0.9268293, 'rec1': 0.95652175, 'auroc': 0.9798515376458112, 'auprc': 0.966597588044148, 'minpse': 0.88}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.91071427, 'prec1': 0.8125, 'rec0': 0.9444444, 'rec1': 0.7222222, 'auroc': 0.9012345679012346, 'auprc': 0.8314161215495455, 'minpse': 0.7222222222222222}
epoch 6
15.726940870285034
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.9027778, 'prec0': 0.9122807, 'prec1': 0.8666667, 'rec0': 0.962963, 'rec1': 0.7222222, 'auroc': 0.9403292181069959, 'auprc': 0.8709308505514534, 'minpse': 0.7894736842105263}
epoch 7
16.469726264476776
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.9245283, 'prec1': 0.7368421, 'rec0': 0.9074074, 'rec1': 0.7777778, 'auroc': 0.911522633744856, 'auprc': 0.8489064081154853, 'minpse': 0.7368421052631579}
epoch 8
16.815716236829758
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.9230769, 'prec1': 0.7, 'rec0': 0.8888889, 'rec1': 0.7777778, 'auroc': 0.9166666666666667, 'auprc': 0.86795082300597, 'minpse': 0.7777777777777778}
epoch 9
16.061735600233078
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.8888889, 'prec1': 0.6666667, 'rec0': 0.8888889, 'rec1': 0.6666667, 'auroc': 0.8940329218106996, 'auprc': 0.8205013912559921, 'minpse': 0.6666666666666666}
epoch 10
16.415031909942627
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.9230769, 'prec1': 0.7, 'rec0': 0.8888889, 'rec1': 0.7777778, 'auroc': 0.8960905349794239, 'auprc': 0.8132511667883935, 'minpse': 0.7777777777777778}
epoch 11
15.748504966497421
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.9245283, 'prec1': 0.7368421, 'rec0': 0.9074074, 'rec1': 0.7777778, 'auroc': 0.9444444444444444, 'auprc': 0.8997599651776974, 'minpse': 0.7777777777777778}
epoch 12
15.770962178707123
validation set
{'acc': 0.984375, 'prec0': 1.0, 'prec1': 0.9583333, 'rec0': 0.9756098, 'rec1': 1.0, 'auroc': 0.9989395546129374, 'auprc': 0.9981490233144297, 'minpse': 0.9583333333333334}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.90384614, 'prec1': 0.65, 'rec0': 0.8703704, 'rec1': 0.7222222, 'auroc': 0.904320987654321, 'auprc': 0.8136564929500752, 'minpse': 0.7222222222222222}
epoch 13
16.667016863822937
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.9027778, 'prec0': 0.92727274, 'prec1': 0.8235294, 'rec0': 0.9444444, 'rec1': 0.7777778, 'auroc': 0.9434156378600822, 'auprc': 0.8778072176910791, 'minpse': 0.7777777777777778}
epoch 14
15.735311925411224
validation set
{'acc': 0.984375, 'prec0': 1.0, 'prec1': 0.9583333, 'rec0': 0.9756098, 'rec1': 1.0, 'auroc': 0.9968186638388122, 'auprc': 0.994192362457958, 'minpse': 0.9583333333333334}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.92156863, 'prec1': 0.6666667, 'rec0': 0.8703704, 'rec1': 0.7777778, 'auroc': 0.9382716049382716, 'auprc': 0.8654995389969814, 'minpse': 0.7777777777777778}
epoch 15
15.746797531843185
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.90909094, 'prec1': 0.7647059, 'rec0': 0.9259259, 'rec1': 0.7222222, 'auroc': 0.8919753086419754, 'auprc': 0.8236762873906777, 'minpse': 0.75}
epoch 16
16.450652986764908
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.9245283, 'prec1': 0.7368421, 'rec0': 0.9074074, 'rec1': 0.7777778, 'auroc': 0.9104938271604938, 'auprc': 0.8343203167769105, 'minpse': 0.7368421052631579}
epoch 17
15.757502108812332
validation set
{'acc': 0.984375, 'prec0': 1.0, 'prec1': 0.9583333, 'rec0': 0.9756098, 'rec1': 1.0, 'auroc': 0.9989395546129374, 'auprc': 0.9981490233144297, 'minpse': 0.9583333333333334}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.9074074, 'prec1': 0.7222222, 'rec0': 0.9074074, 'rec1': 0.7222222, 'auroc': 0.8786008230452674, 'auprc': 0.805169668784985, 'minpse': 0.7222222222222222}
epoch 18
17.128749758005142
validation set
{'acc': 0.984375, 'prec0': 1.0, 'prec1': 0.9583333, 'rec0': 0.9756098, 'rec1': 1.0, 'auroc': 0.9978791092258749, 'auprc': 0.9962157014378186, 'minpse': 0.9583333333333334}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.9361702, 'prec1': 0.6, 'rec0': 0.8148148, 'rec1': 0.8333333, 'auroc': 0.9279835390946503, 'auprc': 0.8694690932613638, 'minpse': 0.7222222222222222}
epoch 19
15.745514780282974
validation set
{'acc': 0.953125, 'prec0': 1.0, 'prec1': 0.88461536, 'rec0': 0.9268293, 'rec1': 1.0, 'auroc': 0.9862142099681867, 'auprc': 0.9753742326610697, 'minpse': 0.8846153846153846}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.90909094, 'prec1': 0.5, 'rec0': 0.7407407, 'rec1': 0.7777778, 'auroc': 0.8888888888888888, 'auprc': 0.7803497278766459, 'minpse': 0.7368421052631579}
epoch 20
16.92993465065956
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.90909094, 'prec1': 0.7647059, 'rec0': 0.9259259, 'rec1': 0.7222222, 'auroc': 0.8960905349794239, 'auprc': 0.8306273950904617, 'minpse': 0.7222222222222222}
epoch 21
15.414969980716705
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.9245283, 'prec1': 0.7368421, 'rec0': 0.9074074, 'rec1': 0.7777778, 'auroc': 0.9248971193415637, 'auprc': 0.8822786017593323, 'minpse': 0.7777777777777778}
epoch 22
17.479187726974487
validation set
{'acc': 0.921875, 'prec0': 0.95, 'prec1': 0.875, 'rec0': 0.9268293, 'rec1': 0.9130435, 'auroc': 0.9597030752916225, 'auprc': 0.9464004723350076, 'minpse': 0.875}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.92, 'prec1': 0.6363636, 'rec0': 0.8518519, 'rec1': 0.7777778, 'auroc': 0.8940329218106997, 'auprc': 0.7448477629401109, 'minpse': 0.7}
epoch 23
16.793737649917603
validation set
{'acc': 0.90625, 'prec0': 1.0, 'prec1': 0.79310346, 'rec0': 0.85365856, 'rec1': 1.0, 'auroc': 0.968186638388123, 'auprc': 0.9463911613239405, 'minpse': 0.8148148148148148}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.9047619, 'prec1': 0.46666667, 'rec0': 0.7037037, 'rec1': 0.7777778, 'auroc': 0.8765432098765433, 'auprc': 0.744390876308785, 'minpse': 0.6666666666666666}
epoch 24
16.192479074001312
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.8965517, 'prec1': 0.85714287, 'rec0': 0.962963, 'rec1': 0.6666667, 'auroc': 0.9207818930041153, 'auprc': 0.8573931777024527, 'minpse': 0.7894736842105263}
epoch 25
16.504207015037537
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9, 'prec1': 0.59090906, 'rec0': 0.8333333, 'rec1': 0.7222222, 'auroc': 0.8569958847736625, 'auprc': 0.7746815469864518, 'minpse': 0.6111111111111112}
epoch 26
16.601848900318146
validation set
{'acc': 0.984375, 'prec0': 1.0, 'prec1': 0.9583333, 'rec0': 0.9756098, 'rec1': 1.0, 'auroc': 0.9862142099681867, 'auprc': 0.9660564328262011, 'minpse': 0.9583333333333334}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.9423077, 'prec1': 0.75, 'rec0': 0.9074074, 'rec1': 0.8333333, 'auroc': 0.9197530864197531, 'auprc': 0.8416782777953403, 'minpse': 0.7894736842105263}
epoch 27
15.470556437969208
validation set
{'acc': 0.984375, 'prec0': 1.0, 'prec1': 0.9583333, 'rec0': 0.9756098, 'rec1': 1.0, 'auroc': 0.9968186638388122, 'auprc': 0.994192362457958, 'minpse': 0.9583333333333334}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.9230769, 'prec1': 0.7, 'rec0': 0.8888889, 'rec1': 0.7777778, 'auroc': 0.9382716049382716, 'auprc': 0.8762728706036464, 'minpse': 0.7777777777777778}
epoch 28
16.09425562620163
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.9245283, 'prec1': 0.7368421, 'rec0': 0.9074074, 'rec1': 0.7777778, 'auroc': 0.9300411522633745, 'auprc': 0.8609836883039499, 'minpse': 0.7777777777777778}
epoch 29
15.205524146556854
validation set
{'acc': 1.0, 'prec0': 1.0, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 1.0, 'auroc': 1.0, 'auprc': 1.0, 'minpse': 1.0}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9, 'prec1': 0.59090906, 'rec0': 0.8333333, 'rec1': 0.7222222, 'auroc': 0.8477366255144032, 'auprc': 0.7687334667685706, 'minpse': 0.65}
Reset trainable parameters of layer = Conv2d(1, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Linear(in_features=512, out_features=1000, bias=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Conv2d(64, 384, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=7200, bias=True)
Reset trainable parameters of layer = Linear(in_features=1000, out_features=6272, bias=True)
Reset trainable parameters of layer = Linear(in_features=300, out_features=50, bias=True)
Reset trainable parameters of layer = Linear(in_features=50, out_features=300, bias=True)
Reset trainable parameters of layer = Conv1d(300, 300, kernel_size=(24,), stride=(1,))
Reset trainable parameters of layer = Linear(in_features=300, out_features=1, bias=True)
Reset trainable parameters of layer = Linear(in_features=24, out_features=1, bias=True)
for mortality prediction
sensitivity
0.8333333134651184
mean is 0.7611111104488373 and variance is 0.00620370346087018
specificity
0.8703703880310059
mean is 0.9166666746139527 and variance is 0.0026234562014357723
accuracy
0.8611111044883728
mean is 0.8777777791023255 and variance is 0.0004552473477376395
AUC of ROC
mean is 0.9415637860082304 and variance is 2.895900015241573e-05
[0.94547325 0.94032922 0.94753086 0.94855967 0.93415638 0.9382716
 0.93106996 0.94341564 0.94238683 0.94444444]
[0.96536797 0.78954082 0.98627002 0.91777778 1.         0.98427673
 0.90888889 0.99171843 1.         1.        ]
