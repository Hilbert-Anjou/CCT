nohup: ignoring input
/diskb/yuhua/StageNet/train_SICH_cammap2.py:10: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
Preparing training data ... 
Constructing model ... 
available device: cuda:0
Start training ... 
for distribution val
type 0= 44 type 1= 21
for distribution test
type 0= 54 type 1= 18
epoch 0
53.63011991977692
validation set
{'acc': 0.83076924, 'prec0': 0.9459459, 'prec1': 0.6785714, 'rec0': 0.79545456, 'rec1': 0.9047619, 'auroc': 0.8993506493506493, 'auprc': 0.8102288648221696, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.95652175, 'prec1': 0.61538464, 'rec0': 0.8148148, 'rec1': 0.8888889, 'auroc': 0.911522633744856, 'auprc': 0.8430426680360152, 'minpse': 0.7777777777777778}
epoch 1
46.470993131399155
validation set
{'acc': 0.7692308, 'prec0': 0.93939394, 'prec1': 0.59375, 'rec0': 0.70454544, 'rec1': 0.9047619, 'auroc': 0.8625541125541125, 'auprc': 0.7867719943523628, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.5972222, 'prec0': 0.8378378, 'prec1': 0.34285715, 'rec0': 0.5740741, 'rec1': 0.6666667, 'auroc': 0.6676954732510288, 'auprc': 0.5733856850304131, 'minpse': 0.6111111111111112}
epoch 2
46.615110635757446
validation set
{'acc': 0.8153846, 'prec0': 0.9444444, 'prec1': 0.6551724, 'rec0': 0.77272725, 'rec1': 0.9047619, 'auroc': 0.8809523809523809, 'auprc': 0.7588926965132567, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.9512195, 'prec1': 0.516129, 'rec0': 0.7222222, 'rec1': 0.8888889, 'auroc': 0.8960905349794238, 'auprc': 0.8009496904549794, 'minpse': 0.7}
epoch 3
41.21266919374466
validation set
{'acc': 0.8, 'prec0': 0.8604651, 'prec1': 0.6818182, 'rec0': 0.84090906, 'rec1': 0.71428573, 'auroc': 0.8214285714285715, 'auprc': 0.6982347390210135, 'minpse': 0.6818181818181818}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.9375, 'prec1': 0.625, 'rec0': 0.8333333, 'rec1': 0.8333333, 'auroc': 0.8734567901234568, 'auprc': 0.7116887372186363, 'minpse': 0.6666666666666666}
epoch 4
39.11594793200493
validation set
{'acc': 0.7846154, 'prec0': 0.9166667, 'prec1': 0.62068963, 'rec0': 0.75, 'rec1': 0.85714287, 'auroc': 0.8538961038961038, 'auprc': 0.776066456859805, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.6666667, 'prec0': 0.96875, 'prec1': 0.425, 'rec0': 0.5740741, 'rec1': 0.9444444, 'auroc': 0.8940329218106996, 'auprc': 0.7591212858188541, 'minpse': 0.7222222222222222}
epoch 5
42.329588025808334
validation set
{'acc': 0.84615386, 'prec0': 0.8541667, 'prec1': 0.8235294, 'rec0': 0.9318182, 'rec1': 0.6666667, 'auroc': 0.8658008658008657, 'auprc': 0.7893101342538378, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.8833333, 'prec1': 0.9166667, 'rec0': 0.9814815, 'rec1': 0.6111111, 'auroc': 0.9125514403292181, 'auprc': 0.8495204228411555, 'minpse': 0.7368421052631579}
epoch 6
39.16570967435837
validation set
{'acc': 0.8153846, 'prec0': 0.9, 'prec1': 0.68, 'rec0': 0.8181818, 'rec1': 0.8095238, 'auroc': 0.8614718614718615, 'auprc': 0.7605687679067734, 'minpse': 0.7272727272727273}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.9318182, 'prec1': 0.53571427, 'rec0': 0.7592593, 'rec1': 0.8333333, 'auroc': 0.897119341563786, 'auprc': 0.7890205341316177, 'minpse': 0.7368421052631579}
epoch 7
35.49637942016125
validation set
{'acc': 0.83076924, 'prec0': 0.88372093, 'prec1': 0.72727275, 'rec0': 0.8636364, 'rec1': 0.7619048, 'auroc': 0.8474025974025974, 'auprc': 0.7768516103979364, 'minpse': 0.7272727272727273}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8867925, 'prec1': 0.6315789, 'rec0': 0.8703704, 'rec1': 0.6666667, 'auroc': 0.8940329218106996, 'auprc': 0.8099026333866151, 'minpse': 0.6666666666666666}
epoch 8
35.53198543190956
validation set
{'acc': 0.8769231, 'prec0': 0.875, 'prec1': 0.88235295, 'rec0': 0.95454544, 'rec1': 0.71428573, 'auroc': 0.8430735930735931, 'auprc': 0.7654353417423487, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.86885244, 'prec1': 0.90909094, 'rec0': 0.9814815, 'rec1': 0.5555556, 'auroc': 0.8569958847736626, 'auprc': 0.7855662173729583, 'minpse': 0.6111111111111112}
epoch 9
37.42011898756027
validation set
{'acc': 0.75384617, 'prec0': 0.8888889, 'prec1': 0.5862069, 'rec0': 0.72727275, 'rec1': 0.8095238, 'auroc': 0.7943722943722943, 'auprc': 0.6824148069894422, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.8695652, 'prec1': 0.46153846, 'rec0': 0.7407407, 'rec1': 0.6666667, 'auroc': 0.8096707818930041, 'auprc': 0.7202444001541802, 'minpse': 0.6666666666666666}
epoch 10
47.202804923057556
validation set
{'acc': 0.7846154, 'prec0': 0.875, 'prec1': 0.64, 'rec0': 0.79545456, 'rec1': 0.7619048, 'auroc': 0.8051948051948052, 'auprc': 0.7434493372084705, 'minpse': 0.6818181818181818}
Mortality Prediction on the test set
{'acc': 0.6111111, 'prec0': 0.84210527, 'prec1': 0.3529412, 'rec0': 0.5925926, 'rec1': 0.6666667, 'auroc': 0.742798353909465, 'auprc': 0.5697647035317062, 'minpse': 0.6}
epoch 11
33.37435162067413
validation set
{'acc': 0.8153846, 'prec0': 0.88095236, 'prec1': 0.6956522, 'rec0': 0.84090906, 'rec1': 0.7619048, 'auroc': 0.8214285714285715, 'auprc': 0.6224201159269822, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.84615386, 'prec1': 0.5, 'rec0': 0.8148148, 'rec1': 0.5555556, 'auroc': 0.7098765432098766, 'auprc': 0.5044650473444694, 'minpse': 0.5555555555555556}
epoch 12
34.13616180419922
validation set
{'acc': 0.84615386, 'prec0': 0.8695652, 'prec1': 0.7894737, 'rec0': 0.90909094, 'rec1': 0.71428573, 'auroc': 0.827922077922078, 'auprc': 0.7215862384172944, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.8909091, 'prec1': 0.7058824, 'rec0': 0.9074074, 'rec1': 0.6666667, 'auroc': 0.7932098765432098, 'auprc': 0.5902845087521413, 'minpse': 0.6666666666666666}
epoch 13
30.494121730327606
validation set
{'acc': 0.8153846, 'prec0': 0.9, 'prec1': 0.68, 'rec0': 0.8181818, 'rec1': 0.8095238, 'auroc': 0.8603896103896104, 'auprc': 0.6614501714871497, 'minpse': 0.6956521739130435}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.8913044, 'prec1': 0.5, 'rec0': 0.7592593, 'rec1': 0.7222222, 'auroc': 0.7849794238683128, 'auprc': 0.5655918149643122, 'minpse': 0.6111111111111112}
epoch 14
30.872648775577545
validation set
{'acc': 0.8153846, 'prec0': 0.9, 'prec1': 0.68, 'rec0': 0.8181818, 'rec1': 0.8095238, 'auroc': 0.8484848484848485, 'auprc': 0.6425987875043375, 'minpse': 0.6956521739130435}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.88461536, 'prec1': 0.6, 'rec0': 0.8518519, 'rec1': 0.6666667, 'auroc': 0.7942386831275721, 'auprc': 0.5036377758974065, 'minpse': 0.6666666666666666}
epoch 15
32.273929104208946
validation set
{'acc': 0.7076923, 'prec0': 0.80487806, 'prec1': 0.5416667, 'rec0': 0.75, 'rec1': 0.61904764, 'auroc': 0.6525974025974025, 'auprc': 0.5233406922058566, 'minpse': 0.5714285714285714}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9347826, 'prec1': 0.5769231, 'rec0': 0.7962963, 'rec1': 0.8333333, 'auroc': 0.8724279835390947, 'auprc': 0.7242373314075535, 'minpse': 0.631578947368421}
epoch 16
34.71473607420921
validation set
{'acc': 0.83076924, 'prec0': 0.9459459, 'prec1': 0.6785714, 'rec0': 0.79545456, 'rec1': 0.9047619, 'auroc': 0.83008658008658, 'auprc': 0.7417757490214174, 'minpse': 0.6785714285714286}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.8888889, 'prec1': 0.4814815, 'rec0': 0.7407407, 'rec1': 0.7222222, 'auroc': 0.8199588477366255, 'auprc': 0.7027288927438216, 'minpse': 0.6666666666666666}
epoch 17
31.619000896811485
validation set
{'acc': 0.7692308, 'prec0': 0.9142857, 'prec1': 0.6, 'rec0': 0.72727275, 'rec1': 0.85714287, 'auroc': 0.7943722943722944, 'auprc': 0.6913872102530536, 'minpse': 0.6071428571428571}
Mortality Prediction on the test set
{'acc': 0.7083333, 'prec0': 0.902439, 'prec1': 0.4516129, 'rec0': 0.6851852, 'rec1': 0.7777778, 'auroc': 0.8374485596707819, 'auprc': 0.7149470672368637, 'minpse': 0.6666666666666666}
epoch 18
30.445571273565292
validation set
{'acc': 0.83076924, 'prec0': 0.88372093, 'prec1': 0.72727275, 'rec0': 0.8636364, 'rec1': 0.7619048, 'auroc': 0.8344155844155844, 'auprc': 0.7466869105142218, 'minpse': 0.7272727272727273}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.88235295, 'prec1': 0.5714286, 'rec0': 0.8333333, 'rec1': 0.6666667, 'auroc': 0.8930041152263374, 'auprc': 0.79162624797785, 'minpse': 0.6666666666666666}
epoch 19
36.649927601218224
validation set
{'acc': 0.8, 'prec0': 0.94285715, 'prec1': 0.6333333, 'rec0': 0.75, 'rec1': 0.9047619, 'auroc': 0.8528138528138528, 'auprc': 0.7934429028879659, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.6805556, 'prec0': 0.969697, 'prec1': 0.43589744, 'rec0': 0.5925926, 'rec1': 0.9444444, 'auroc': 0.9032921810699589, 'auprc': 0.8200211552404535, 'minpse': 0.7}
epoch 20
28.43957245349884
validation set
{'acc': 0.7846154, 'prec0': 0.9411765, 'prec1': 0.61290324, 'rec0': 0.72727275, 'rec1': 0.9047619, 'auroc': 0.8528138528138528, 'auprc': 0.7757664671120321, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.6944444, 'prec0': 0.9, 'prec1': 0.4375, 'rec0': 0.6666667, 'rec1': 0.7777778, 'auroc': 0.8312757201646089, 'auprc': 0.7408507735064843, 'minpse': 0.7222222222222222}
epoch 21
26.473622612655163
validation set
{'acc': 0.84615386, 'prec0': 0.8863636, 'prec1': 0.7619048, 'rec0': 0.8863636, 'rec1': 0.7619048, 'auroc': 0.8690476190476191, 'auprc': 0.7667785023427838, 'minpse': 0.7619047619047619}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.9019608, 'prec1': 0.61904764, 'rec0': 0.8518519, 'rec1': 0.7222222, 'auroc': 0.8693415637860081, 'auprc': 0.7642354361257286, 'minpse': 0.6666666666666666}
epoch 22
24.223887786269188
validation set
{'acc': 0.8, 'prec0': 0.9189189, 'prec1': 0.64285713, 'rec0': 0.77272725, 'rec1': 0.85714287, 'auroc': 0.8668831168831168, 'auprc': 0.75058038100527, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.9148936, 'prec1': 0.56, 'rec0': 0.7962963, 'rec1': 0.7777778, 'auroc': 0.867283950617284, 'auprc': 0.7119752262224516, 'minpse': 0.7222222222222222}
epoch 23
29.109268128871918
validation set
{'acc': 0.8, 'prec0': 0.84444445, 'prec1': 0.7, 'rec0': 0.8636364, 'rec1': 0.6666667, 'auroc': 0.8149350649350648, 'auprc': 0.6946180162915168, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.86538464, 'prec1': 0.55, 'rec0': 0.8333333, 'rec1': 0.6111111, 'auroc': 0.808641975308642, 'auprc': 0.6927438128134231, 'minpse': 0.5833333333333334}
epoch 24
26.64066591858864
validation set
{'acc': 0.8769231, 'prec0': 0.90909094, 'prec1': 0.8095238, 'rec0': 0.90909094, 'rec1': 0.8095238, 'auroc': 0.8766233766233765, 'auprc': 0.8092098782224832, 'minpse': 0.8095238095238095}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.87234044, 'prec1': 0.48, 'rec0': 0.7592593, 'rec1': 0.6666667, 'auroc': 0.7911522633744855, 'auprc': 0.6615600607634922, 'minpse': 0.631578947368421}
epoch 25
26.02026590704918
validation set
{'acc': 0.8769231, 'prec0': 0.875, 'prec1': 0.88235295, 'rec0': 0.95454544, 'rec1': 0.71428573, 'auroc': 0.8593073593073592, 'auprc': 0.779219342016896, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.84615386, 'prec1': 0.5, 'rec0': 0.8148148, 'rec1': 0.5555556, 'auroc': 0.77880658436214, 'auprc': 0.6605954092123687, 'minpse': 0.5555555555555556}
epoch 26
26.110134229063988
validation set
{'acc': 0.84615386, 'prec0': 0.8863636, 'prec1': 0.7619048, 'rec0': 0.8863636, 'rec1': 0.7619048, 'auroc': 0.8225108225108225, 'auprc': 0.6922119809925111, 'minpse': 0.7619047619047619}
Mortality Prediction on the test set
{'acc': 0.6666667, 'prec0': 0.85714287, 'prec1': 0.4, 'rec0': 0.6666667, 'rec1': 0.6666667, 'auroc': 0.684156378600823, 'auprc': 0.46887456133223804, 'minpse': 0.5}
epoch 27
27.409136310219765
validation set
{'acc': 0.8769231, 'prec0': 0.8913044, 'prec1': 0.84210527, 'rec0': 0.9318182, 'rec1': 0.7619048, 'auroc': 0.9145021645021645, 'auprc': 0.8148829780358229, 'minpse': 0.7619047619047619}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.875, 'prec1': 0.5, 'rec0': 0.7777778, 'rec1': 0.6666667, 'auroc': 0.7808641975308642, 'auprc': 0.7299289550958123, 'minpse': 0.6666666666666666}
epoch 28
25.5778771340847
validation set
{'acc': 0.86153847, 'prec0': 0.90697676, 'prec1': 0.77272725, 'rec0': 0.8863636, 'rec1': 0.8095238, 'auroc': 0.8777056277056278, 'auprc': 0.7744701927524689, 'minpse': 0.7727272727272727}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.877551, 'prec1': 0.5217391, 'rec0': 0.7962963, 'rec1': 0.6666667, 'auroc': 0.7726337448559671, 'auprc': 0.6405693689112701, 'minpse': 0.6111111111111112}
epoch 29
25.163864195346832
validation set
{'acc': 0.8923077, 'prec0': 0.9111111, 'prec1': 0.85, 'rec0': 0.9318182, 'rec1': 0.8095238, 'auroc': 0.8625541125541125, 'auprc': 0.8032284169285151, 'minpse': 0.8095238095238095}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.89361703, 'prec1': 0.52, 'rec0': 0.7777778, 'rec1': 0.7222222, 'auroc': 0.8076131687242799, 'auprc': 0.715309114124382, 'minpse': 0.7222222222222222}
epoch 30
23.047976404428482
validation set
{'acc': 0.7692308, 'prec0': 0.8717949, 'prec1': 0.61538464, 'rec0': 0.77272725, 'rec1': 0.7619048, 'auroc': 0.801948051948052, 'auprc': 0.691010997228215, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.6805556, 'prec0': 0.82978725, 'prec1': 0.4, 'rec0': 0.7222222, 'rec1': 0.5555556, 'auroc': 0.7242798353909465, 'auprc': 0.49178056844846085, 'minpse': 0.5263157894736842}
epoch 31
20.815527111291885
validation set
{'acc': 0.8, 'prec0': 0.8604651, 'prec1': 0.6818182, 'rec0': 0.84090906, 'rec1': 0.71428573, 'auroc': 0.8528138528138528, 'auprc': 0.7496909064656196, 'minpse': 0.6818181818181818}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.86538464, 'prec1': 0.55, 'rec0': 0.8333333, 'rec1': 0.6111111, 'auroc': 0.7623456790123457, 'auprc': 0.675165109732367, 'minpse': 0.6111111111111112}
epoch 32
22.46730600297451
validation set
{'acc': 0.84615386, 'prec0': 0.8863636, 'prec1': 0.7619048, 'rec0': 0.8863636, 'rec1': 0.7619048, 'auroc': 0.8766233766233766, 'auprc': 0.7741934179687537, 'minpse': 0.7619047619047619}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9, 'prec1': 0.59090906, 'rec0': 0.8333333, 'rec1': 0.7222222, 'auroc': 0.8220164609053499, 'auprc': 0.6930516077941768, 'minpse': 0.6842105263157895}
epoch 33
20.94083407521248
validation set
{'acc': 0.8153846, 'prec0': 0.84782606, 'prec1': 0.7368421, 'rec0': 0.8863636, 'rec1': 0.6666667, 'auroc': 0.8127705627705627, 'auprc': 0.7305807707729606, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.8909091, 'prec1': 0.7058824, 'rec0': 0.9074074, 'rec1': 0.6666667, 'auroc': 0.7880658436213992, 'auprc': 0.6191827949573034, 'minpse': 0.6666666666666666}
epoch 34
20.094256699085236
validation set
{'acc': 0.84615386, 'prec0': 0.8863636, 'prec1': 0.7619048, 'rec0': 0.8863636, 'rec1': 0.7619048, 'auroc': 0.8582251082251082, 'auprc': 0.7666959769065496, 'minpse': 0.7619047619047619}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9, 'prec1': 0.59090906, 'rec0': 0.8333333, 'rec1': 0.7222222, 'auroc': 0.8137860082304527, 'auprc': 0.6012070434510779, 'minpse': 0.6666666666666666}
epoch 35
20.282617032527924
validation set
{'acc': 0.84615386, 'prec0': 0.8695652, 'prec1': 0.7894737, 'rec0': 0.90909094, 'rec1': 0.71428573, 'auroc': 0.8593073593073592, 'auprc': 0.783479337426261, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.90384614, 'prec1': 0.65, 'rec0': 0.8703704, 'rec1': 0.7222222, 'auroc': 0.7890946502057614, 'auprc': 0.6023244142308514, 'minpse': 0.6666666666666666}
epoch 36
19.43237315118313
validation set
{'acc': 0.8153846, 'prec0': 0.8636364, 'prec1': 0.71428573, 'rec0': 0.8636364, 'rec1': 0.71428573, 'auroc': 0.827922077922078, 'auprc': 0.6883794794049016, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.88461536, 'prec1': 0.6, 'rec0': 0.8518519, 'rec1': 0.6666667, 'auroc': 0.7726337448559671, 'auprc': 0.571397984167878, 'minpse': 0.6111111111111112}
epoch 37
20.554069742560387
validation set
{'acc': 0.7692308, 'prec0': 0.79591835, 'prec1': 0.6875, 'rec0': 0.8863636, 'rec1': 0.52380955, 'auroc': 0.7034632034632033, 'auprc': 0.6444741182453624, 'minpse': 0.5714285714285714}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8545455, 'prec1': 0.5882353, 'rec0': 0.8703704, 'rec1': 0.5555556, 'auroc': 0.6707818930041152, 'auprc': 0.49388202416856447, 'minpse': 0.6111111111111112}
epoch 38
19.9871928691864
validation set
{'acc': 0.75384617, 'prec0': 0.96666664, 'prec1': 0.5714286, 'rec0': 0.65909094, 'rec1': 0.95238096, 'auroc': 0.867965367965368, 'auprc': 0.7750061048747874, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.7083333, 'prec0': 0.88372093, 'prec1': 0.44827586, 'rec0': 0.7037037, 'rec1': 0.7222222, 'auroc': 0.771604938271605, 'auprc': 0.5655783979132212, 'minpse': 0.6}
epoch 39
19.593734547495842
validation set
{'acc': 0.75384617, 'prec0': 0.9117647, 'prec1': 0.58064514, 'rec0': 0.70454544, 'rec1': 0.85714287, 'auroc': 0.816017316017316, 'auprc': 0.7355039595902315, 'minpse': 0.6363636363636364}
Mortality Prediction on the test set
{'acc': 0.6944444, 'prec0': 0.8636364, 'prec1': 0.42857143, 'rec0': 0.7037037, 'rec1': 0.6666667, 'auroc': 0.7510288065843621, 'auprc': 0.5555229222097138, 'minpse': 0.5263157894736842}
Reset trainable parameters of layer = Conv2d(1, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Linear(in_features=512, out_features=1000, bias=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Conv2d(64, 384, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=7200, bias=True)
Reset trainable parameters of layer = Linear(in_features=1000, out_features=6272, bias=True)
Reset trainable parameters of layer = Linear(in_features=7200, out_features=3600, bias=True)
Reset trainable parameters of layer = Linear(in_features=3600, out_features=1800, bias=True)
Reset trainable parameters of layer = Linear(in_features=1800, out_features=400, bias=True)
Reset trainable parameters of layer = Linear(in_features=400, out_features=1, bias=True)
for distribution val
type 0= 49 type 1= 16
for distribution test
type 0= 54 type 1= 18
epoch 0
55.02724188566208
validation set
{'acc': 0.9076923, 'prec0': 0.92156863, 'prec1': 0.85714287, 'rec0': 0.9591837, 'rec1': 0.75, 'auroc': 0.8239795918367346, 'auprc': 0.7632519727597527, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.87931037, 'prec1': 0.78571427, 'rec0': 0.9444444, 'rec1': 0.6111111, 'auroc': 0.8220164609053497, 'auprc': 0.7109186039836194, 'minpse': 0.6111111111111112}
epoch 1
48.89127433300018
validation set
{'acc': 0.8923077, 'prec0': 0.9375, 'prec1': 0.7647059, 'rec0': 0.9183673, 'rec1': 0.8125, 'auroc': 0.8252551020408164, 'auprc': 0.8262431767040015, 'minpse': 0.7647058823529411}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.86, 'prec1': 0.5, 'rec0': 0.7962963, 'rec1': 0.6111111, 'auroc': 0.8487654320987654, 'auprc': 0.74085029707433, 'minpse': 0.6111111111111112}
epoch 2
44.38275420665741
validation set
{'acc': 0.9076923, 'prec0': 0.93877554, 'prec1': 0.8125, 'rec0': 0.93877554, 'rec1': 0.8125, 'auroc': 0.8329081632653061, 'auprc': 0.8220556802176868, 'minpse': 0.8125}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.87931037, 'prec1': 0.78571427, 'rec0': 0.9444444, 'rec1': 0.6111111, 'auroc': 0.8508230452674896, 'auprc': 0.767126061804188, 'minpse': 0.6666666666666666}
epoch 3
46.700702011585236
validation set
{'acc': 0.8923077, 'prec0': 0.9375, 'prec1': 0.7647059, 'rec0': 0.9183673, 'rec1': 0.8125, 'auroc': 0.8035714285714286, 'auprc': 0.7904350005125619, 'minpse': 0.7647058823529411}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8596491, 'prec1': 0.6666667, 'rec0': 0.9074074, 'rec1': 0.5555556, 'auroc': 0.7788065843621399, 'auprc': 0.6923788530657129, 'minpse': 0.631578947368421}
epoch 4
39.645928502082825
validation set
{'acc': 0.9230769, 'prec0': 0.94, 'prec1': 0.8666667, 'rec0': 0.9591837, 'rec1': 0.8125, 'auroc': 0.8290816326530612, 'auprc': 0.8201636169155748, 'minpse': 0.8125}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.90909094, 'prec1': 0.7647059, 'rec0': 0.9259259, 'rec1': 0.7222222, 'auroc': 0.8600823045267489, 'auprc': 0.7733941318864649, 'minpse': 0.7222222222222222}
epoch 5
45.29458659887314
validation set
{'acc': 0.8923077, 'prec0': 0.9375, 'prec1': 0.7647059, 'rec0': 0.9183673, 'rec1': 0.8125, 'auroc': 0.8112244897959183, 'auprc': 0.8256727787633118, 'minpse': 0.7647058823529411}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.875, 'prec1': 0.6875, 'rec0': 0.9074074, 'rec1': 0.6111111, 'auroc': 0.852880658436214, 'auprc': 0.7464482068138799, 'minpse': 0.6666666666666666}
epoch 6
40.58700889348984
validation set
{'acc': 0.8923077, 'prec0': 0.92, 'prec1': 0.8, 'rec0': 0.93877554, 'rec1': 0.75, 'auroc': 0.8150510204081632, 'auprc': 0.7328965197893365, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.8909091, 'prec1': 0.7058824, 'rec0': 0.9074074, 'rec1': 0.6666667, 'auroc': 0.8590534979423868, 'auprc': 0.7615227805355673, 'minpse': 0.6666666666666666}
epoch 7
47.21308881044388
validation set
{'acc': 0.8769231, 'prec0': 0.9361702, 'prec1': 0.7222222, 'rec0': 0.8979592, 'rec1': 0.8125, 'auroc': 0.8099489795918366, 'auprc': 0.7907138406426091, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.877551, 'prec1': 0.5217391, 'rec0': 0.7962963, 'rec1': 0.6666667, 'auroc': 0.8179012345679013, 'auprc': 0.7114796500281605, 'minpse': 0.6111111111111112}
epoch 8
38.23570418357849
validation set
{'acc': 0.9076923, 'prec0': 0.9056604, 'prec1': 0.9166667, 'rec0': 0.97959185, 'rec1': 0.6875, 'auroc': 0.7729591836734693, 'auprc': 0.7370306794351578, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8360656, 'prec1': 0.72727275, 'rec0': 0.9444444, 'rec1': 0.44444445, 'auroc': 0.8137860082304527, 'auprc': 0.644956396997427, 'minpse': 0.631578947368421}
epoch 9
38.869875609874725
validation set
{'acc': 0.83076924, 'prec0': 0.9318182, 'prec1': 0.61904764, 'rec0': 0.8367347, 'rec1': 0.8125, 'auroc': 0.8061224489795918, 'auprc': 0.7844125942751474, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.94736844, 'prec1': 0.47058824, 'rec0': 0.6666667, 'rec1': 0.8888889, 'auroc': 0.8600823045267489, 'auprc': 0.7229620095585212, 'minpse': 0.631578947368421}
epoch 10
37.52789771556854
validation set
{'acc': 0.9230769, 'prec0': 0.94, 'prec1': 0.8666667, 'rec0': 0.9591837, 'rec1': 0.8125, 'auroc': 0.8112244897959184, 'auprc': 0.7965041719903522, 'minpse': 0.8125}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.88, 'prec1': 0.54545456, 'rec0': 0.8148148, 'rec1': 0.6666667, 'auroc': 0.860082304526749, 'auprc': 0.7029921904903665, 'minpse': 0.6111111111111112}
epoch 11
36.073113441467285
validation set
{'acc': 0.86153847, 'prec0': 0.9347826, 'prec1': 0.68421054, 'rec0': 0.877551, 'rec1': 0.8125, 'auroc': 0.832908163265306, 'auprc': 0.7660127701613744, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.89285713, 'prec1': 0.75, 'rec0': 0.9259259, 'rec1': 0.6666667, 'auroc': 0.7304526748971193, 'auprc': 0.614273893918983, 'minpse': 0.6666666666666666}
epoch 12
38.14571103453636
validation set
{'acc': 0.86153847, 'prec0': 0.9347826, 'prec1': 0.68421054, 'rec0': 0.877551, 'rec1': 0.8125, 'auroc': 0.8086734693877551, 'auprc': 0.7744509208022656, 'minpse': 0.7058823529411765}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.8909091, 'prec1': 0.7058824, 'rec0': 0.9074074, 'rec1': 0.6666667, 'auroc': 0.8333333333333334, 'auprc': 0.7553986771135102, 'minpse': 0.6666666666666666}
epoch 13
29.549807637929916
validation set
{'acc': 0.9076923, 'prec0': 0.93877554, 'prec1': 0.8125, 'rec0': 0.93877554, 'rec1': 0.8125, 'auroc': 0.8214285714285714, 'auprc': 0.8298782268090363, 'minpse': 0.8125}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8679245, 'prec1': 0.57894737, 'rec0': 0.8518519, 'rec1': 0.6111111, 'auroc': 0.8199588477366255, 'auprc': 0.6946992622736965, 'minpse': 0.6111111111111112}
epoch 14
33.997920364141464
validation set
{'acc': 0.8923077, 'prec0': 0.9375, 'prec1': 0.7647059, 'rec0': 0.9183673, 'rec1': 0.8125, 'auroc': 0.8022959183673468, 'auprc': 0.7346121251137135, 'minpse': 0.7647058823529411}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8727273, 'prec1': 0.64705884, 'rec0': 0.8888889, 'rec1': 0.6111111, 'auroc': 0.8117283950617284, 'auprc': 0.7116121754016549, 'minpse': 0.6666666666666666}
epoch 15
35.70208066701889
validation set
{'acc': 0.8769231, 'prec0': 0.9361702, 'prec1': 0.7222222, 'rec0': 0.8979592, 'rec1': 0.8125, 'auroc': 0.7806122448979591, 'auprc': 0.6728397517694196, 'minpse': 0.7222222222222222}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8545455, 'prec1': 0.5882353, 'rec0': 0.8703704, 'rec1': 0.5555556, 'auroc': 0.7952674897119343, 'auprc': 0.523362949369589, 'minpse': 0.631578947368421}
epoch 16
32.93943431973457
validation set
{'acc': 0.8769231, 'prec0': 0.9019608, 'prec1': 0.78571427, 'rec0': 0.93877554, 'rec1': 0.6875, 'auroc': 0.8022959183673469, 'auprc': 0.7766365172429459, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.9230769, 'prec1': 0.7, 'rec0': 0.8888889, 'rec1': 0.7777778, 'auroc': 0.9063786008230452, 'auprc': 0.8358251124287458, 'minpse': 0.7}
epoch 17
32.626266956329346
validation set
{'acc': 0.8153846, 'prec0': 0.9302326, 'prec1': 0.59090906, 'rec0': 0.81632656, 'rec1': 0.8125, 'auroc': 0.7487244897959184, 'auprc': 0.5760992892651968, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.8863636, 'prec1': 0.4642857, 'rec0': 0.7222222, 'rec1': 0.7222222, 'auroc': 0.8415637860082305, 'auprc': 0.69234574384529, 'minpse': 0.6111111111111112}
epoch 18
27.336654603481293
validation set
{'acc': 0.9230769, 'prec0': 0.9074074, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.6875, 'auroc': 0.7971938775510203, 'auprc': 0.8105420165526483, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.82258064, 'prec1': 0.7, 'rec0': 0.9444444, 'rec1': 0.3888889, 'auroc': 0.8590534979423868, 'auprc': 0.7113538665993653, 'minpse': 0.6111111111111112}
epoch 19
29.64739516377449
validation set
{'acc': 0.9076923, 'prec0': 0.92156863, 'prec1': 0.85714287, 'rec0': 0.9591837, 'rec1': 0.75, 'auroc': 0.7946428571428571, 'auprc': 0.7856256210520137, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.8947368, 'prec1': 0.8, 'rec0': 0.9444444, 'rec1': 0.6666667, 'auroc': 0.8281893004115226, 'auprc': 0.7374981995981746, 'minpse': 0.6666666666666666}
epoch 20
27.894061744213104
validation set
{'acc': 0.8769231, 'prec0': 0.9019608, 'prec1': 0.78571427, 'rec0': 0.93877554, 'rec1': 0.6875, 'auroc': 0.760204081632653, 'auprc': 0.5278065185486976, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.8064516, 'prec1': 0.6, 'rec0': 0.9259259, 'rec1': 0.33333334, 'auroc': 0.7705761316872428, 'auprc': 0.6038200622208201, 'minpse': 0.5}
epoch 21
28.5403940230608
validation set
{'acc': 0.84615386, 'prec0': 0.9148936, 'prec1': 0.6666667, 'rec0': 0.877551, 'rec1': 0.75, 'auroc': 0.7831632653061225, 'auprc': 0.769807176717469, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.8490566, 'prec1': 0.5263158, 'rec0': 0.8333333, 'rec1': 0.5555556, 'auroc': 0.7839506172839505, 'auprc': 0.5996028583539267, 'minpse': 0.5263157894736842}
epoch 22
30.241582095623016
validation set
{'acc': 0.86153847, 'prec0': 0.9347826, 'prec1': 0.68421054, 'rec0': 0.877551, 'rec1': 0.8125, 'auroc': 0.8137755102040817, 'auprc': 0.7762938884717039, 'minpse': 0.7058823529411765}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.8627451, 'prec1': 0.52380955, 'rec0': 0.8148148, 'rec1': 0.6111111, 'auroc': 0.8137860082304527, 'auprc': 0.6809432099411922, 'minpse': 0.5555555555555556}
epoch 23
24.86443603783846
validation set
{'acc': 0.7846154, 'prec0': 0.9268293, 'prec1': 0.5416667, 'rec0': 0.7755102, 'rec1': 0.8125, 'auroc': 0.7563775510204082, 'auprc': 0.4624966373842746, 'minpse': 0.5789473684210527}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.875, 'prec1': 0.5, 'rec0': 0.7777778, 'rec1': 0.6666667, 'auroc': 0.8076131687242799, 'auprc': 0.6514822317254148, 'minpse': 0.631578947368421}
epoch 24
22.39539746940136
validation set
{'acc': 0.84615386, 'prec0': 0.8979592, 'prec1': 0.6875, 'rec0': 0.8979592, 'rec1': 0.6875, 'auroc': 0.7678571428571429, 'auprc': 0.6238546891078207, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.86206895, 'prec1': 0.71428573, 'rec0': 0.9259259, 'rec1': 0.5555556, 'auroc': 0.816872427983539, 'auprc': 0.6255867341582266, 'minpse': 0.631578947368421}
epoch 25
29.492531821131706
validation set
{'acc': 0.8769231, 'prec0': 0.9361702, 'prec1': 0.7222222, 'rec0': 0.8979592, 'rec1': 0.8125, 'auroc': 0.8252551020408162, 'auprc': 0.6338821951370543, 'minpse': 0.7222222222222222}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9, 'prec1': 0.59090906, 'rec0': 0.8333333, 'rec1': 0.7222222, 'auroc': 0.8590534979423868, 'auprc': 0.7211440388919332, 'minpse': 0.6666666666666666}
epoch 26
31.868843644857407
validation set
{'acc': 0.8769231, 'prec0': 0.9183673, 'prec1': 0.75, 'rec0': 0.9183673, 'rec1': 0.75, 'auroc': 0.8125, 'auprc': 0.7977455495806061, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.95652175, 'prec1': 0.61538464, 'rec0': 0.8148148, 'rec1': 0.8888889, 'auroc': 0.9125514403292181, 'auprc': 0.8206916564408087, 'minpse': 0.7222222222222222}
epoch 27
28.128680735826492
validation set
{'acc': 0.93846154, 'prec0': 0.9245283, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.75, 'auroc': 0.8035714285714286, 'auprc': 0.823953426492489, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.8333333, 'prec1': 0.6666667, 'rec0': 0.9259259, 'rec1': 0.44444445, 'auroc': 0.8302469135802468, 'auprc': 0.6962939905930763, 'minpse': 0.6111111111111112}
epoch 28
26.98813208937645
validation set
{'acc': 0.8769231, 'prec0': 0.9361702, 'prec1': 0.7222222, 'rec0': 0.8979592, 'rec1': 0.8125, 'auroc': 0.8405612244897959, 'auprc': 0.8213362755072637, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.9111111, 'prec1': 0.5185185, 'rec0': 0.7592593, 'rec1': 0.7777778, 'auroc': 0.8271604938271605, 'auprc': 0.7168807273209417, 'minpse': 0.7}
epoch 29
27.602008283138275
validation set
{'acc': 0.86153847, 'prec0': 0.9166667, 'prec1': 0.7058824, 'rec0': 0.8979592, 'rec1': 0.75, 'auroc': 0.7882653061224488, 'auprc': 0.7473815369689052, 'minpse': 0.7058823529411765}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8979592, 'prec1': 0.5652174, 'rec0': 0.8148148, 'rec1': 0.7222222, 'auroc': 0.8251028806584362, 'auprc': 0.6511536437799808, 'minpse': 0.6666666666666666}
epoch 30
31.22836548089981
validation set
{'acc': 0.86153847, 'prec0': 0.9347826, 'prec1': 0.68421054, 'rec0': 0.877551, 'rec1': 0.8125, 'auroc': 0.8443877551020408, 'auprc': 0.7437740828819718, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.8518519, 'prec1': 0.5555556, 'rec0': 0.8518519, 'rec1': 0.5555556, 'auroc': 0.8199588477366255, 'auprc': 0.5566989089901053, 'minpse': 0.5714285714285714}
epoch 31
26.021860629320145
validation set
{'acc': 0.9076923, 'prec0': 0.8909091, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.625, 'auroc': 0.8405612244897959, 'auprc': 0.7848582123307525, 'minpse': 0.6470588235294118}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.7647059, 'prec1': 0.5, 'rec0': 0.962963, 'rec1': 0.11111111, 'auroc': 0.6954732510288066, 'auprc': 0.460891229356444, 'minpse': 0.5}
epoch 32
24.169252961874008
validation set
{'acc': 0.8923077, 'prec0': 0.92, 'prec1': 0.8, 'rec0': 0.93877554, 'rec1': 0.75, 'auroc': 0.8010204081632654, 'auprc': 0.780168053672518, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.8518519, 'prec1': 0.5555556, 'rec0': 0.8518519, 'rec1': 0.5555556, 'auroc': 0.8127572016460906, 'auprc': 0.6806399628450807, 'minpse': 0.5652173913043478}
epoch 33
22.248206615447998
validation set
{'acc': 0.9076923, 'prec0': 0.9056604, 'prec1': 0.9166667, 'rec0': 0.97959185, 'rec1': 0.6875, 'auroc': 0.8124999999999999, 'auprc': 0.780810351665425, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.8032787, 'prec1': 0.54545456, 'rec0': 0.9074074, 'rec1': 0.33333334, 'auroc': 0.8106995884773662, 'auprc': 0.6355707452686477, 'minpse': 0.5555555555555556}
epoch 34
25.420779056847095
validation set
{'acc': 0.86153847, 'prec0': 0.9166667, 'prec1': 0.7058824, 'rec0': 0.8979592, 'rec1': 0.75, 'auroc': 0.8201530612244898, 'auprc': 0.7985336451864293, 'minpse': 0.7058823529411765}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.88235295, 'prec1': 0.5714286, 'rec0': 0.8333333, 'rec1': 0.6666667, 'auroc': 0.8148148148148148, 'auprc': 0.6786059561869449, 'minpse': 0.631578947368421}
epoch 35
22.575300097465515
validation set
{'acc': 0.8769231, 'prec0': 0.9183673, 'prec1': 0.75, 'rec0': 0.9183673, 'rec1': 0.75, 'auroc': 0.8214285714285715, 'auprc': 0.8015462308554584, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.88235295, 'prec1': 0.5714286, 'rec0': 0.8333333, 'rec1': 0.6666667, 'auroc': 0.802469135802469, 'auprc': 0.7060544828877617, 'minpse': 0.6666666666666666}
epoch 36
21.26349037885666
validation set
{'acc': 0.84615386, 'prec0': 0.93333334, 'prec1': 0.65, 'rec0': 0.85714287, 'rec1': 0.8125, 'auroc': 0.8278061224489797, 'auprc': 0.8148833640588515, 'minpse': 0.7058823529411765}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.8863636, 'prec1': 0.4642857, 'rec0': 0.7222222, 'rec1': 0.7222222, 'auroc': 0.7860082304526749, 'auprc': 0.666308136404173, 'minpse': 0.5789473684210527}
epoch 37
21.40260273218155
validation set
{'acc': 0.8153846, 'prec0': 0.9302326, 'prec1': 0.59090906, 'rec0': 0.81632656, 'rec1': 0.8125, 'auroc': 0.806122448979592, 'auprc': 0.7591770336767822, 'minpse': 0.6111111111111112}
Mortality Prediction on the test set
{'acc': 0.6805556, 'prec0': 0.84444445, 'prec1': 0.4074074, 'rec0': 0.7037037, 'rec1': 0.6111111, 'auroc': 0.7674897119341564, 'auprc': 0.5795783848441092, 'minpse': 0.5555555555555556}
epoch 38
21.918615199625492
validation set
{'acc': 0.8923077, 'prec0': 0.92, 'prec1': 0.8, 'rec0': 0.93877554, 'rec1': 0.75, 'auroc': 0.7933673469387755, 'auprc': 0.8053145048341918, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.8490566, 'prec1': 0.5263158, 'rec0': 0.8333333, 'rec1': 0.5555556, 'auroc': 0.8168724279835391, 'auprc': 0.7078876413168618, 'minpse': 0.5909090909090909}
epoch 39
22.675199076533318
validation set
{'acc': 0.86153847, 'prec0': 0.9166667, 'prec1': 0.7058824, 'rec0': 0.8979592, 'rec1': 0.75, 'auroc': 0.8265306122448979, 'auprc': 0.8028113306470505, 'minpse': 0.7058823529411765}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.88, 'prec1': 0.54545456, 'rec0': 0.8148148, 'rec1': 0.6666667, 'auroc': 0.7993827160493828, 'auprc': 0.714130449191558, 'minpse': 0.6666666666666666}
Reset trainable parameters of layer = Conv2d(1, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Linear(in_features=512, out_features=1000, bias=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Conv2d(64, 384, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=7200, bias=True)
Reset trainable parameters of layer = Linear(in_features=1000, out_features=6272, bias=True)
Reset trainable parameters of layer = Linear(in_features=7200, out_features=3600, bias=True)
Reset trainable parameters of layer = Linear(in_features=3600, out_features=1800, bias=True)
Reset trainable parameters of layer = Linear(in_features=1800, out_features=400, bias=True)
Reset trainable parameters of layer = Linear(in_features=400, out_features=1, bias=True)
for distribution val
type 0= 46 type 1= 19
for distribution test
type 0= 54 type 1= 18
epoch 0
54.18034601211548
validation set
{'acc': 0.8923077, 'prec0': 0.95348835, 'prec1': 0.77272725, 'rec0': 0.8913044, 'rec1': 0.8947368, 'auroc': 0.9599542334096111, 'auprc': 0.9186038256767384, 'minpse': 0.8421052631578947}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.9411765, 'prec1': 0.71428573, 'rec0': 0.8888889, 'rec1': 0.8333333, 'auroc': 0.9248971193415637, 'auprc': 0.8573019237101476, 'minpse': 0.75}
epoch 1
46.67455995082855
validation set
{'acc': 0.8769231, 'prec0': 0.9318182, 'prec1': 0.7619048, 'rec0': 0.8913044, 'rec1': 0.84210527, 'auroc': 0.9244851258581237, 'auprc': 0.8793071841500535, 'minpse': 0.7619047619047619}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.9074074, 'prec1': 0.7222222, 'rec0': 0.9074074, 'rec1': 0.7222222, 'auroc': 0.9002057613168725, 'auprc': 0.8093997449499815, 'minpse': 0.7368421052631579}
epoch 2
45.33024549484253
validation set
{'acc': 0.8769231, 'prec0': 0.95238096, 'prec1': 0.73913044, 'rec0': 0.8695652, 'rec1': 0.8947368, 'auroc': 0.9405034324942791, 'auprc': 0.8850451085150981, 'minpse': 0.8}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.9019608, 'prec1': 0.61904764, 'rec0': 0.8518519, 'rec1': 0.7222222, 'auroc': 0.8765432098765431, 'auprc': 0.7519851103277356, 'minpse': 0.7222222222222222}
epoch 3
46.398458898067474
validation set
{'acc': 0.83076924, 'prec0': 0.972973, 'prec1': 0.64285713, 'rec0': 0.7826087, 'rec1': 0.94736844, 'auroc': 0.9382151029748284, 'auprc': 0.8897041886060031, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.9512195, 'prec1': 0.516129, 'rec0': 0.7222222, 'rec1': 0.8888889, 'auroc': 0.8991769547325102, 'auprc': 0.8323569494402827, 'minpse': 0.6666666666666666}
epoch 4
40.24741715192795
validation set
{'acc': 0.86153847, 'prec0': 0.9512195, 'prec1': 0.7083333, 'rec0': 0.84782606, 'rec1': 0.8947368, 'auroc': 0.8752860411899314, 'auprc': 0.8632920680309786, 'minpse': 0.7894736842105263}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.9056604, 'prec1': 0.68421054, 'rec0': 0.8888889, 'rec1': 0.7222222, 'auroc': 0.8395061728395061, 'auprc': 0.7988086301344501, 'minpse': 0.7222222222222222}
epoch 5
47.43765902519226
validation set
{'acc': 0.8153846, 'prec0': 0.925, 'prec1': 0.64, 'rec0': 0.8043478, 'rec1': 0.84210527, 'auroc': 0.8901601830663616, 'auprc': 0.8159681839114201, 'minpse': 0.6842105263157895}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.8695652, 'prec1': 0.46153846, 'rec0': 0.7407407, 'rec1': 0.6666667, 'auroc': 0.757201646090535, 'auprc': 0.6172340641115642, 'minpse': 0.5555555555555556}
epoch 6
41.08971810340881
validation set
{'acc': 0.84615386, 'prec0': 0.9736842, 'prec1': 0.6666667, 'rec0': 0.8043478, 'rec1': 0.94736844, 'auroc': 0.9382151029748284, 'auprc': 0.8685139384450937, 'minpse': 0.7894736842105263}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.8947368, 'prec1': 0.8, 'rec0': 0.9444444, 'rec1': 0.6666667, 'auroc': 0.9063786008230453, 'auprc': 0.8062262564946594, 'minpse': 0.6666666666666666}
epoch 7
39.12104606628418
validation set
{'acc': 0.8, 'prec0': 1.0, 'prec1': 0.59375, 'rec0': 0.7173913, 'rec1': 1.0, 'auroc': 0.9279176201372998, 'auprc': 0.8632428406974622, 'minpse': 0.7368421052631579}
Mortality Prediction on the test set
{'acc': 0.6944444, 'prec0': 0.9, 'prec1': 0.4375, 'rec0': 0.6666667, 'rec1': 0.7777778, 'auroc': 0.8127572016460906, 'auprc': 0.7520832724917054, 'minpse': 0.7222222222222222}
epoch 8
37.66294801235199
validation set
{'acc': 0.84615386, 'prec0': 0.9736842, 'prec1': 0.6666667, 'rec0': 0.8043478, 'rec1': 0.94736844, 'auroc': 0.9199084668192219, 'auprc': 0.8587826319131091, 'minpse': 0.7368421052631579}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.90384614, 'prec1': 0.65, 'rec0': 0.8703704, 'rec1': 0.7222222, 'auroc': 0.8477366255144032, 'auprc': 0.7764312492070897, 'minpse': 0.6842105263157895}
epoch 9
36.94361835718155
validation set
{'acc': 0.8153846, 'prec0': 0.8695652, 'prec1': 0.68421054, 'rec0': 0.8695652, 'rec1': 0.68421054, 'auroc': 0.8272311212814645, 'auprc': 0.7571089456512061, 'minpse': 0.6842105263157895}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8305085, 'prec1': 0.61538464, 'rec0': 0.9074074, 'rec1': 0.44444445, 'auroc': 0.7510288065843621, 'auprc': 0.6498316524409344, 'minpse': 0.5555555555555556}
epoch 10
36.93188935518265
validation set
{'acc': 0.86153847, 'prec0': 0.9111111, 'prec1': 0.75, 'rec0': 0.8913044, 'rec1': 0.7894737, 'auroc': 0.9118993135011442, 'auprc': 0.8540647392153491, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.877193, 'prec1': 0.73333335, 'rec0': 0.9259259, 'rec1': 0.6111111, 'auroc': 0.7705761316872428, 'auprc': 0.7210060349619809, 'minpse': 0.6111111111111112}
epoch 11
36.089521795511246
validation set
{'acc': 0.8153846, 'prec0': 0.94736844, 'prec1': 0.6296296, 'rec0': 0.7826087, 'rec1': 0.8947368, 'auroc': 0.8844393592677346, 'auprc': 0.806750965735261, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.6666667, 'prec0': 0.85714287, 'prec1': 0.4, 'rec0': 0.6666667, 'rec1': 0.6666667, 'auroc': 0.7829218106995884, 'auprc': 0.6856686661740314, 'minpse': 0.6111111111111112}
epoch 12
36.24087303876877
validation set
{'acc': 0.7846154, 'prec0': 0.82, 'prec1': 0.6666667, 'rec0': 0.8913044, 'rec1': 0.5263158, 'auroc': 0.6544622425629291, 'auprc': 0.6208246054734143, 'minpse': 0.5789473684210527}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8596491, 'prec1': 0.6666667, 'rec0': 0.9074074, 'rec1': 0.5555556, 'auroc': 0.7242798353909464, 'auprc': 0.6544624754400605, 'minpse': 0.6111111111111112}
epoch 13
38.018963903188705
validation set
{'acc': 0.83076924, 'prec0': 0.94871795, 'prec1': 0.65384614, 'rec0': 0.8043478, 'rec1': 0.8947368, 'auroc': 0.9336384439359268, 'auprc': 0.8841353995215524, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.93333334, 'prec1': 0.5555556, 'rec0': 0.7777778, 'rec1': 0.8333333, 'auroc': 0.8487654320987654, 'auprc': 0.7495877728148517, 'minpse': 0.5769230769230769}
epoch 14
34.37990218400955
validation set
{'acc': 0.83076924, 'prec0': 0.94871795, 'prec1': 0.65384614, 'rec0': 0.8043478, 'rec1': 0.8947368, 'auroc': 0.9359267734553776, 'auprc': 0.8923952687901491, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.9268293, 'prec1': 0.48387095, 'rec0': 0.7037037, 'rec1': 0.8333333, 'auroc': 0.8518518518518519, 'auprc': 0.6413235119054335, 'minpse': 0.6521739130434783}
epoch 15
35.00004489719868
validation set
{'acc': 0.8153846, 'prec0': 0.94736844, 'prec1': 0.6296296, 'rec0': 0.7826087, 'rec1': 0.8947368, 'auroc': 0.9176201372997711, 'auprc': 0.8574851658581597, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.9318182, 'prec1': 0.53571427, 'rec0': 0.7592593, 'rec1': 0.8333333, 'auroc': 0.8703703703703703, 'auprc': 0.8019929032142437, 'minpse': 0.6666666666666666}
epoch 16
30.223250210285187
validation set
{'acc': 0.8153846, 'prec0': 0.9722222, 'prec1': 0.62068963, 'rec0': 0.76086956, 'rec1': 0.94736844, 'auroc': 0.9061784897025171, 'auprc': 0.8283936087173427, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.9148936, 'prec1': 0.56, 'rec0': 0.7962963, 'rec1': 0.7777778, 'auroc': 0.8703703703703705, 'auprc': 0.7892846161865874, 'minpse': 0.6842105263157895}
epoch 17
31.313639223575592
validation set
{'acc': 0.83076924, 'prec0': 0.9268293, 'prec1': 0.6666667, 'rec0': 0.82608694, 'rec1': 0.84210527, 'auroc': 0.9130434782608695, 'auprc': 0.8418004250018873, 'minpse': 0.7368421052631579}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9166667, 'prec1': 0.5833333, 'rec0': 0.8148148, 'rec1': 0.7777778, 'auroc': 0.8405349794238683, 'auprc': 0.788990626591147, 'minpse': 0.6666666666666666}
epoch 18
26.525931168347597
validation set
{'acc': 0.86153847, 'prec0': 0.9302326, 'prec1': 0.72727275, 'rec0': 0.8695652, 'rec1': 0.84210527, 'auroc': 0.8924485125858124, 'auprc': 0.7854367039806618, 'minpse': 0.7368421052631579}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.875, 'prec1': 0.5, 'rec0': 0.7777778, 'rec1': 0.6666667, 'auroc': 0.7695473251028807, 'auprc': 0.6781076608836241, 'minpse': 0.6111111111111112}
epoch 19
32.67855069041252
validation set
{'acc': 0.86153847, 'prec0': 1.0, 'prec1': 0.6785714, 'rec0': 0.8043478, 'rec1': 1.0, 'auroc': 0.948512585812357, 'auprc': 0.8826089702585265, 'minpse': 0.7894736842105263}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.8863636, 'prec1': 0.4642857, 'rec0': 0.7222222, 'rec1': 0.7222222, 'auroc': 0.7911522633744855, 'auprc': 0.7166864587815786, 'minpse': 0.6666666666666666}
epoch 20
31.403774350881577
validation set
{'acc': 0.84615386, 'prec0': 0.90909094, 'prec1': 0.71428573, 'rec0': 0.8695652, 'rec1': 0.7894737, 'auroc': 0.8672768878718535, 'auprc': 0.7574231998441812, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.86440676, 'prec1': 0.7692308, 'rec0': 0.9444444, 'rec1': 0.5555556, 'auroc': 0.7849794238683129, 'auprc': 0.7357131017835007, 'minpse': 0.6111111111111112}
epoch 21
26.311453104019165
validation set
{'acc': 0.8923077, 'prec0': 0.9148936, 'prec1': 0.8333333, 'rec0': 0.9347826, 'rec1': 0.7894737, 'auroc': 0.9233409610983982, 'auprc': 0.8329389269483396, 'minpse': 0.7894736842105263}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.86440676, 'prec1': 0.7692308, 'rec0': 0.9444444, 'rec1': 0.5555556, 'auroc': 0.7458847736625513, 'auprc': 0.6671177472509842, 'minpse': 0.6111111111111112}
epoch 22
32.890182852745056
validation set
{'acc': 0.83076924, 'prec0': 0.94871795, 'prec1': 0.65384614, 'rec0': 0.8043478, 'rec1': 0.8947368, 'auroc': 0.8718535469107552, 'auprc': 0.7595383609274311, 'minpse': 0.6842105263157895}
Mortality Prediction on the test set
{'acc': 0.7083333, 'prec0': 0.902439, 'prec1': 0.4516129, 'rec0': 0.6851852, 'rec1': 0.7777778, 'auroc': 0.8271604938271605, 'auprc': 0.6603414162475636, 'minpse': 0.5555555555555556}
epoch 23
32.86454477906227
validation set
{'acc': 0.86153847, 'prec0': 0.9111111, 'prec1': 0.75, 'rec0': 0.8913044, 'rec1': 0.7894737, 'auroc': 0.8810068649885585, 'auprc': 0.8258647436886768, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.8333333, 'prec1': 0.5, 'rec0': 0.8333333, 'rec1': 0.5, 'auroc': 0.75, 'auprc': 0.5936220081107413, 'minpse': 0.5}
epoch 24
27.254549145698547
validation set
{'acc': 0.8769231, 'prec0': 0.88, 'prec1': 0.8666667, 'rec0': 0.95652175, 'rec1': 0.68421054, 'auroc': 0.8627002288329519, 'auprc': 0.8079482547712655, 'minpse': 0.6842105263157895}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.852459, 'prec1': 0.8181818, 'rec0': 0.962963, 'rec1': 0.5, 'auroc': 0.8333333333333334, 'auprc': 0.7754035774128645, 'minpse': 0.7222222222222222}
epoch 25
24.45867644250393
validation set
{'acc': 0.72307694, 'prec0': 0.96666664, 'prec1': 0.51428574, 'rec0': 0.6304348, 'rec1': 0.94736844, 'auroc': 0.8729977116704806, 'auprc': 0.7663270115476484, 'minpse': 0.6842105263157895}
Mortality Prediction on the test set
{'acc': 0.6944444, 'prec0': 0.9444444, 'prec1': 0.44444445, 'rec0': 0.6296296, 'rec1': 0.8888889, 'auroc': 0.8425925925925926, 'auprc': 0.7525170010127598, 'minpse': 0.6842105263157895}
epoch 26
28.037927880883217
validation set
{'acc': 0.7846154, 'prec0': 0.92105263, 'prec1': 0.5925926, 'rec0': 0.76086956, 'rec1': 0.84210527, 'auroc': 0.8615560640732265, 'auprc': 0.7698304711323258, 'minpse': 0.6842105263157895}
Mortality Prediction on the test set
{'acc': 0.6527778, 'prec0': 0.8372093, 'prec1': 0.37931034, 'rec0': 0.6666667, 'rec1': 0.6111111, 'auroc': 0.7736625514403292, 'auprc': 0.5989732277555617, 'minpse': 0.5555555555555556}
epoch 27
29.550247609615326
validation set
{'acc': 0.8, 'prec0': 0.9230769, 'prec1': 0.61538464, 'rec0': 0.7826087, 'rec1': 0.84210527, 'auroc': 0.8707093821510298, 'auprc': 0.7570576905425526, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.6666667, 'prec0': 0.8, 'prec1': 0.36363637, 'rec0': 0.7407407, 'rec1': 0.44444445, 'auroc': 0.6481481481481481, 'auprc': 0.4786006705249354, 'minpse': 0.3888888888888889}
epoch 28
24.870265275239944
validation set
{'acc': 0.73846155, 'prec0': 0.9677419, 'prec1': 0.5294118, 'rec0': 0.65217394, 'rec1': 0.94736844, 'auroc': 0.8180778032036613, 'auprc': 0.667766389876959, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.6944444, 'prec0': 0.88095236, 'prec1': 0.43333334, 'rec0': 0.6851852, 'rec1': 0.7222222, 'auroc': 0.7901234567901234, 'auprc': 0.7239681478160302, 'minpse': 0.6111111111111112}
epoch 29
31.20674341917038
validation set
{'acc': 0.7692308, 'prec0': 0.969697, 'prec1': 0.5625, 'rec0': 0.6956522, 'rec1': 0.94736844, 'auroc': 0.8764302059496567, 'auprc': 0.7697099852860259, 'minpse': 0.65}
Mortality Prediction on the test set
{'acc': 0.6666667, 'prec0': 0.875, 'prec1': 0.40625, 'rec0': 0.6481481, 'rec1': 0.7222222, 'auroc': 0.802469135802469, 'auprc': 0.7121497923595403, 'minpse': 0.5555555555555556}
epoch 30
27.923812448978424
validation set
{'acc': 0.83076924, 'prec0': 0.9268293, 'prec1': 0.6666667, 'rec0': 0.82608694, 'rec1': 0.84210527, 'auroc': 0.8901601830663616, 'auprc': 0.8020930378478668, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.8518519, 'prec1': 0.5555556, 'rec0': 0.8518519, 'rec1': 0.5555556, 'auroc': 0.7582304526748972, 'auprc': 0.6878348525365352, 'minpse': 0.5789473684210527}
epoch 31
27.671658657491207
validation set
{'acc': 0.84615386, 'prec0': 0.90909094, 'prec1': 0.71428573, 'rec0': 0.8695652, 'rec1': 0.7894737, 'auroc': 0.8810068649885584, 'auprc': 0.7674479674665977, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8679245, 'prec1': 0.57894737, 'rec0': 0.8518519, 'rec1': 0.6111111, 'auroc': 0.8055555555555556, 'auprc': 0.7233071300123375, 'minpse': 0.6111111111111112}
epoch 32
27.80006067454815
validation set
{'acc': 0.8, 'prec0': 0.9459459, 'prec1': 0.60714287, 'rec0': 0.76086956, 'rec1': 0.8947368, 'auroc': 0.9061784897025171, 'auprc': 0.8354711393143557, 'minpse': 0.7368421052631579}
Mortality Prediction on the test set
{'acc': 0.6805556, 'prec0': 0.8780488, 'prec1': 0.41935483, 'rec0': 0.6666667, 'rec1': 0.7222222, 'auroc': 0.8199588477366255, 'auprc': 0.7322273871832907, 'minpse': 0.6111111111111112}
epoch 33
26.057720184326172
validation set
{'acc': 0.8769231, 'prec0': 0.9318182, 'prec1': 0.7619048, 'rec0': 0.8913044, 'rec1': 0.84210527, 'auroc': 0.897025171624714, 'auprc': 0.8278678572552463, 'minpse': 0.7619047619047619}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.85714287, 'prec1': 0.47826087, 'rec0': 0.7777778, 'rec1': 0.6111111, 'auroc': 0.7818930041152264, 'auprc': 0.7032341885166601, 'minpse': 0.5555555555555556}
epoch 34
23.15228071808815
validation set
{'acc': 0.86153847, 'prec0': 0.9111111, 'prec1': 0.75, 'rec0': 0.8913044, 'rec1': 0.7894737, 'auroc': 0.914187643020595, 'auprc': 0.8608506323649334, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.8703704, 'prec1': 0.6111111, 'rec0': 0.8703704, 'rec1': 0.6111111, 'auroc': 0.8405349794238683, 'auprc': 0.7569902124064767, 'minpse': 0.6111111111111112}
epoch 35
20.88939081132412
validation set
{'acc': 0.8769231, 'prec0': 0.9130435, 'prec1': 0.7894737, 'rec0': 0.9130435, 'rec1': 0.7894737, 'auroc': 0.9050343249427918, 'auprc': 0.8497474783670678, 'minpse': 0.7894736842105263}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.86538464, 'prec1': 0.55, 'rec0': 0.8333333, 'rec1': 0.6111111, 'auroc': 0.8117283950617283, 'auprc': 0.7183030195535458, 'minpse': 0.6111111111111112}
epoch 36
19.7099190056324
validation set
{'acc': 0.84615386, 'prec0': 0.95, 'prec1': 0.68, 'rec0': 0.82608694, 'rec1': 0.8947368, 'auroc': 0.9187643020594966, 'auprc': 0.8476296161922818, 'minpse': 0.7368421052631579}
Mortality Prediction on the test set
{'acc': 0.7083333, 'prec0': 0.88372093, 'prec1': 0.44827586, 'rec0': 0.7037037, 'rec1': 0.7222222, 'auroc': 0.8240740740740741, 'auprc': 0.7527824531403705, 'minpse': 0.6111111111111112}
epoch 37
20.890843257308006
validation set
{'acc': 0.8, 'prec0': 0.9230769, 'prec1': 0.61538464, 'rec0': 0.7826087, 'rec1': 0.84210527, 'auroc': 0.8924485125858124, 'auprc': 0.8238463382370653, 'minpse': 0.631578947368421}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.8913044, 'prec1': 0.5, 'rec0': 0.7592593, 'rec1': 0.7222222, 'auroc': 0.8240740740740741, 'auprc': 0.7361993935671617, 'minpse': 0.5789473684210527}
epoch 38
22.42914541065693
validation set
{'acc': 0.8923077, 'prec0': 0.93333334, 'prec1': 0.8, 'rec0': 0.9130435, 'rec1': 0.84210527, 'auroc': 0.9118993135011442, 'auprc': 0.870639142068371, 'minpse': 0.8}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.8888889, 'prec1': 0.6666667, 'rec0': 0.8888889, 'rec1': 0.6666667, 'auroc': 0.8106995884773662, 'auprc': 0.7242740994752592, 'minpse': 0.6666666666666666}
epoch 39
19.704822070896626
validation set
{'acc': 0.8153846, 'prec0': 0.9047619, 'prec1': 0.65217394, 'rec0': 0.82608694, 'rec1': 0.7894737, 'auroc': 0.8832951945080092, 'auprc': 0.8079853271817106, 'minpse': 0.7}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.87234044, 'prec1': 0.48, 'rec0': 0.7592593, 'rec1': 0.6666667, 'auroc': 0.7839506172839507, 'auprc': 0.6986060292395293, 'minpse': 0.5789473684210527}
Reset trainable parameters of layer = Conv2d(1, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Linear(in_features=512, out_features=1000, bias=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Conv2d(64, 384, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=7200, bias=True)
Reset trainable parameters of layer = Linear(in_features=1000, out_features=6272, bias=True)
Reset trainable parameters of layer = Linear(in_features=7200, out_features=3600, bias=True)
Reset trainable parameters of layer = Linear(in_features=3600, out_features=1800, bias=True)
Reset trainable parameters of layer = Linear(in_features=1800, out_features=400, bias=True)
Reset trainable parameters of layer = Linear(in_features=400, out_features=1, bias=True)
for distribution val
type 0= 45 type 1= 20
for distribution test
type 0= 54 type 1= 18
epoch 0
50.80125266313553
validation set
{'acc': 0.83076924, 'prec0': 0.84, 'prec1': 0.8, 'rec0': 0.93333334, 'rec1': 0.6, 'auroc': 0.7988888888888889, 'auprc': 0.7500877835090958, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.9056604, 'prec1': 0.68421054, 'rec0': 0.8888889, 'rec1': 0.7222222, 'auroc': 0.8755144032921811, 'auprc': 0.7493782058713027, 'minpse': 0.6842105263157895}
epoch 1
47.864798069000244
validation set
{'acc': 0.7692308, 'prec0': 0.8, 'prec1': 0.6666667, 'rec0': 0.8888889, 'rec1': 0.5, 'auroc': 0.7355555555555555, 'auprc': 0.6570807468427675, 'minpse': 0.55}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.9074074, 'prec1': 0.7222222, 'rec0': 0.9074074, 'rec1': 0.7222222, 'auroc': 0.9084362139917695, 'auprc': 0.7546551381748831, 'minpse': 0.7222222222222222}
epoch 2
46.807511389255524
validation set
{'acc': 0.84615386, 'prec0': 0.84313726, 'prec1': 0.85714287, 'rec0': 0.95555556, 'rec1': 0.6, 'auroc': 0.76, 'auprc': 0.7323874597783124, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.8947368, 'prec1': 0.8, 'rec0': 0.9444444, 'rec1': 0.6666667, 'auroc': 0.9135802469135803, 'auprc': 0.8613973019864439, 'minpse': 0.75}
epoch 3
44.99557554721832
validation set
{'acc': 0.83076924, 'prec0': 0.8269231, 'prec1': 0.84615386, 'rec0': 0.95555556, 'rec1': 0.55, 'auroc': 0.7366666666666667, 'auprc': 0.7116554705299203, 'minpse': 0.55}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.86440676, 'prec1': 0.7692308, 'rec0': 0.9444444, 'rec1': 0.5555556, 'auroc': 0.8940329218106996, 'auprc': 0.8143589775971056, 'minpse': 0.7368421052631579}
epoch 4
42.92054122686386
validation set
{'acc': 0.6923077, 'prec0': 0.82051283, 'prec1': 0.5, 'rec0': 0.7111111, 'rec1': 0.65, 'auroc': 0.7122222222222223, 'auprc': 0.6304197240903164, 'minpse': 0.55}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9166667, 'prec1': 0.5833333, 'rec0': 0.8148148, 'rec1': 0.7777778, 'auroc': 0.8816872427983539, 'auprc': 0.7929542039796644, 'minpse': 0.6842105263157895}
epoch 5
40.72887480258942
validation set
{'acc': 0.83076924, 'prec0': 0.8269231, 'prec1': 0.84615386, 'rec0': 0.95555556, 'rec1': 0.55, 'auroc': 0.76, 'auprc': 0.7207096006257498, 'minpse': 0.55}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.8666667, 'prec1': 0.8333333, 'rec0': 0.962963, 'rec1': 0.5555556, 'auroc': 0.8724279835390946, 'auprc': 0.7448557491915704, 'minpse': 0.6842105263157895}
epoch 6
40.703583002090454
validation set
{'acc': 0.8153846, 'prec0': 0.8367347, 'prec1': 0.75, 'rec0': 0.9111111, 'rec1': 0.6, 'auroc': 0.7566666666666666, 'auprc': 0.7010253483325463, 'minpse': 0.65}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.8666667, 'prec1': 0.8333333, 'rec0': 0.962963, 'rec1': 0.5555556, 'auroc': 0.8796296296296297, 'auprc': 0.7939339954614203, 'minpse': 0.6666666666666666}
epoch 7
37.08862888813019
validation set
{'acc': 0.7076923, 'prec0': 0.90625, 'prec1': 0.5151515, 'rec0': 0.64444447, 'rec1': 0.85, 'auroc': 0.7688888888888888, 'auprc': 0.6839520609996284, 'minpse': 0.55}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.9302326, 'prec1': 0.51724136, 'rec0': 0.7407407, 'rec1': 0.8333333, 'auroc': 0.8806584362139918, 'auprc': 0.8045801021988226, 'minpse': 0.6666666666666666}
epoch 8
39.68655300140381
validation set
{'acc': 0.72307694, 'prec0': 0.81395346, 'prec1': 0.54545456, 'rec0': 0.7777778, 'rec1': 0.6, 'auroc': 0.7244444444444444, 'auprc': 0.6121386706271323, 'minpse': 0.55}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9, 'prec1': 0.59090906, 'rec0': 0.8333333, 'rec1': 0.7222222, 'auroc': 0.8065843621399177, 'auprc': 0.4521949028071851, 'minpse': 0.6086956521739131}
epoch 9
42.738466903567314
validation set
{'acc': 0.8, 'prec0': 0.8076923, 'prec1': 0.7692308, 'rec0': 0.93333334, 'rec1': 0.5, 'auroc': 0.7622222222222221, 'auprc': 0.7006797759683392, 'minpse': 0.5714285714285714}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.86885244, 'prec1': 0.90909094, 'rec0': 0.9814815, 'rec1': 0.5555556, 'auroc': 0.9053497942386831, 'auprc': 0.8187816272115789, 'minpse': 0.6666666666666666}
epoch 10
36.60661709308624
validation set
{'acc': 0.7076923, 'prec0': 0.8611111, 'prec1': 0.51724136, 'rec0': 0.6888889, 'rec1': 0.75, 'auroc': 0.7600000000000001, 'auprc': 0.6644162303448287, 'minpse': 0.55}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9166667, 'prec1': 0.5833333, 'rec0': 0.8148148, 'rec1': 0.7777778, 'auroc': 0.8590534979423868, 'auprc': 0.7870232068094984, 'minpse': 0.7777777777777778}
epoch 11
32.64244186878204
validation set
{'acc': 0.8, 'prec0': 0.8333333, 'prec1': 0.7058824, 'rec0': 0.8888889, 'rec1': 0.6, 'auroc': 0.7533333333333333, 'auprc': 0.704007046770503, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8596491, 'prec1': 0.6666667, 'rec0': 0.9074074, 'rec1': 0.5555556, 'auroc': 0.8806584362139918, 'auprc': 0.7415981452035425, 'minpse': 0.6842105263157895}
epoch 12
33.58002272248268
validation set
{'acc': 0.7846154, 'prec0': 0.84444445, 'prec1': 0.65, 'rec0': 0.84444445, 'rec1': 0.65, 'auroc': 0.7355555555555555, 'auprc': 0.6800547933355823, 'minpse': 0.65}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.8888889, 'prec1': 0.6666667, 'rec0': 0.8888889, 'rec1': 0.6666667, 'auroc': 0.8240740740740741, 'auprc': 0.735757048938187, 'minpse': 0.6842105263157895}
epoch 13
36.62587530910969
validation set
{'acc': 0.72307694, 'prec0': 0.90909094, 'prec1': 0.53125, 'rec0': 0.6666667, 'rec1': 0.85, 'auroc': 0.7777777777777778, 'auprc': 0.7045711486805251, 'minpse': 0.5833333333333334}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.9302326, 'prec1': 0.51724136, 'rec0': 0.7407407, 'rec1': 0.8333333, 'auroc': 0.8590534979423868, 'auprc': 0.75137443175699, 'minpse': 0.6111111111111112}
epoch 14
37.48200085759163
validation set
{'acc': 0.72307694, 'prec0': 0.90909094, 'prec1': 0.53125, 'rec0': 0.6666667, 'rec1': 0.85, 'auroc': 0.7866666666666666, 'auprc': 0.6823258324986099, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.8913044, 'prec1': 0.5, 'rec0': 0.7592593, 'rec1': 0.7222222, 'auroc': 0.7818930041152263, 'auprc': 0.6840875530234138, 'minpse': 0.6666666666666666}
epoch 15
33.52607896924019
validation set
{'acc': 0.84615386, 'prec0': 0.8181818, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.5, 'auroc': 0.7711111111111112, 'auprc': 0.7386178059608082, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.828125, 'prec1': 0.875, 'rec0': 0.9814815, 'rec1': 0.3888889, 'auroc': 0.8837448559670782, 'auprc': 0.7628989042951133, 'minpse': 0.631578947368421}
epoch 16
31.70709800720215
validation set
{'acc': 0.73846155, 'prec0': 0.8684211, 'prec1': 0.5555556, 'rec0': 0.73333335, 'rec1': 0.75, 'auroc': 0.7233333333333334, 'auprc': 0.6659399926376787, 'minpse': 0.5833333333333334}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9166667, 'prec1': 0.5833333, 'rec0': 0.8148148, 'rec1': 0.7777778, 'auroc': 0.8755144032921811, 'auprc': 0.770422738998231, 'minpse': 0.6842105263157895}
epoch 17
32.53072714805603
validation set
{'acc': 0.7846154, 'prec0': 0.82978725, 'prec1': 0.6666667, 'rec0': 0.8666667, 'rec1': 0.6, 'auroc': 0.7011111111111111, 'auprc': 0.5374913027124795, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8305085, 'prec1': 0.61538464, 'rec0': 0.9074074, 'rec1': 0.44444445, 'auroc': 0.7191358024691358, 'auprc': 0.5310617935152194, 'minpse': 0.5}
epoch 18
28.426252096891403
validation set
{'acc': 0.7692308, 'prec0': 0.8, 'prec1': 0.6666667, 'rec0': 0.8888889, 'rec1': 0.5, 'auroc': 0.7233333333333334, 'auprc': 0.6320471556788052, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.8333333, 'prec1': 0.6666667, 'rec0': 0.9259259, 'rec1': 0.44444445, 'auroc': 0.8487654320987654, 'auprc': 0.578417084845425, 'minpse': 0.6190476190476191}
epoch 19
27.787340387701988
validation set
{'acc': 0.7846154, 'prec0': 0.7924528, 'prec1': 0.75, 'rec0': 0.93333334, 'rec1': 0.45, 'auroc': 0.7244444444444443, 'auprc': 0.6482310592913528, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.8448276, 'prec1': 0.64285713, 'rec0': 0.9074074, 'rec1': 0.5, 'auroc': 0.8415637860082305, 'auprc': 0.6591152451948609, 'minpse': 0.6666666666666666}
epoch 20
27.589958012104034
validation set
{'acc': 0.8153846, 'prec0': 0.8235294, 'prec1': 0.78571427, 'rec0': 0.93333334, 'rec1': 0.55, 'auroc': 0.718888888888889, 'auprc': 0.6809192908275719, 'minpse': 0.55}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8596491, 'prec1': 0.6666667, 'rec0': 0.9074074, 'rec1': 0.5555556, 'auroc': 0.8775720164609053, 'auprc': 0.7291322452480099, 'minpse': 0.7}
epoch 21
29.259047031402588
validation set
{'acc': 0.7846154, 'prec0': 0.82978725, 'prec1': 0.6666667, 'rec0': 0.8666667, 'rec1': 0.6, 'auroc': 0.7344444444444443, 'auprc': 0.622855275647407, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.84210527, 'prec1': 0.6, 'rec0': 0.8888889, 'rec1': 0.5, 'auroc': 0.8004115226337449, 'auprc': 0.5614119802501866, 'minpse': 0.5555555555555556}
epoch 22
25.474825859069824
validation set
{'acc': 0.6769231, 'prec0': 0.875, 'prec1': 0.4848485, 'rec0': 0.62222224, 'rec1': 0.8, 'auroc': 0.7533333333333334, 'auprc': 0.7005839622621768, 'minpse': 0.5714285714285714}
Mortality Prediction on the test set
{'acc': 0.6666667, 'prec0': 0.8947368, 'prec1': 0.4117647, 'rec0': 0.6296296, 'rec1': 0.7777778, 'auroc': 0.7633744855967078, 'auprc': 0.5582357246719224, 'minpse': 0.6111111111111112}
epoch 23
32.93676891922951
validation set
{'acc': 0.8153846, 'prec0': 0.8113208, 'prec1': 0.8333333, 'rec0': 0.95555556, 'rec1': 0.5, 'auroc': 0.7555555555555555, 'auprc': 0.594678464221484, 'minpse': 0.55}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8360656, 'prec1': 0.72727275, 'rec0': 0.9444444, 'rec1': 0.44444445, 'auroc': 0.905349794238683, 'auprc': 0.7689544741273329, 'minpse': 0.7222222222222222}
epoch 24
29.69164565205574
validation set
{'acc': 0.75384617, 'prec0': 0.85365856, 'prec1': 0.5833333, 'rec0': 0.7777778, 'rec1': 0.7, 'auroc': 0.758888888888889, 'auprc': 0.7059863241388743, 'minpse': 0.5833333333333334}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8979592, 'prec1': 0.5652174, 'rec0': 0.8148148, 'rec1': 0.7222222, 'auroc': 0.8786008230452675, 'auprc': 0.7082622284280164, 'minpse': 0.631578947368421}
epoch 25
29.58533425629139
validation set
{'acc': 0.6769231, 'prec0': 0.9285714, 'prec1': 0.4864865, 'rec0': 0.5777778, 'rec1': 0.9, 'auroc': 0.778888888888889, 'auprc': 0.69778095692715, 'minpse': 0.5416666666666666}
Mortality Prediction on the test set
{'acc': 0.6388889, 'prec0': 0.9117647, 'prec1': 0.39473686, 'rec0': 0.5740741, 'rec1': 0.8333333, 'auroc': 0.8374485596707818, 'auprc': 0.7522482774318511, 'minpse': 0.7368421052631579}
epoch 26
26.564184859395027
validation set
{'acc': 0.7076923, 'prec0': 0.79545456, 'prec1': 0.52380955, 'rec0': 0.7777778, 'rec1': 0.55, 'auroc': 0.6044444444444445, 'auprc': 0.35656048330044066, 'minpse': 0.5238095238095238}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.877551, 'prec1': 0.5217391, 'rec0': 0.7962963, 'rec1': 0.6666667, 'auroc': 0.772633744855967, 'auprc': 0.4222274746455403, 'minpse': 0.5454545454545454}
epoch 27
30.233846977353096
validation set
{'acc': 0.75384617, 'prec0': 0.8717949, 'prec1': 0.5769231, 'rec0': 0.75555557, 'rec1': 0.75, 'auroc': 0.7755555555555556, 'auprc': 0.6300616243588194, 'minpse': 0.6190476190476191}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.877551, 'prec1': 0.5217391, 'rec0': 0.7962963, 'rec1': 0.6666667, 'auroc': 0.8539094650205761, 'auprc': 0.6649375006720448, 'minpse': 0.5789473684210527}
epoch 28
30.281602025032043
validation set
{'acc': 0.75384617, 'prec0': 0.8372093, 'prec1': 0.59090906, 'rec0': 0.8, 'rec1': 0.65, 'auroc': 0.741111111111111, 'auprc': 0.6149179393450653, 'minpse': 0.5909090909090909}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9, 'prec1': 0.59090906, 'rec0': 0.8333333, 'rec1': 0.7222222, 'auroc': 0.8775720164609054, 'auprc': 0.719191975797663, 'minpse': 0.6666666666666666}
epoch 29
28.554743994027376
validation set
{'acc': 0.7076923, 'prec0': 0.90625, 'prec1': 0.5151515, 'rec0': 0.64444447, 'rec1': 0.85, 'auroc': 0.7799999999999999, 'auprc': 0.6190947217948038, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.9111111, 'prec1': 0.5185185, 'rec0': 0.7592593, 'rec1': 0.7777778, 'auroc': 0.8446502057613169, 'auprc': 0.5692293130195928, 'minpse': 0.6666666666666666}
epoch 30
24.619497667998075
validation set
{'acc': 0.72307694, 'prec0': 0.8857143, 'prec1': 0.53333336, 'rec0': 0.6888889, 'rec1': 0.8, 'auroc': 0.7911111111111111, 'auprc': 0.7007510336007967, 'minpse': 0.55}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.9318182, 'prec1': 0.53571427, 'rec0': 0.7592593, 'rec1': 0.8333333, 'auroc': 0.8786008230452675, 'auprc': 0.7285406576315805, 'minpse': 0.6363636363636364}
epoch 31
24.570229426026344
validation set
{'acc': 0.72307694, 'prec0': 0.8857143, 'prec1': 0.53333336, 'rec0': 0.6888889, 'rec1': 0.8, 'auroc': 0.7877777777777778, 'auprc': 0.699723333273663, 'minpse': 0.5714285714285714}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.95348835, 'prec1': 0.55172414, 'rec0': 0.7592593, 'rec1': 0.8888889, 'auroc': 0.8713991769547325, 'auprc': 0.7709364175032806, 'minpse': 0.7222222222222222}
epoch 32
23.513013571500778
validation set
{'acc': 0.8, 'prec0': 0.82, 'prec1': 0.73333335, 'rec0': 0.9111111, 'rec1': 0.55, 'auroc': 0.7144444444444444, 'auprc': 0.662335051812255, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.84210527, 'prec1': 0.6, 'rec0': 0.8888889, 'rec1': 0.5, 'auroc': 0.8179012345679012, 'auprc': 0.6812733163884512, 'minpse': 0.6111111111111112}
epoch 33
21.900045707821846
validation set
{'acc': 0.8, 'prec0': 0.82, 'prec1': 0.73333335, 'rec0': 0.9111111, 'rec1': 0.55, 'auroc': 0.7611111111111111, 'auprc': 0.6729803250979822, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.84210527, 'prec1': 0.6, 'rec0': 0.8888889, 'rec1': 0.5, 'auroc': 0.8209876543209876, 'auprc': 0.642811993340419, 'minpse': 0.5789473684210527}
epoch 34
22.922104701399803
validation set
{'acc': 0.8, 'prec0': 0.8333333, 'prec1': 0.7058824, 'rec0': 0.8888889, 'rec1': 0.6, 'auroc': 0.7377777777777778, 'auprc': 0.6376210010432186, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.88, 'prec1': 0.54545456, 'rec0': 0.8148148, 'rec1': 0.6666667, 'auroc': 0.7788065843621399, 'auprc': 0.6825122143199289, 'minpse': 0.6111111111111112}
epoch 35
23.89933294057846
validation set
{'acc': 0.72307694, 'prec0': 0.90909094, 'prec1': 0.53125, 'rec0': 0.6666667, 'rec1': 0.85, 'auroc': 0.7733333333333333, 'auprc': 0.6757505954168809, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.9148936, 'prec1': 0.56, 'rec0': 0.7962963, 'rec1': 0.7777778, 'auroc': 0.8364197530864197, 'auprc': 0.6256209456920538, 'minpse': 0.6}
epoch 36
21.29776258766651
validation set
{'acc': 0.72307694, 'prec0': 0.8857143, 'prec1': 0.53333336, 'rec0': 0.6888889, 'rec1': 0.8, 'auroc': 0.7799999999999999, 'auprc': 0.6851815064229532, 'minpse': 0.5833333333333334}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.9130435, 'prec1': 0.53846157, 'rec0': 0.7777778, 'rec1': 0.7777778, 'auroc': 0.8662551440329218, 'auprc': 0.783418556801059, 'minpse': 0.7222222222222222}
epoch 37
20.9416521564126
validation set
{'acc': 0.8, 'prec0': 0.8333333, 'prec1': 0.7058824, 'rec0': 0.8888889, 'rec1': 0.6, 'auroc': 0.7744444444444445, 'auprc': 0.6529269044148213, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.8363636, 'prec1': 0.5294118, 'rec0': 0.8518519, 'rec1': 0.5, 'auroc': 0.7746913580246914, 'auprc': 0.5906195540668807, 'minpse': 0.5555555555555556}
epoch 38
21.996346026659012
validation set
{'acc': 0.8, 'prec0': 0.82, 'prec1': 0.73333335, 'rec0': 0.9111111, 'rec1': 0.55, 'auroc': 0.758888888888889, 'auprc': 0.6791945929621644, 'minpse': 0.55}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8545455, 'prec1': 0.5882353, 'rec0': 0.8703704, 'rec1': 0.5555556, 'auroc': 0.8559670781893004, 'auprc': 0.7000089530755125, 'minpse': 0.631578947368421}
epoch 39
19.541340187191963
validation set
{'acc': 0.75384617, 'prec0': 0.82222223, 'prec1': 0.6, 'rec0': 0.82222223, 'rec1': 0.6, 'auroc': 0.7577777777777778, 'auprc': 0.6593101270815178, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.9019608, 'prec1': 0.61904764, 'rec0': 0.8518519, 'rec1': 0.7222222, 'auroc': 0.8868312757201646, 'auprc': 0.7485024526429763, 'minpse': 0.6666666666666666}
Reset trainable parameters of layer = Conv2d(1, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Linear(in_features=512, out_features=1000, bias=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Conv2d(64, 384, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=7200, bias=True)
Reset trainable parameters of layer = Linear(in_features=1000, out_features=6272, bias=True)
Reset trainable parameters of layer = Linear(in_features=7200, out_features=3600, bias=True)
Reset trainable parameters of layer = Linear(in_features=3600, out_features=1800, bias=True)
Reset trainable parameters of layer = Linear(in_features=1800, out_features=400, bias=True)
Reset trainable parameters of layer = Linear(in_features=400, out_features=1, bias=True)
for distribution val
type 0= 52 type 1= 13
for distribution test
type 0= 54 type 1= 18
epoch 0
50.86614954471588
validation set
{'acc': 0.9076923, 'prec0': 1.0, 'prec1': 0.68421054, 'rec0': 0.88461536, 'rec1': 1.0, 'auroc': 0.9526627218934911, 'auprc': 0.7489809573877209, 'minpse': 0.7333333333333333}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9347826, 'prec1': 0.5769231, 'rec0': 0.7962963, 'rec1': 0.8333333, 'auroc': 0.8343621399176954, 'auprc': 0.534264665229025, 'minpse': 0.6111111111111112}
epoch 1
48.674888610839844
validation set
{'acc': 0.73846155, 'prec0': 1.0, 'prec1': 0.43333334, 'rec0': 0.6730769, 'rec1': 1.0, 'auroc': 0.8920118343195267, 'auprc': 0.6182699715138897, 'minpse': 0.6923076923076923}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.877551, 'prec1': 0.5217391, 'rec0': 0.7962963, 'rec1': 0.6666667, 'auroc': 0.787037037037037, 'auprc': 0.6964540183703639, 'minpse': 0.6666666666666666}
epoch 2
47.84229701757431
validation set
{'acc': 0.8923077, 'prec0': 1.0, 'prec1': 0.65, 'rec0': 0.86538464, 'rec1': 1.0, 'auroc': 0.9644970414201184, 'auprc': 0.8429719628100194, 'minpse': 0.8461538461538461}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.93333334, 'prec1': 0.5555556, 'rec0': 0.7777778, 'rec1': 0.8333333, 'auroc': 0.8950617283950618, 'auprc': 0.8062221092849451, 'minpse': 0.6666666666666666}
epoch 3
43.004967629909515
validation set
{'acc': 0.9692308, 'prec0': 1.0, 'prec1': 0.8666667, 'rec0': 0.96153843, 'rec1': 1.0, 'auroc': 0.9748520710059172, 'auprc': 0.8452572000648924, 'minpse': 0.8666666666666667}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.83928573, 'prec1': 0.5625, 'rec0': 0.8703704, 'rec1': 0.5, 'auroc': 0.7767489711934157, 'auprc': 0.6599003763376612, 'minpse': 0.6}
epoch 4
45.46052724123001
validation set
{'acc': 0.93846154, 'prec0': 0.96153843, 'prec1': 0.84615386, 'rec0': 0.96153843, 'rec1': 0.84615386, 'auroc': 0.9363905325443788, 'auprc': 0.7821169517190738, 'minpse': 0.8461538461538461}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8596491, 'prec1': 0.6666667, 'rec0': 0.9074074, 'rec1': 0.5555556, 'auroc': 0.8395061728395061, 'auprc': 0.7433921764439427, 'minpse': 0.5714285714285714}
epoch 5
40.04595106840134
validation set
{'acc': 0.8923077, 'prec0': 1.0, 'prec1': 0.65, 'rec0': 0.86538464, 'rec1': 1.0, 'auroc': 0.9615384615384616, 'auprc': 0.8478190163412835, 'minpse': 0.8461538461538461}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.87234044, 'prec1': 0.48, 'rec0': 0.7592593, 'rec1': 0.6666667, 'auroc': 0.8384773662551441, 'auprc': 0.6933674784214467, 'minpse': 0.55}
epoch 6
41.91891801357269
validation set
{'acc': 0.8153846, 'prec0': 1.0, 'prec1': 0.52, 'rec0': 0.7692308, 'rec1': 1.0, 'auroc': 0.9437869822485206, 'auprc': 0.8483664456458575, 'minpse': 0.6923076923076923}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.86, 'prec1': 0.5, 'rec0': 0.7962963, 'rec1': 0.6111111, 'auroc': 0.7242798353909465, 'auprc': 0.5452215309428814, 'minpse': 0.5555555555555556}
epoch 7
42.70670372247696
validation set
{'acc': 0.95384616, 'prec0': 0.9622642, 'prec1': 0.9166667, 'rec0': 0.9807692, 'rec1': 0.84615386, 'auroc': 0.9585798816568047, 'auprc': 0.8247056084012605, 'minpse': 0.8461538461538461}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.82539684, 'prec1': 0.7777778, 'rec0': 0.962963, 'rec1': 0.3888889, 'auroc': 0.8189300411522633, 'auprc': 0.6998159743616013, 'minpse': 0.7222222222222222}
epoch 8
36.77991235256195
validation set
{'acc': 0.73846155, 'prec0': 1.0, 'prec1': 0.43333334, 'rec0': 0.6730769, 'rec1': 1.0, 'auroc': 0.8979289940828403, 'auprc': 0.6928522018887131, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.625, 'prec0': 0.84615386, 'prec1': 0.36363637, 'rec0': 0.6111111, 'rec1': 0.6666667, 'auroc': 0.7078189300411523, 'auprc': 0.6393046418086895, 'minpse': 0.6111111111111112}
epoch 9
38.626074373722076
validation set
{'acc': 0.8923077, 'prec0': 0.9591837, 'prec1': 0.6875, 'rec0': 0.90384614, 'rec1': 0.84615386, 'auroc': 0.9378698224852071, 'auprc': 0.795728733517195, 'minpse': 0.7692307692307693}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.8888889, 'prec1': 0.6666667, 'rec0': 0.8888889, 'rec1': 0.6666667, 'auroc': 0.8189300411522633, 'auprc': 0.7258227157243489, 'minpse': 0.6666666666666666}
epoch 10
33.71729430556297
validation set
{'acc': 0.8923077, 'prec0': 0.9591837, 'prec1': 0.6875, 'rec0': 0.90384614, 'rec1': 0.84615386, 'auroc': 0.9215976331360947, 'auprc': 0.6994061568469077, 'minpse': 0.6923076923076923}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.84210527, 'prec1': 0.6, 'rec0': 0.8888889, 'rec1': 0.5, 'auroc': 0.7458847736625515, 'auprc': 0.6220280632670798, 'minpse': 0.5789473684210527}
epoch 11
36.3250073492527
validation set
{'acc': 0.86153847, 'prec0': 1.0, 'prec1': 0.59090906, 'rec0': 0.8269231, 'rec1': 1.0, 'auroc': 0.9319526627218935, 'auprc': 0.749735191609745, 'minpse': 0.6428571428571429}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.8490566, 'prec1': 0.5263158, 'rec0': 0.8333333, 'rec1': 0.5555556, 'auroc': 0.7088477366255144, 'auprc': 0.6584927467385026, 'minpse': 0.5555555555555556}
epoch 12
47.5018225312233
validation set
{'acc': 0.9076923, 'prec0': 1.0, 'prec1': 0.68421054, 'rec0': 0.88461536, 'rec1': 1.0, 'auroc': 0.9482248520710059, 'auprc': 0.6706842540910176, 'minpse': 0.7333333333333333}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.88235295, 'prec1': 0.5714286, 'rec0': 0.8333333, 'rec1': 0.6666667, 'auroc': 0.8148148148148149, 'auprc': 0.7131004584833707, 'minpse': 0.6111111111111112}
epoch 13
36.141751527786255
validation set
{'acc': 0.9230769, 'prec0': 0.97959185, 'prec1': 0.75, 'rec0': 0.9230769, 'rec1': 0.9230769, 'auroc': 0.9659763313609467, 'auprc': 0.8386250223206744, 'minpse': 0.8461538461538461}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.877193, 'prec1': 0.73333335, 'rec0': 0.9259259, 'rec1': 0.6111111, 'auroc': 0.8415637860082305, 'auprc': 0.7686912939465762, 'minpse': 0.65}
epoch 14
35.4613853096962
validation set
{'acc': 0.9076923, 'prec0': 0.96, 'prec1': 0.73333335, 'rec0': 0.9230769, 'rec1': 0.84615386, 'auroc': 0.9393491124260356, 'auprc': 0.7024030193762635, 'minpse': 0.7692307692307693}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.8703704, 'prec1': 0.6111111, 'rec0': 0.8703704, 'rec1': 0.6111111, 'auroc': 0.8240740740740742, 'auprc': 0.7112235689768157, 'minpse': 0.6111111111111112}
epoch 15
33.91857489943504
validation set
{'acc': 0.83076924, 'prec0': 1.0, 'prec1': 0.5416667, 'rec0': 0.78846157, 'rec1': 1.0, 'auroc': 0.9186390532544378, 'auprc': 0.6701259623632445, 'minpse': 0.625}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8979592, 'prec1': 0.5652174, 'rec0': 0.8148148, 'rec1': 0.7222222, 'auroc': 0.7664609053497942, 'auprc': 0.6429899620334454, 'minpse': 0.6666666666666666}
epoch 16
33.076533138751984
validation set
{'acc': 0.84615386, 'prec0': 0.97727275, 'prec1': 0.5714286, 'rec0': 0.8269231, 'rec1': 0.9230769, 'auroc': 0.9334319526627219, 'auprc': 0.7972821999951818, 'minpse': 0.6923076923076923}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9, 'prec1': 0.59090906, 'rec0': 0.8333333, 'rec1': 0.7222222, 'auroc': 0.8179012345679012, 'auprc': 0.7517805845136866, 'minpse': 0.7222222222222222}
epoch 17
31.89070388674736
validation set
{'acc': 0.8923077, 'prec0': 0.9591837, 'prec1': 0.6875, 'rec0': 0.90384614, 'rec1': 0.84615386, 'auroc': 0.9230769230769231, 'auprc': 0.6172848839194993, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.877193, 'prec1': 0.73333335, 'rec0': 0.9259259, 'rec1': 0.6111111, 'auroc': 0.7952674897119343, 'auprc': 0.5655823921419785, 'minpse': 0.6111111111111112}
epoch 18
29.399647742509842
validation set
{'acc': 0.86153847, 'prec0': 1.0, 'prec1': 0.59090906, 'rec0': 0.8269231, 'rec1': 1.0, 'auroc': 0.9112426035502958, 'auprc': 0.6185632013061162, 'minpse': 0.6428571428571429}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.85714287, 'prec1': 0.625, 'rec0': 0.8888889, 'rec1': 0.5555556, 'auroc': 0.771604938271605, 'auprc': 0.5981147390137427, 'minpse': 0.6111111111111112}
epoch 19
30.737890362739563
validation set
{'acc': 0.83076924, 'prec0': 1.0, 'prec1': 0.5416667, 'rec0': 0.78846157, 'rec1': 1.0, 'auroc': 0.9467455621301775, 'auprc': 0.7553711658776787, 'minpse': 0.7692307692307693}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.8888889, 'prec1': 0.4814815, 'rec0': 0.7407407, 'rec1': 0.7222222, 'auroc': 0.838477366255144, 'auprc': 0.7417437717799504, 'minpse': 0.6111111111111112}
epoch 20
33.428560987114906
validation set
{'acc': 0.86153847, 'prec0': 0.9777778, 'prec1': 0.6, 'rec0': 0.84615386, 'rec1': 0.9230769, 'auroc': 0.9363905325443787, 'auprc': 0.7227803597397549, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.88461536, 'prec1': 0.6, 'rec0': 0.8518519, 'rec1': 0.6666667, 'auroc': 0.7623456790123457, 'auprc': 0.7350131822343782, 'minpse': 0.6666666666666666}
epoch 21
28.63337016105652
validation set
{'acc': 0.84615386, 'prec0': 1.0, 'prec1': 0.5652174, 'rec0': 0.8076923, 'rec1': 1.0, 'auroc': 0.9363905325443788, 'auprc': 0.7458197447213983, 'minpse': 0.7692307692307693}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.877551, 'prec1': 0.5217391, 'rec0': 0.7962963, 'rec1': 0.6666667, 'auroc': 0.7798353909465021, 'auprc': 0.6783865255004743, 'minpse': 0.6111111111111112}
epoch 22
28.479272931814194
validation set
{'acc': 0.7846154, 'prec0': 1.0, 'prec1': 0.4814815, 'rec0': 0.7307692, 'rec1': 1.0, 'auroc': 0.8949704142011834, 'auprc': 0.5355871637007026, 'minpse': 0.6153846153846154}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.8913044, 'prec1': 0.5, 'rec0': 0.7592593, 'rec1': 0.7222222, 'auroc': 0.8096707818930041, 'auprc': 0.7284435992691864, 'minpse': 0.6111111111111112}
epoch 23
32.11551237106323
validation set
{'acc': 0.84615386, 'prec0': 0.97727275, 'prec1': 0.5714286, 'rec0': 0.8269231, 'rec1': 0.9230769, 'auroc': 0.9142011834319527, 'auprc': 0.6954550777074202, 'minpse': 0.6428571428571429}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.877551, 'prec1': 0.5217391, 'rec0': 0.7962963, 'rec1': 0.6666667, 'auroc': 0.7993827160493827, 'auprc': 0.6613701484755049, 'minpse': 0.631578947368421}
epoch 24
27.56838685274124
validation set
{'acc': 0.83076924, 'prec0': 0.9767442, 'prec1': 0.54545456, 'rec0': 0.8076923, 'rec1': 0.9230769, 'auroc': 0.8772189349112426, 'auprc': 0.5217412261470371, 'minpse': 0.5714285714285714}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.88235295, 'prec1': 0.5714286, 'rec0': 0.8333333, 'rec1': 0.6666667, 'auroc': 0.7962962962962964, 'auprc': 0.5680047334661061, 'minpse': 0.6666666666666666}
epoch 25
23.73898383975029
validation set
{'acc': 0.8769231, 'prec0': 0.9782609, 'prec1': 0.6315789, 'rec0': 0.86538464, 'rec1': 0.9230769, 'auroc': 0.9349112426035502, 'auprc': 0.6484737599068392, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8867925, 'prec1': 0.6315789, 'rec0': 0.8703704, 'rec1': 0.6666667, 'auroc': 0.7705761316872428, 'auprc': 0.5989311042397487, 'minpse': 0.6666666666666666}
epoch 26
34.435539335012436
validation set
{'acc': 0.8769231, 'prec0': 1.0, 'prec1': 0.61904764, 'rec0': 0.84615386, 'rec1': 1.0, 'auroc': 0.9467455621301775, 'auprc': 0.7067663231690382, 'minpse': 0.7857142857142857}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8867925, 'prec1': 0.6315789, 'rec0': 0.8703704, 'rec1': 0.6666667, 'auroc': 0.8477366255144033, 'auprc': 0.7560275604209631, 'minpse': 0.631578947368421}
epoch 27
30.158386394381523
validation set
{'acc': 0.8923077, 'prec0': 1.0, 'prec1': 0.65, 'rec0': 0.86538464, 'rec1': 1.0, 'auroc': 0.9585798816568047, 'auprc': 0.8451785828616623, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.875, 'prec1': 0.5, 'rec0': 0.7777778, 'rec1': 0.6666667, 'auroc': 0.838477366255144, 'auprc': 0.7322365640361568, 'minpse': 0.6666666666666666}
epoch 28
24.53490775823593
validation set
{'acc': 0.86153847, 'prec0': 1.0, 'prec1': 0.59090906, 'rec0': 0.8269231, 'rec1': 1.0, 'auroc': 0.9423076923076923, 'auprc': 0.7766465344147531, 'minpse': 0.6923076923076923}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.92, 'prec1': 0.6363636, 'rec0': 0.8518519, 'rec1': 0.7777778, 'auroc': 0.881687242798354, 'auprc': 0.7687357987487264, 'minpse': 0.7368421052631579}
epoch 29
27.158602505922318
validation set
{'acc': 0.8769231, 'prec0': 1.0, 'prec1': 0.61904764, 'rec0': 0.84615386, 'rec1': 1.0, 'auroc': 0.9275147928994083, 'auprc': 0.7046492600701937, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.86, 'prec1': 0.5, 'rec0': 0.7962963, 'rec1': 0.6111111, 'auroc': 0.8209876543209876, 'auprc': 0.6899038944588615, 'minpse': 0.5789473684210527}
epoch 30
21.381731882691383
validation set
{'acc': 0.84615386, 'prec0': 0.95652175, 'prec1': 0.57894737, 'rec0': 0.84615386, 'rec1': 0.84615386, 'auroc': 0.871301775147929, 'auprc': 0.6413504724296488, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8727273, 'prec1': 0.64705884, 'rec0': 0.8888889, 'rec1': 0.6111111, 'auroc': 0.7973251028806585, 'auprc': 0.6845668713901127, 'minpse': 0.6111111111111112}
epoch 31
24.26153540611267
validation set
{'acc': 0.8153846, 'prec0': 0.95454544, 'prec1': 0.52380955, 'rec0': 0.8076923, 'rec1': 0.84615386, 'auroc': 0.7914201183431953, 'auprc': 0.5194869898522348, 'minpse': 0.6153846153846154}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8727273, 'prec1': 0.64705884, 'rec0': 0.8888889, 'rec1': 0.6111111, 'auroc': 0.8251028806584363, 'auprc': 0.7113625647805256, 'minpse': 0.6111111111111112}
epoch 32
27.92653077840805
validation set
{'acc': 0.8153846, 'prec0': 1.0, 'prec1': 0.52, 'rec0': 0.7692308, 'rec1': 1.0, 'auroc': 0.923076923076923, 'auprc': 0.7150988678130621, 'minpse': 0.6923076923076923}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.877551, 'prec1': 0.5217391, 'rec0': 0.7962963, 'rec1': 0.6666667, 'auroc': 0.779835390946502, 'auprc': 0.5651083717220102, 'minpse': 0.6111111111111112}
epoch 33
21.8506111651659
validation set
{'acc': 0.83076924, 'prec0': 1.0, 'prec1': 0.5416667, 'rec0': 0.78846157, 'rec1': 1.0, 'auroc': 0.9142011834319526, 'auprc': 0.5989136108371278, 'minpse': 0.6428571428571429}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.8301887, 'prec1': 0.47368422, 'rec0': 0.8148148, 'rec1': 0.5, 'auroc': 0.7870370370370371, 'auprc': 0.6875856215652629, 'minpse': 0.5}
epoch 34
26.638882130384445
validation set
{'acc': 0.83076924, 'prec0': 0.9767442, 'prec1': 0.54545456, 'rec0': 0.8076923, 'rec1': 0.9230769, 'auroc': 0.9053254437869822, 'auprc': 0.5569179920394495, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.8518519, 'prec1': 0.5555556, 'rec0': 0.8518519, 'rec1': 0.5555556, 'auroc': 0.7211934156378601, 'auprc': 0.6271651378031372, 'minpse': 0.5555555555555556}
epoch 35
23.70618064701557
validation set
{'acc': 0.86153847, 'prec0': 0.9574468, 'prec1': 0.6111111, 'rec0': 0.86538464, 'rec1': 0.84615386, 'auroc': 0.7928994082840236, 'auprc': 0.5578797058350333, 'minpse': 0.6111111111111112}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.83928573, 'prec1': 0.5625, 'rec0': 0.8703704, 'rec1': 0.5, 'auroc': 0.7098765432098766, 'auprc': 0.5620131461627184, 'minpse': 0.5555555555555556}
epoch 36
38.88171027600765
validation set
{'acc': 0.8, 'prec0': 1.0, 'prec1': 0.5, 'rec0': 0.75, 'rec1': 1.0, 'auroc': 0.900887573964497, 'auprc': 0.6413419062503731, 'minpse': 0.6153846153846154}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.8333333, 'prec1': 0.5, 'rec0': 0.8333333, 'rec1': 0.5, 'auroc': 0.8281893004115226, 'auprc': 0.6663043297089586, 'minpse': 0.5833333333333334}
epoch 37
27.194545105099678
validation set
{'acc': 0.93846154, 'prec0': 0.9444444, 'prec1': 0.90909094, 'rec0': 0.9807692, 'rec1': 0.7692308, 'auroc': 0.9053254437869822, 'auprc': 0.7580758877317582, 'minpse': 0.7692307692307693}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.852459, 'prec1': 0.8181818, 'rec0': 0.962963, 'rec1': 0.5, 'auroc': 0.8034979423868313, 'auprc': 0.7168022368355458, 'minpse': 0.6666666666666666}
epoch 38
24.073144003748894
validation set
{'acc': 0.9076923, 'prec0': 0.9423077, 'prec1': 0.7692308, 'rec0': 0.9423077, 'rec1': 0.7692308, 'auroc': 0.8934911242603549, 'auprc': 0.6493931680621676, 'minpse': 0.7692307692307693}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.852459, 'prec1': 0.8181818, 'rec0': 0.962963, 'rec1': 0.5, 'auroc': 0.8312757201646092, 'auprc': 0.7246682775902219, 'minpse': 0.631578947368421}
epoch 39
24.12268003821373
validation set
{'acc': 0.93846154, 'prec0': 0.9444444, 'prec1': 0.90909094, 'rec0': 0.9807692, 'rec1': 0.7692308, 'auroc': 0.9201183431952663, 'auprc': 0.7903434528434528, 'minpse': 0.7692307692307693}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.84375, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.44444445, 'auroc': 0.7993827160493827, 'auprc': 0.7340437853844217, 'minpse': 0.6666666666666666}
Reset trainable parameters of layer = Conv2d(1, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Linear(in_features=512, out_features=1000, bias=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Conv2d(64, 384, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=7200, bias=True)
Reset trainable parameters of layer = Linear(in_features=1000, out_features=6272, bias=True)
Reset trainable parameters of layer = Linear(in_features=7200, out_features=3600, bias=True)
Reset trainable parameters of layer = Linear(in_features=3600, out_features=1800, bias=True)
Reset trainable parameters of layer = Linear(in_features=1800, out_features=400, bias=True)
Reset trainable parameters of layer = Linear(in_features=400, out_features=1, bias=True)
for distribution val
type 0= 53 type 1= 12
for distribution test
type 0= 54 type 1= 18
epoch 0
55.32361322641373
validation set
{'acc': 0.86153847, 'prec0': 0.9583333, 'prec1': 0.5882353, 'rec0': 0.8679245, 'rec1': 0.8333333, 'auroc': 0.8569182389937107, 'auprc': 0.6911296122046834, 'minpse': 0.6153846153846154}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.9411765, 'prec1': 0.71428573, 'rec0': 0.8888889, 'rec1': 0.8333333, 'auroc': 0.9032921810699588, 'auprc': 0.8184914805184428, 'minpse': 0.7777777777777778}
epoch 1
51.31769037246704
validation set
{'acc': 0.86153847, 'prec0': 0.9583333, 'prec1': 0.5882353, 'rec0': 0.8679245, 'rec1': 0.8333333, 'auroc': 0.8883647798742139, 'auprc': 0.6211409146442943, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8867925, 'prec1': 0.6315789, 'rec0': 0.8703704, 'rec1': 0.6666667, 'auroc': 0.8847736625514403, 'auprc': 0.7836391169138399, 'minpse': 0.6666666666666666}
epoch 2
45.18529713153839
validation set
{'acc': 0.86153847, 'prec0': 0.9583333, 'prec1': 0.5882353, 'rec0': 0.8679245, 'rec1': 0.8333333, 'auroc': 0.8616352201257862, 'auprc': 0.6189484782670412, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.89361703, 'prec1': 0.52, 'rec0': 0.7777778, 'rec1': 0.7222222, 'auroc': 0.8641975308641975, 'auprc': 0.7383065331633472, 'minpse': 0.6666666666666666}
epoch 3
44.675944328308105
validation set
{'acc': 0.84615386, 'prec0': 0.93877554, 'prec1': 0.5625, 'rec0': 0.8679245, 'rec1': 0.75, 'auroc': 0.8113207547169812, 'auprc': 0.6183752410975546, 'minpse': 0.5833333333333334}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.9056604, 'prec1': 0.68421054, 'rec0': 0.8888889, 'rec1': 0.7222222, 'auroc': 0.868312757201646, 'auprc': 0.7613075761226868, 'minpse': 0.7222222222222222}
epoch 4
44.15357056260109
validation set
{'acc': 0.83076924, 'prec0': 0.97727275, 'prec1': 0.52380955, 'rec0': 0.8113208, 'rec1': 0.9166667, 'auroc': 0.8632075471698114, 'auprc': 0.712459990309255, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.95348835, 'prec1': 0.55172414, 'rec0': 0.7592593, 'rec1': 0.8888889, 'auroc': 0.9002057613168725, 'auprc': 0.7968743887184049, 'minpse': 0.6666666666666666}
epoch 5
45.23682510852814
validation set
{'acc': 0.84615386, 'prec0': 0.9777778, 'prec1': 0.55, 'rec0': 0.8301887, 'rec1': 0.9166667, 'auroc': 0.8679245283018868, 'auprc': 0.6330111464544514, 'minpse': 0.6153846153846154}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.90697676, 'prec1': 0.4827586, 'rec0': 0.7222222, 'rec1': 0.7777778, 'auroc': 0.815843621399177, 'auprc': 0.6305120490204819, 'minpse': 0.631578947368421}
epoch 6
44.250934183597565
validation set
{'acc': 0.84615386, 'prec0': 0.9574468, 'prec1': 0.5555556, 'rec0': 0.8490566, 'rec1': 0.8333333, 'auroc': 0.8270440251572327, 'auprc': 0.6586211640572265, 'minpse': 0.5833333333333334}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.9183673, 'prec1': 0.6086956, 'rec0': 0.8333333, 'rec1': 0.7777778, 'auroc': 0.8405349794238683, 'auprc': 0.7120012070012341, 'minpse': 0.6666666666666666}
epoch 7
40.793779730796814
validation set
{'acc': 0.8153846, 'prec0': 0.9767442, 'prec1': 0.5, 'rec0': 0.7924528, 'rec1': 0.9166667, 'auroc': 0.8364779874213837, 'auprc': 0.5749658878545245, 'minpse': 0.5833333333333334}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.95238096, 'prec1': 0.53333336, 'rec0': 0.7407407, 'rec1': 0.8888889, 'auroc': 0.8919753086419754, 'auprc': 0.7968914432344418, 'minpse': 0.7222222222222222}
epoch 8
37.29476499557495
validation set
{'acc': 0.72307694, 'prec0': 0.972973, 'prec1': 0.39285713, 'rec0': 0.6792453, 'rec1': 0.9166667, 'auroc': 0.8176100628930818, 'auprc': 0.6114019255100388, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.6805556, 'prec0': 0.94285715, 'prec1': 0.43243244, 'rec0': 0.6111111, 'rec1': 0.8888889, 'auroc': 0.860082304526749, 'auprc': 0.7574138412342782, 'minpse': 0.631578947368421}
epoch 9
36.176044285297394
validation set
{'acc': 0.8153846, 'prec0': 0.95555556, 'prec1': 0.5, 'rec0': 0.8113208, 'rec1': 0.8333333, 'auroc': 0.800314465408805, 'auprc': 0.5480925593763921, 'minpse': 0.5833333333333334}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.8888889, 'prec1': 0.4814815, 'rec0': 0.7407407, 'rec1': 0.7222222, 'auroc': 0.815843621399177, 'auprc': 0.6946290281937034, 'minpse': 0.6111111111111112}
epoch 10
39.04714512825012
validation set
{'acc': 0.75384617, 'prec0': 0.9302326, 'prec1': 0.4090909, 'rec0': 0.754717, 'rec1': 0.75, 'auroc': 0.7845911949685536, 'auprc': 0.6020406354135007, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.6805556, 'prec0': 0.8780488, 'prec1': 0.41935483, 'rec0': 0.6666667, 'rec1': 0.7222222, 'auroc': 0.7839506172839507, 'auprc': 0.6616049405437474, 'minpse': 0.5555555555555556}
epoch 11
32.04888999462128
validation set
{'acc': 0.7846154, 'prec0': 0.95348835, 'prec1': 0.45454547, 'rec0': 0.7735849, 'rec1': 0.8333333, 'auroc': 0.7720125786163523, 'auprc': 0.6491649692972272, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.7083333, 'prec0': 0.88372093, 'prec1': 0.44827586, 'rec0': 0.7037037, 'rec1': 0.7222222, 'auroc': 0.8096707818930041, 'auprc': 0.6827681146751363, 'minpse': 0.5789473684210527}
epoch 12
31.3674638569355
validation set
{'acc': 0.72307694, 'prec0': 0.9268293, 'prec1': 0.375, 'rec0': 0.7169811, 'rec1': 0.75, 'auroc': 0.770440251572327, 'auprc': 0.5914103470958048, 'minpse': 0.4375}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.8863636, 'prec1': 0.4642857, 'rec0': 0.7222222, 'rec1': 0.7222222, 'auroc': 0.8477366255144032, 'auprc': 0.749282785324529, 'minpse': 0.6111111111111112}
epoch 13
35.21571531891823
validation set
{'acc': 0.8, 'prec0': 0.95454544, 'prec1': 0.47619048, 'rec0': 0.7924528, 'rec1': 0.8333333, 'auroc': 0.8584905660377358, 'auprc': 0.6829194298802143, 'minpse': 0.5714285714285714}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.90697676, 'prec1': 0.4827586, 'rec0': 0.7222222, 'rec1': 0.7777778, 'auroc': 0.8209876543209877, 'auprc': 0.7038040954510356, 'minpse': 0.631578947368421}
epoch 14
28.11976608633995
validation set
{'acc': 0.9230769, 'prec0': 0.9444444, 'prec1': 0.8181818, 'rec0': 0.9622642, 'rec1': 0.75, 'auroc': 0.8977987421383647, 'auprc': 0.7964926737611344, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.82758623, 'prec1': 0.5714286, 'rec0': 0.8888889, 'rec1': 0.44444445, 'auroc': 0.7314814814814815, 'auprc': 0.528583190770944, 'minpse': 0.5263157894736842}
epoch 15
32.604923129081726
validation set
{'acc': 0.84615386, 'prec0': 0.9574468, 'prec1': 0.5555556, 'rec0': 0.8490566, 'rec1': 0.8333333, 'auroc': 0.8443396226415094, 'auprc': 0.6882762607059006, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.85714287, 'prec1': 0.47826087, 'rec0': 0.7777778, 'rec1': 0.6111111, 'auroc': 0.7890946502057613, 'auprc': 0.588274056831552, 'minpse': 0.6111111111111112}
epoch 16
33.674845814704895
validation set
{'acc': 0.8, 'prec0': 0.97619045, 'prec1': 0.47826087, 'rec0': 0.7735849, 'rec1': 0.9166667, 'auroc': 0.8600628930817611, 'auprc': 0.7135036415610302, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.875, 'prec1': 0.5, 'rec0': 0.7777778, 'rec1': 0.6666667, 'auroc': 0.7654320987654321, 'auprc': 0.7145762385682763, 'minpse': 0.5789473684210527}
epoch 17
30.27672916650772
validation set
{'acc': 0.8, 'prec0': 0.95454544, 'prec1': 0.47619048, 'rec0': 0.7924528, 'rec1': 0.8333333, 'auroc': 0.8679245283018868, 'auprc': 0.6498499340975478, 'minpse': 0.5833333333333334}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9, 'prec1': 0.59090906, 'rec0': 0.8333333, 'rec1': 0.7222222, 'auroc': 0.8045267489711935, 'auprc': 0.6848244452292944, 'minpse': 0.6666666666666666}
epoch 18
27.874049216508865
validation set
{'acc': 0.8153846, 'prec0': 0.9361702, 'prec1': 0.5, 'rec0': 0.8301887, 'rec1': 0.75, 'auroc': 0.8191823899371069, 'auprc': 0.6567548872147425, 'minpse': 0.5833333333333334}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8979592, 'prec1': 0.5652174, 'rec0': 0.8148148, 'rec1': 0.7222222, 'auroc': 0.8096707818930041, 'auprc': 0.7441150487215364, 'minpse': 0.6190476190476191}
epoch 19
32.65413010120392
validation set
{'acc': 0.8, 'prec0': 0.97619045, 'prec1': 0.47826087, 'rec0': 0.7735849, 'rec1': 0.9166667, 'auroc': 0.8553459119496856, 'auprc': 0.6942403575205118, 'minpse': 0.6923076923076923}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.8888889, 'prec1': 0.4814815, 'rec0': 0.7407407, 'rec1': 0.7222222, 'auroc': 0.8323045267489713, 'auprc': 0.7523386518704884, 'minpse': 0.5909090909090909}
epoch 20
27.008125618100166
validation set
{'acc': 0.84615386, 'prec0': 0.9056604, 'prec1': 0.5833333, 'rec0': 0.9056604, 'rec1': 0.5833333, 'auroc': 0.729559748427673, 'auprc': 0.60284547881372, 'minpse': 0.5833333333333334}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.86206895, 'prec1': 0.71428573, 'rec0': 0.9259259, 'rec1': 0.5555556, 'auroc': 0.7952674897119342, 'auprc': 0.7128685845273722, 'minpse': 0.5555555555555556}
epoch 21
28.319898709654808
validation set
{'acc': 0.6923077, 'prec0': 0.9459459, 'prec1': 0.35714287, 'rec0': 0.6603774, 'rec1': 0.8333333, 'auroc': 0.7830188679245282, 'auprc': 0.5735613163551389, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.6944444, 'prec0': 0.88095236, 'prec1': 0.43333334, 'rec0': 0.6851852, 'rec1': 0.7222222, 'auroc': 0.8209876543209876, 'auprc': 0.6010322226427061, 'minpse': 0.6111111111111112}
epoch 22
29.04982203245163
validation set
{'acc': 0.8769231, 'prec0': 0.9245283, 'prec1': 0.6666667, 'rec0': 0.9245283, 'rec1': 0.6666667, 'auroc': 0.7814465408805031, 'auprc': 0.6275910808921645, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8727273, 'prec1': 0.64705884, 'rec0': 0.8888889, 'rec1': 0.6111111, 'auroc': 0.7520576131687242, 'auprc': 0.712540315371663, 'minpse': 0.6111111111111112}
epoch 23
32.64423722028732
validation set
{'acc': 0.7846154, 'prec0': 0.9148936, 'prec1': 0.44444445, 'rec0': 0.8113208, 'rec1': 0.6666667, 'auroc': 0.7672955974842768, 'auprc': 0.49198384709183024, 'minpse': 0.5384615384615384}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.85714287, 'prec1': 0.47826087, 'rec0': 0.7777778, 'rec1': 0.6111111, 'auroc': 0.7942386831275721, 'auprc': 0.6888473866795815, 'minpse': 0.6111111111111112}
epoch 24
30.167692616581917
validation set
{'acc': 0.64615387, 'prec0': 0.9166667, 'prec1': 0.31034482, 'rec0': 0.6226415, 'rec1': 0.75, 'auroc': 0.6902515723270441, 'auprc': 0.5085931287714186, 'minpse': 0.4166666666666667}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.84, 'prec1': 0.45454547, 'rec0': 0.7777778, 'rec1': 0.5555556, 'auroc': 0.7376543209876543, 'auprc': 0.590675140393804, 'minpse': 0.47368421052631576}
epoch 25
27.195819810032845
validation set
{'acc': 0.6923077, 'prec0': 0.9459459, 'prec1': 0.35714287, 'rec0': 0.6603774, 'rec1': 0.8333333, 'auroc': 0.7861635220125787, 'auprc': 0.6032780536457009, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.6944444, 'prec0': 0.9, 'prec1': 0.4375, 'rec0': 0.6666667, 'rec1': 0.7777778, 'auroc': 0.8559670781893004, 'auprc': 0.7760257072995878, 'minpse': 0.7222222222222222}
epoch 26
30.082269996404648
validation set
{'acc': 0.7076923, 'prec0': 0.925, 'prec1': 0.36, 'rec0': 0.6981132, 'rec1': 0.75, 'auroc': 0.7216981132075472, 'auprc': 0.5515296613062708, 'minpse': 0.46153846153846156}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.87234044, 'prec1': 0.48, 'rec0': 0.7592593, 'rec1': 0.6666667, 'auroc': 0.7890946502057613, 'auprc': 0.700787500523048, 'minpse': 0.6111111111111112}
epoch 27
27.181095868349075
validation set
{'acc': 0.84615386, 'prec0': 0.93877554, 'prec1': 0.5625, 'rec0': 0.8679245, 'rec1': 0.75, 'auroc': 0.8459119496855345, 'auprc': 0.7076789451432147, 'minpse': 0.5833333333333334}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.87234044, 'prec1': 0.48, 'rec0': 0.7592593, 'rec1': 0.6666667, 'auroc': 0.8189300411522634, 'auprc': 0.7304264107231699, 'minpse': 0.6666666666666666}
epoch 28
26.32989452779293
validation set
{'acc': 0.7692308, 'prec0': 0.95238096, 'prec1': 0.4347826, 'rec0': 0.754717, 'rec1': 0.8333333, 'auroc': 0.820754716981132, 'auprc': 0.6562678972862039, 'minpse': 0.5833333333333334}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.9285714, 'prec1': 0.5, 'rec0': 0.7222222, 'rec1': 0.8333333, 'auroc': 0.8374485596707819, 'auprc': 0.7473422903842759, 'minpse': 0.6666666666666666}
epoch 29
25.08506253361702
validation set
{'acc': 0.7846154, 'prec0': 0.93333334, 'prec1': 0.45, 'rec0': 0.7924528, 'rec1': 0.75, 'auroc': 0.7845911949685535, 'auprc': 0.6737169915352385, 'minpse': 0.5384615384615384}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.8695652, 'prec1': 0.46153846, 'rec0': 0.7407407, 'rec1': 0.6666667, 'auroc': 0.8117283950617283, 'auprc': 0.701204912986368, 'minpse': 0.6}
epoch 30
21.820562973618507
validation set
{'acc': 0.8, 'prec0': 0.9347826, 'prec1': 0.47368422, 'rec0': 0.8113208, 'rec1': 0.75, 'auroc': 0.8333333333333334, 'auprc': 0.6974220915868693, 'minpse': 0.5833333333333334}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.8913044, 'prec1': 0.5, 'rec0': 0.7592593, 'rec1': 0.7222222, 'auroc': 0.8261316872427983, 'auprc': 0.7034998824047252, 'minpse': 0.6111111111111112}
epoch 31
24.286535680294037
validation set
{'acc': 0.8769231, 'prec0': 0.9245283, 'prec1': 0.6666667, 'rec0': 0.9245283, 'rec1': 0.6666667, 'auroc': 0.8301886792452831, 'auprc': 0.6675963061608902, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.85, 'prec1': 0.75, 'rec0': 0.9444444, 'rec1': 0.5, 'auroc': 0.8302469135802469, 'auprc': 0.7243135677548521, 'minpse': 0.6363636363636364}
epoch 32
21.613890171051025
validation set
{'acc': 0.83076924, 'prec0': 0.9375, 'prec1': 0.5294118, 'rec0': 0.8490566, 'rec1': 0.75, 'auroc': 0.8474842767295598, 'auprc': 0.7107075922933156, 'minpse': 0.5833333333333334}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.88, 'prec1': 0.54545456, 'rec0': 0.8148148, 'rec1': 0.6666667, 'auroc': 0.8117283950617284, 'auprc': 0.730390339268437, 'minpse': 0.6666666666666666}
epoch 33
22.275593280792236
validation set
{'acc': 0.8923077, 'prec0': 0.8965517, 'prec1': 0.85714287, 'rec0': 0.9811321, 'rec1': 0.5, 'auroc': 0.7012578616352202, 'auprc': 0.6115843798358046, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.82539684, 'prec1': 0.7777778, 'rec0': 0.962963, 'rec1': 0.3888889, 'auroc': 0.7088477366255144, 'auprc': 0.6192441457092728, 'minpse': 0.5555555555555556}
epoch 34
21.808975249528885
validation set
{'acc': 0.8153846, 'prec0': 0.95555556, 'prec1': 0.5, 'rec0': 0.8113208, 'rec1': 0.8333333, 'auroc': 0.8443396226415094, 'auprc': 0.7096858772748866, 'minpse': 0.5833333333333334}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.8695652, 'prec1': 0.46153846, 'rec0': 0.7407407, 'rec1': 0.6666667, 'auroc': 0.7973251028806584, 'auprc': 0.6844165600683347, 'minpse': 0.6111111111111112}
epoch 35
19.364832006394863
validation set
{'acc': 0.7692308, 'prec0': 0.95238096, 'prec1': 0.4347826, 'rec0': 0.754717, 'rec1': 0.8333333, 'auroc': 0.8254716981132075, 'auprc': 0.7073129535944181, 'minpse': 0.6153846153846154}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.8888889, 'prec1': 0.4814815, 'rec0': 0.7407407, 'rec1': 0.7222222, 'auroc': 0.8014403292181069, 'auprc': 0.6887725767750473, 'minpse': 0.6111111111111112}
epoch 36
21.978387236595154
validation set
{'acc': 0.9076923, 'prec0': 0.9122807, 'prec1': 0.875, 'rec0': 0.9811321, 'rec1': 0.5833333, 'auroc': 0.7704402515723271, 'auprc': 0.6544240878295396, 'minpse': 0.5833333333333334}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8596491, 'prec1': 0.6666667, 'rec0': 0.9074074, 'rec1': 0.5555556, 'auroc': 0.7757201646090535, 'auprc': 0.585506592725467, 'minpse': 0.6666666666666666}
epoch 37
21.968997329473495
validation set
{'acc': 0.7692308, 'prec0': 0.95238096, 'prec1': 0.4347826, 'rec0': 0.754717, 'rec1': 0.8333333, 'auroc': 0.8254716981132075, 'auprc': 0.674686140625804, 'minpse': 0.5833333333333334}
Mortality Prediction on the test set
{'acc': 0.6666667, 'prec0': 0.8947368, 'prec1': 0.4117647, 'rec0': 0.6296296, 'rec1': 0.7777778, 'auroc': 0.8251028806584362, 'auprc': 0.7216387539730139, 'minpse': 0.6666666666666666}
epoch 38
20.180156990885735
validation set
{'acc': 0.84615386, 'prec0': 0.92156863, 'prec1': 0.5714286, 'rec0': 0.8867925, 'rec1': 0.6666667, 'auroc': 0.809748427672956, 'auprc': 0.6969591399096388, 'minpse': 0.5833333333333334}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.877551, 'prec1': 0.5217391, 'rec0': 0.7962963, 'rec1': 0.6666667, 'auroc': 0.772633744855967, 'auprc': 0.5998782050727909, 'minpse': 0.631578947368421}
epoch 39
19.843802273273468
validation set
{'acc': 0.72307694, 'prec0': 0.972973, 'prec1': 0.39285713, 'rec0': 0.6792453, 'rec1': 0.9166667, 'auroc': 0.8427672955974843, 'auprc': 0.7043449479034304, 'minpse': 0.5833333333333334}
Mortality Prediction on the test set
{'acc': 0.6388889, 'prec0': 0.9117647, 'prec1': 0.39473686, 'rec0': 0.5740741, 'rec1': 0.8333333, 'auroc': 0.8528806584362141, 'auprc': 0.7548690075469755, 'minpse': 0.7222222222222222}
Reset trainable parameters of layer = Conv2d(1, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Linear(in_features=512, out_features=1000, bias=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Conv2d(64, 384, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=7200, bias=True)
Reset trainable parameters of layer = Linear(in_features=1000, out_features=6272, bias=True)
Reset trainable parameters of layer = Linear(in_features=7200, out_features=3600, bias=True)
Reset trainable parameters of layer = Linear(in_features=3600, out_features=1800, bias=True)
Reset trainable parameters of layer = Linear(in_features=1800, out_features=400, bias=True)
Reset trainable parameters of layer = Linear(in_features=400, out_features=1, bias=True)
for distribution val
type 0= 45 type 1= 20
for distribution test
type 0= 54 type 1= 18
epoch 0
55.95498883724213
validation set
{'acc': 0.86153847, 'prec0': 0.86, 'prec1': 0.8666667, 'rec0': 0.95555556, 'rec1': 0.65, 'auroc': 0.851111111111111, 'auprc': 0.7726306374776075, 'minpse': 0.6818181818181818}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.8666667, 'prec1': 0.8333333, 'rec0': 0.962963, 'rec1': 0.5555556, 'auroc': 0.888888888888889, 'auprc': 0.8128459415198612, 'minpse': 0.6842105263157895}
epoch 1
48.25483626127243
validation set
{'acc': 0.73846155, 'prec0': 0.8684211, 'prec1': 0.5555556, 'rec0': 0.73333335, 'rec1': 0.75, 'auroc': 0.7666666666666666, 'auprc': 0.6313147590225173, 'minpse': 0.56}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8979592, 'prec1': 0.5652174, 'rec0': 0.8148148, 'rec1': 0.7222222, 'auroc': 0.8559670781893004, 'auprc': 0.7217458525887734, 'minpse': 0.631578947368421}
epoch 2
46.18593239784241
validation set
{'acc': 0.7846154, 'prec0': 0.8974359, 'prec1': 0.61538464, 'rec0': 0.7777778, 'rec1': 0.8, 'auroc': 0.78, 'auprc': 0.6898555165485631, 'minpse': 0.6363636363636364}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.9130435, 'prec1': 0.53846157, 'rec0': 0.7777778, 'rec1': 0.7777778, 'auroc': 0.808641975308642, 'auprc': 0.5964931036783546, 'minpse': 0.6666666666666666}
epoch 3
43.236390709877014
validation set
{'acc': 0.7846154, 'prec0': 0.8780488, 'prec1': 0.625, 'rec0': 0.8, 'rec1': 0.75, 'auroc': 0.8211111111111111, 'auprc': 0.723829954372308, 'minpse': 0.65}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.90909094, 'prec1': 0.5, 'rec0': 0.7407407, 'rec1': 0.7777778, 'auroc': 0.8034979423868313, 'auprc': 0.6968525744245605, 'minpse': 0.6111111111111112}
epoch 4
41.76465579867363
validation set
{'acc': 0.83076924, 'prec0': 0.9047619, 'prec1': 0.6956522, 'rec0': 0.84444445, 'rec1': 0.8, 'auroc': 0.8355555555555556, 'auprc': 0.7346587862066393, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.88, 'prec1': 0.54545456, 'rec0': 0.8148148, 'rec1': 0.6666667, 'auroc': 0.8755144032921811, 'auprc': 0.7868849377370278, 'minpse': 0.6666666666666666}
epoch 5
42.3385728597641
validation set
{'acc': 0.8, 'prec0': 0.92105263, 'prec1': 0.6296296, 'rec0': 0.7777778, 'rec1': 0.85, 'auroc': 0.8288888888888889, 'auprc': 0.7344794834091577, 'minpse': 0.65}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.93333334, 'prec1': 0.5555556, 'rec0': 0.7777778, 'rec1': 0.8333333, 'auroc': 0.8940329218106996, 'auprc': 0.7798476893484696, 'minpse': 0.7}
epoch 6
39.68274122476578
validation set
{'acc': 0.73846155, 'prec0': 0.9117647, 'prec1': 0.5483871, 'rec0': 0.6888889, 'rec1': 0.85, 'auroc': 0.7944444444444444, 'auprc': 0.6724590596484687, 'minpse': 0.5833333333333334}
Mortality Prediction on the test set
{'acc': 0.6944444, 'prec0': 0.88095236, 'prec1': 0.43333334, 'rec0': 0.6851852, 'rec1': 0.7222222, 'auroc': 0.8199588477366255, 'auprc': 0.6883329236077256, 'minpse': 0.5714285714285714}
epoch 7
36.92916348576546
validation set
{'acc': 0.64615387, 'prec0': 0.9230769, 'prec1': 0.46153846, 'rec0': 0.53333336, 'rec1': 0.9, 'auroc': 0.7611111111111111, 'auprc': 0.6173514163793727, 'minpse': 0.55}
Mortality Prediction on the test set
{'acc': 0.6527778, 'prec0': 0.93939394, 'prec1': 0.41025642, 'rec0': 0.5740741, 'rec1': 0.8888889, 'auroc': 0.7839506172839507, 'auprc': 0.6302226843831449, 'minpse': 0.5555555555555556}
epoch 8
40.144751250743866
validation set
{'acc': 0.7846154, 'prec0': 0.8780488, 'prec1': 0.625, 'rec0': 0.8, 'rec1': 0.75, 'auroc': 0.8011111111111111, 'auprc': 0.6948335517846725, 'minpse': 0.6363636363636364}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.8518519, 'prec1': 0.5555556, 'rec0': 0.8518519, 'rec1': 0.5555556, 'auroc': 0.7664609053497943, 'auprc': 0.5529180546526015, 'minpse': 0.5555555555555556}
epoch 9
40.39085540175438
validation set
{'acc': 0.8, 'prec0': 0.92105263, 'prec1': 0.6296296, 'rec0': 0.7777778, 'rec1': 0.85, 'auroc': 0.8555555555555555, 'auprc': 0.8077423008282323, 'minpse': 0.7}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.8913044, 'prec1': 0.5, 'rec0': 0.7592593, 'rec1': 0.7222222, 'auroc': 0.8199588477366256, 'auprc': 0.7415001514398868, 'minpse': 0.6666666666666666}
epoch 10
36.14181503653526
validation set
{'acc': 0.8153846, 'prec0': 0.88372093, 'prec1': 0.6818182, 'rec0': 0.84444445, 'rec1': 0.75, 'auroc': 0.7811111111111111, 'auprc': 0.6575677424711261, 'minpse': 0.6818181818181818}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.8695652, 'prec1': 0.46153846, 'rec0': 0.7407407, 'rec1': 0.6666667, 'auroc': 0.7921810699588477, 'auprc': 0.6954611205030303, 'minpse': 0.5714285714285714}
epoch 11
30.294569462537766
validation set
{'acc': 0.84615386, 'prec0': 0.84313726, 'prec1': 0.85714287, 'rec0': 0.95555556, 'rec1': 0.6, 'auroc': 0.7933333333333332, 'auprc': 0.7505630638236057, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.852459, 'prec1': 0.8181818, 'rec0': 0.962963, 'rec1': 0.5, 'auroc': 0.8641975308641976, 'auprc': 0.7440466941219799, 'minpse': 0.7222222222222222}
epoch 12
31.32664582133293
validation set
{'acc': 0.7846154, 'prec0': 0.81632656, 'prec1': 0.6875, 'rec0': 0.8888889, 'rec1': 0.55, 'auroc': 0.7233333333333333, 'auprc': 0.5416656604753207, 'minpse': 0.55}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8360656, 'prec1': 0.72727275, 'rec0': 0.9444444, 'rec1': 0.44444445, 'auroc': 0.8209876543209875, 'auprc': 0.7199392468395158, 'minpse': 0.631578947368421}
epoch 13
40.35216136276722
validation set
{'acc': 0.73846155, 'prec0': 0.8333333, 'prec1': 0.5652174, 'rec0': 0.7777778, 'rec1': 0.65, 'auroc': 0.7377777777777778, 'auprc': 0.5366943178643998, 'minpse': 0.5714285714285714}
Mortality Prediction on the test set
{'acc': 0.625, 'prec0': 0.81395346, 'prec1': 0.3448276, 'rec0': 0.6481481, 'rec1': 0.5555556, 'auroc': 0.7294238683127572, 'auprc': 0.5493529404416069, 'minpse': 0.4444444444444444}
epoch 14
34.39298403263092
validation set
{'acc': 0.86153847, 'prec0': 0.86, 'prec1': 0.8666667, 'rec0': 0.95555556, 'rec1': 0.65, 'auroc': 0.8322222222222221, 'auprc': 0.7313380940397256, 'minpse': 0.65}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.87096775, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.5555556, 'auroc': 0.8940329218106996, 'auprc': 0.8127757766618706, 'minpse': 0.6842105263157895}
epoch 15
31.130866304039955
validation set
{'acc': 0.75384617, 'prec0': 0.9142857, 'prec1': 0.56666666, 'rec0': 0.7111111, 'rec1': 0.85, 'auroc': 0.7944444444444444, 'auprc': 0.5999351248575644, 'minpse': 0.65}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.90909094, 'prec1': 0.5, 'rec0': 0.7407407, 'rec1': 0.7777778, 'auroc': 0.8055555555555556, 'auprc': 0.7304496344769177, 'minpse': 0.7222222222222222}
epoch 16
26.813055485486984
validation set
{'acc': 0.7846154, 'prec0': 0.9189189, 'prec1': 0.60714287, 'rec0': 0.75555557, 'rec1': 0.85, 'auroc': 0.8277777777777777, 'auprc': 0.6921775659301348, 'minpse': 0.7}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9347826, 'prec1': 0.5769231, 'rec0': 0.7962963, 'rec1': 0.8333333, 'auroc': 0.8981481481481481, 'auprc': 0.8307969764616592, 'minpse': 0.7222222222222222}
epoch 17
33.26789402961731
validation set
{'acc': 0.6615385, 'prec0': 1.0, 'prec1': 0.47619048, 'rec0': 0.51111114, 'rec1': 1.0, 'auroc': 0.8266666666666667, 'auprc': 0.6892037673193592, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.625, 'prec0': 0.9354839, 'prec1': 0.3902439, 'rec0': 0.537037, 'rec1': 0.8888889, 'auroc': 0.8724279835390947, 'auprc': 0.8007789178470682, 'minpse': 0.6666666666666666}
epoch 18
28.030556976795197
validation set
{'acc': 0.75384617, 'prec0': 0.8717949, 'prec1': 0.5769231, 'rec0': 0.75555557, 'rec1': 0.75, 'auroc': 0.7888888888888889, 'auprc': 0.6854467238392978, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.877551, 'prec1': 0.5217391, 'rec0': 0.7962963, 'rec1': 0.6666667, 'auroc': 0.830246913580247, 'auprc': 0.7352793965668954, 'minpse': 0.6666666666666666}
epoch 19
28.224581629037857
validation set
{'acc': 0.73846155, 'prec0': 0.8684211, 'prec1': 0.5555556, 'rec0': 0.73333335, 'rec1': 0.75, 'auroc': 0.7322222222222223, 'auprc': 0.6489299263663283, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.6944444, 'prec0': 0.8636364, 'prec1': 0.42857143, 'rec0': 0.7037037, 'rec1': 0.6666667, 'auroc': 0.8117283950617284, 'auprc': 0.7105006807680522, 'minpse': 0.6111111111111112}
epoch 20
27.136642783880234
validation set
{'acc': 0.7076923, 'prec0': 0.90625, 'prec1': 0.5151515, 'rec0': 0.64444447, 'rec1': 0.85, 'auroc': 0.7933333333333334, 'auprc': 0.7076316346834136, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.7083333, 'prec0': 0.9714286, 'prec1': 0.45945945, 'rec0': 0.6296296, 'rec1': 0.9444444, 'auroc': 0.8724279835390947, 'auprc': 0.7630666225211303, 'minpse': 0.6666666666666666}
epoch 21
27.71703827381134
validation set
{'acc': 0.75384617, 'prec0': 0.80851066, 'prec1': 0.6111111, 'rec0': 0.84444445, 'rec1': 0.55, 'auroc': 0.6522222222222221, 'auprc': 0.5870158800174441, 'minpse': 0.55}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.82758623, 'prec1': 0.5714286, 'rec0': 0.8888889, 'rec1': 0.44444445, 'auroc': 0.6347736625514403, 'auprc': 0.5101963846949228, 'minpse': 0.4444444444444444}
epoch 22
27.852960526943207
validation set
{'acc': 0.75384617, 'prec0': 0.82222223, 'prec1': 0.6, 'rec0': 0.82222223, 'rec1': 0.6, 'auroc': 0.7233333333333334, 'auprc': 0.6102585494879433, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.9019608, 'prec1': 0.61904764, 'rec0': 0.8518519, 'rec1': 0.7222222, 'auroc': 0.8106995884773662, 'auprc': 0.6837005530520107, 'minpse': 0.65}
epoch 23
25.902688324451447
validation set
{'acc': 0.6923077, 'prec0': 0.8787879, 'prec1': 0.5, 'rec0': 0.64444447, 'rec1': 0.8, 'auroc': 0.7666666666666667, 'auprc': 0.6638871188391716, 'minpse': 0.5714285714285714}
Mortality Prediction on the test set
{'acc': 0.6527778, 'prec0': 0.85365856, 'prec1': 0.38709676, 'rec0': 0.6481481, 'rec1': 0.6666667, 'auroc': 0.7808641975308642, 'auprc': 0.576254992974555, 'minpse': 0.6111111111111112}
epoch 24
26.128458000719547
validation set
{'acc': 0.7692308, 'prec0': 0.9166667, 'prec1': 0.5862069, 'rec0': 0.73333335, 'rec1': 0.85, 'auroc': 0.8077777777777778, 'auprc': 0.6563609324983182, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.7083333, 'prec0': 0.902439, 'prec1': 0.4516129, 'rec0': 0.6851852, 'rec1': 0.7777778, 'auroc': 0.8713991769547325, 'auprc': 0.7692341782271762, 'minpse': 0.7222222222222222}
epoch 25
29.133501887321472
validation set
{'acc': 0.7692308, 'prec0': 0.8125, 'prec1': 0.64705884, 'rec0': 0.8666667, 'rec1': 0.55, 'auroc': 0.768888888888889, 'auprc': 0.629520885777253, 'minpse': 0.55}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8545455, 'prec1': 0.5882353, 'rec0': 0.8703704, 'rec1': 0.5555556, 'auroc': 0.7345679012345679, 'auprc': 0.5889885330150533, 'minpse': 0.5555555555555556}
epoch 26
27.727256514132023
validation set
{'acc': 0.8153846, 'prec0': 0.88372093, 'prec1': 0.6818182, 'rec0': 0.84444445, 'rec1': 0.75, 'auroc': 0.8288888888888889, 'auprc': 0.739357817671497, 'minpse': 0.7}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8979592, 'prec1': 0.5652174, 'rec0': 0.8148148, 'rec1': 0.7222222, 'auroc': 0.8621399176954733, 'auprc': 0.7826724446029917, 'minpse': 0.6666666666666666}
epoch 27
27.317368656396866
validation set
{'acc': 0.7692308, 'prec0': 0.9166667, 'prec1': 0.5862069, 'rec0': 0.73333335, 'rec1': 0.85, 'auroc': 0.7566666666666667, 'auprc': 0.5430341450575318, 'minpse': 0.5862068965517241}
Mortality Prediction on the test set
{'acc': 0.7083333, 'prec0': 0.9714286, 'prec1': 0.45945945, 'rec0': 0.6296296, 'rec1': 0.9444444, 'auroc': 0.8672839506172839, 'auprc': 0.7093188392405472, 'minpse': 0.6521739130434783}
epoch 28
30.685083776712418
validation set
{'acc': 0.84615386, 'prec0': 0.8888889, 'prec1': 0.75, 'rec0': 0.8888889, 'rec1': 0.75, 'auroc': 0.77, 'auprc': 0.5895832330161163, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.8888889, 'prec1': 0.6666667, 'rec0': 0.8888889, 'rec1': 0.6666667, 'auroc': 0.8343621399176955, 'auprc': 0.5888628242757893, 'minpse': 0.6666666666666666}
epoch 29
29.829642310738564
validation set
{'acc': 0.83076924, 'prec0': 0.84, 'prec1': 0.8, 'rec0': 0.93333334, 'rec1': 0.6, 'auroc': 0.7933333333333333, 'auprc': 0.7250412594114306, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.8666667, 'prec1': 0.8333333, 'rec0': 0.962963, 'rec1': 0.5555556, 'auroc': 0.8724279835390947, 'auprc': 0.7804615799754724, 'minpse': 0.6666666666666666}
epoch 30
29.006084740161896
validation set
{'acc': 0.7846154, 'prec0': 0.8780488, 'prec1': 0.625, 'rec0': 0.8, 'rec1': 0.75, 'auroc': 0.7500000000000001, 'auprc': 0.6736314388191691, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.89361703, 'prec1': 0.52, 'rec0': 0.7777778, 'rec1': 0.7222222, 'auroc': 0.8518518518518519, 'auprc': 0.7499237853002492, 'minpse': 0.6666666666666666}
epoch 31
22.660431563854218
validation set
{'acc': 0.7076923, 'prec0': 0.88235295, 'prec1': 0.516129, 'rec0': 0.6666667, 'rec1': 0.8, 'auroc': 0.7177777777777778, 'auprc': 0.6059406398584295, 'minpse': 0.5714285714285714}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.90697676, 'prec1': 0.4827586, 'rec0': 0.7222222, 'rec1': 0.7777778, 'auroc': 0.8055555555555555, 'auprc': 0.7007098521103745, 'minpse': 0.6111111111111112}
epoch 32
23.023693203926086
validation set
{'acc': 0.75384617, 'prec0': 0.8717949, 'prec1': 0.5769231, 'rec0': 0.75555557, 'rec1': 0.75, 'auroc': 0.8033333333333335, 'auprc': 0.7176390575071787, 'minpse': 0.6190476190476191}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8979592, 'prec1': 0.5652174, 'rec0': 0.8148148, 'rec1': 0.7222222, 'auroc': 0.8415637860082303, 'auprc': 0.5998849159475574, 'minpse': 0.5909090909090909}
epoch 33
22.806616693735123
validation set
{'acc': 0.8, 'prec0': 0.8636364, 'prec1': 0.6666667, 'rec0': 0.84444445, 'rec1': 0.7, 'auroc': 0.8077777777777778, 'auprc': 0.7407060544172689, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.90384614, 'prec1': 0.65, 'rec0': 0.8703704, 'rec1': 0.7222222, 'auroc': 0.8364197530864198, 'auprc': 0.6342007787848698, 'minpse': 0.6666666666666666}
epoch 34
22.52595730125904
validation set
{'acc': 0.7076923, 'prec0': 0.8611111, 'prec1': 0.51724136, 'rec0': 0.6888889, 'rec1': 0.75, 'auroc': 0.7333333333333333, 'auprc': 0.640899747241702, 'minpse': 0.5454545454545454}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.8958333, 'prec1': 0.5416667, 'rec0': 0.7962963, 'rec1': 0.7222222, 'auroc': 0.8343621399176955, 'auprc': 0.562519991425418, 'minpse': 0.65}
epoch 35
21.91191217303276
validation set
{'acc': 0.6615385, 'prec0': 0.87096775, 'prec1': 0.47058824, 'rec0': 0.6, 'rec1': 0.8, 'auroc': 0.6944444444444444, 'auprc': 0.5842430598554637, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.5972222, 'prec0': 0.9032258, 'prec1': 0.36585367, 'rec0': 0.5185185, 'rec1': 0.8333333, 'auroc': 0.7890946502057613, 'auprc': 0.6436075743897642, 'minpse': 0.5789473684210527}
epoch 36
21.83537256717682
validation set
{'acc': 0.7692308, 'prec0': 0.85714287, 'prec1': 0.6086956, 'rec0': 0.8, 'rec1': 0.7, 'auroc': 0.7366666666666666, 'auprc': 0.580452249163556, 'minpse': 0.6086956521739131}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9, 'prec1': 0.59090906, 'rec0': 0.8333333, 'rec1': 0.7222222, 'auroc': 0.8467078189300411, 'auprc': 0.6223767223439618, 'minpse': 0.6086956521739131}
epoch 37
20.128809675574303
validation set
{'acc': 0.8153846, 'prec0': 0.8367347, 'prec1': 0.75, 'rec0': 0.9111111, 'rec1': 0.6, 'auroc': 0.7822222222222224, 'auprc': 0.7074875030082439, 'minpse': 0.6190476190476191}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.86206895, 'prec1': 0.71428573, 'rec0': 0.9259259, 'rec1': 0.5555556, 'auroc': 0.8713991769547325, 'auprc': 0.6280077158436914, 'minpse': 0.7222222222222222}
epoch 38
22.96681585907936
validation set
{'acc': 0.7846154, 'prec0': 0.8974359, 'prec1': 0.61538464, 'rec0': 0.7777778, 'rec1': 0.8, 'auroc': 0.7911111111111111, 'auprc': 0.7447131943892393, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.9019608, 'prec1': 0.61904764, 'rec0': 0.8518519, 'rec1': 0.7222222, 'auroc': 0.8569958847736625, 'auprc': 0.6536695444040526, 'minpse': 0.6842105263157895}
epoch 39
19.967850297689438
validation set
{'acc': 0.7846154, 'prec0': 0.84444445, 'prec1': 0.65, 'rec0': 0.84444445, 'rec1': 0.65, 'auroc': 0.7044444444444444, 'auprc': 0.6519013634289431, 'minpse': 0.65}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.877551, 'prec1': 0.5217391, 'rec0': 0.7962963, 'rec1': 0.6666667, 'auroc': 0.7829218106995884, 'auprc': 0.6641678688416761, 'minpse': 0.6666666666666666}
Reset trainable parameters of layer = Conv2d(1, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Linear(in_features=512, out_features=1000, bias=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Conv2d(64, 384, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=7200, bias=True)
Reset trainable parameters of layer = Linear(in_features=1000, out_features=6272, bias=True)
Reset trainable parameters of layer = Linear(in_features=7200, out_features=3600, bias=True)
Reset trainable parameters of layer = Linear(in_features=3600, out_features=1800, bias=True)
Reset trainable parameters of layer = Linear(in_features=1800, out_features=400, bias=True)
Reset trainable parameters of layer = Linear(in_features=400, out_features=1, bias=True)
for distribution val
type 0= 42 type 1= 23
for distribution test
type 0= 54 type 1= 18
epoch 0
51.17878642678261
validation set
{'acc': 0.73846155, 'prec0': 0.8378378, 'prec1': 0.60714287, 'rec0': 0.7380952, 'rec1': 0.73913044, 'auroc': 0.7525879917184265, 'auprc': 0.6333987246436256, 'minpse': 0.6153846153846154}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.8541667, 'prec1': 0.45833334, 'rec0': 0.7592593, 'rec1': 0.6111111, 'auroc': 0.7304526748971194, 'auprc': 0.5821615561358984, 'minpse': 0.5238095238095238}
epoch 1
48.548665165901184
validation set
{'acc': 0.9230769, 'prec0': 0.9302326, 'prec1': 0.90909094, 'rec0': 0.95238096, 'rec1': 0.8695652, 'auroc': 0.9358178053830227, 'auprc': 0.9384891819569398, 'minpse': 0.8695652173913043}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.92156863, 'prec1': 0.6666667, 'rec0': 0.8703704, 'rec1': 0.7777778, 'auroc': 0.8919753086419753, 'auprc': 0.8099259204135603, 'minpse': 0.6666666666666666}
epoch 2
50.55634665489197
validation set
{'acc': 0.9076923, 'prec0': 0.8913044, 'prec1': 0.94736844, 'rec0': 0.97619045, 'rec1': 0.7826087, 'auroc': 0.937888198757764, 'auprc': 0.9248034327865411, 'minpse': 0.8260869565217391}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.9056604, 'prec1': 0.68421054, 'rec0': 0.8888889, 'rec1': 0.7222222, 'auroc': 0.8487654320987654, 'auprc': 0.704691894356764, 'minpse': 0.7222222222222222}
epoch 3
46.45253545045853
validation set
{'acc': 0.9076923, 'prec0': 0.8913044, 'prec1': 0.94736844, 'rec0': 0.97619045, 'rec1': 0.7826087, 'auroc': 0.9078674948240165, 'auprc': 0.9082968096539126, 'minpse': 0.7916666666666666}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8727273, 'prec1': 0.64705884, 'rec0': 0.8888889, 'rec1': 0.6111111, 'auroc': 0.8549382716049383, 'auprc': 0.7171066568388905, 'minpse': 0.65}
epoch 4
42.41893830895424
validation set
{'acc': 0.86153847, 'prec0': 0.9230769, 'prec1': 0.7692308, 'rec0': 0.85714287, 'rec1': 0.8695652, 'auroc': 0.9182194616977225, 'auprc': 0.883105077254134, 'minpse': 0.7692307692307693}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.84313726, 'prec1': 0.47619048, 'rec0': 0.7962963, 'rec1': 0.5555556, 'auroc': 0.7921810699588478, 'auprc': 0.5673320710927099, 'minpse': 0.5555555555555556}
epoch 5
43.14098969101906
validation set
{'acc': 0.9076923, 'prec0': 0.90909094, 'prec1': 0.9047619, 'rec0': 0.95238096, 'rec1': 0.82608694, 'auroc': 0.9440993788819876, 'auprc': 0.9199046257251569, 'minpse': 0.8260869565217391}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8867925, 'prec1': 0.6315789, 'rec0': 0.8703704, 'rec1': 0.6666667, 'auroc': 0.8425925925925926, 'auprc': 0.7225859673682966, 'minpse': 0.6666666666666666}
epoch 6
43.70715409517288
validation set
{'acc': 0.8, 'prec0': 0.8918919, 'prec1': 0.6785714, 'rec0': 0.78571427, 'rec1': 0.82608694, 'auroc': 0.8633540372670807, 'auprc': 0.7543780893007491, 'minpse': 0.6956521739130435}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.90697676, 'prec1': 0.4827586, 'rec0': 0.7222222, 'rec1': 0.7777778, 'auroc': 0.815843621399177, 'auprc': 0.624758275574977, 'minpse': 0.6111111111111112}
epoch 7
37.27441430091858
validation set
{'acc': 0.9076923, 'prec0': 0.9285714, 'prec1': 0.8695652, 'rec0': 0.9285714, 'rec1': 0.8695652, 'auroc': 0.9109730848861284, 'auprc': 0.8710928007971908, 'minpse': 0.8695652173913043}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.8703704, 'prec1': 0.6111111, 'rec0': 0.8703704, 'rec1': 0.6111111, 'auroc': 0.8353909465020576, 'auprc': 0.6753812916864577, 'minpse': 0.6111111111111112}
epoch 8
36.95834106206894
validation set
{'acc': 0.8923077, 'prec0': 0.90697676, 'prec1': 0.8636364, 'rec0': 0.9285714, 'rec1': 0.82608694, 'auroc': 0.9202898550724637, 'auprc': 0.9007525903384019, 'minpse': 0.8260869565217391}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8305085, 'prec1': 0.61538464, 'rec0': 0.9074074, 'rec1': 0.44444445, 'auroc': 0.8076131687242798, 'auprc': 0.6416111891006944, 'minpse': 0.5555555555555556}
epoch 9
35.22311690449715
validation set
{'acc': 0.9076923, 'prec0': 0.9285714, 'prec1': 0.8695652, 'rec0': 0.9285714, 'rec1': 0.8695652, 'auroc': 0.9078674948240165, 'auprc': 0.9068884742444892, 'minpse': 0.8695652173913043}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8679245, 'prec1': 0.57894737, 'rec0': 0.8518519, 'rec1': 0.6111111, 'auroc': 0.8127572016460904, 'auprc': 0.7321117637137262, 'minpse': 0.6111111111111112}
epoch 10
37.34439146518707
validation set
{'acc': 0.86153847, 'prec0': 0.9230769, 'prec1': 0.7692308, 'rec0': 0.85714287, 'rec1': 0.8695652, 'auroc': 0.8799171842650103, 'auprc': 0.8056030384161456, 'minpse': 0.782608695652174}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.88235295, 'prec1': 0.5714286, 'rec0': 0.8333333, 'rec1': 0.6666667, 'auroc': 0.7582304526748971, 'auprc': 0.5678114311303337, 'minpse': 0.631578947368421}
epoch 11
40.143871545791626
validation set
{'acc': 0.86153847, 'prec0': 0.88372093, 'prec1': 0.8181818, 'rec0': 0.9047619, 'rec1': 0.7826087, 'auroc': 0.8850931677018633, 'auprc': 0.8599733932069278, 'minpse': 0.782608695652174}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.8947368, 'prec1': 0.8, 'rec0': 0.9444444, 'rec1': 0.6666667, 'auroc': 0.8076131687242798, 'auprc': 0.7312011119053572, 'minpse': 0.6666666666666666}
epoch 12
33.58618149161339
validation set
{'acc': 0.8923077, 'prec0': 0.9268293, 'prec1': 0.8333333, 'rec0': 0.9047619, 'rec1': 0.8695652, 'auroc': 0.8902691511387163, 'auprc': 0.8724321811801309, 'minpse': 0.8333333333333334}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.8703704, 'prec1': 0.6111111, 'rec0': 0.8703704, 'rec1': 0.6111111, 'auroc': 0.7757201646090536, 'auprc': 0.6946568615822648, 'minpse': 0.6111111111111112}
epoch 13
33.052635475993156
validation set
{'acc': 0.86153847, 'prec0': 0.9230769, 'prec1': 0.7692308, 'rec0': 0.85714287, 'rec1': 0.8695652, 'auroc': 0.8933747412008282, 'auprc': 0.8189890885039742, 'minpse': 0.7916666666666666}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.88461536, 'prec1': 0.6, 'rec0': 0.8518519, 'rec1': 0.6666667, 'auroc': 0.7921810699588477, 'auprc': 0.698046558280105, 'minpse': 0.631578947368421}
epoch 14
30.339728951454163
validation set
{'acc': 0.8769231, 'prec0': 0.8863636, 'prec1': 0.85714287, 'rec0': 0.9285714, 'rec1': 0.7826087, 'auroc': 0.8819875776397516, 'auprc': 0.7839755143939593, 'minpse': 0.782608695652174}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.8703704, 'prec1': 0.6111111, 'rec0': 0.8703704, 'rec1': 0.6111111, 'auroc': 0.7767489711934156, 'auprc': 0.6850204399871788, 'minpse': 0.6190476190476191}
epoch 15
38.90794502198696
validation set
{'acc': 0.7846154, 'prec0': 0.9375, 'prec1': 0.6363636, 'rec0': 0.71428573, 'rec1': 0.9130435, 'auroc': 0.8788819875776397, 'auprc': 0.8005176434321166, 'minpse': 0.6956521739130435}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.90697676, 'prec1': 0.4827586, 'rec0': 0.7222222, 'rec1': 0.7777778, 'auroc': 0.8251028806584362, 'auprc': 0.666285888834291, 'minpse': 0.5789473684210527}
epoch 16
34.66870355606079
validation set
{'acc': 0.8153846, 'prec0': 0.9166667, 'prec1': 0.6896552, 'rec0': 0.78571427, 'rec1': 0.8695652, 'auroc': 0.8674948240165632, 'auprc': 0.8009440433622751, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.90697676, 'prec1': 0.4827586, 'rec0': 0.7222222, 'rec1': 0.7777778, 'auroc': 0.7993827160493827, 'auprc': 0.681058630208277, 'minpse': 0.6111111111111112}
epoch 17
33.380346596241
validation set
{'acc': 0.8769231, 'prec0': 0.9047619, 'prec1': 0.82608694, 'rec0': 0.9047619, 'rec1': 0.82608694, 'auroc': 0.8985507246376812, 'auprc': 0.8788773538245613, 'minpse': 0.8260869565217391}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.88235295, 'prec1': 0.5714286, 'rec0': 0.8333333, 'rec1': 0.6666667, 'auroc': 0.7818930041152263, 'auprc': 0.6453972324870815, 'minpse': 0.6111111111111112}
epoch 18
37.5973257124424
validation set
{'acc': 0.7692308, 'prec0': 0.8648649, 'prec1': 0.64285713, 'rec0': 0.7619048, 'rec1': 0.7826087, 'auroc': 0.834368530020704, 'auprc': 0.7657935348180342, 'minpse': 0.6538461538461539}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.87234044, 'prec1': 0.48, 'rec0': 0.7592593, 'rec1': 0.6666667, 'auroc': 0.815843621399177, 'auprc': 0.729577155415694, 'minpse': 0.6666666666666666}
epoch 19
32.033836752176285
validation set
{'acc': 0.83076924, 'prec0': 0.9189189, 'prec1': 0.71428573, 'rec0': 0.8095238, 'rec1': 0.8695652, 'auroc': 0.8747412008281574, 'auprc': 0.853270445952392, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.875, 'prec1': 0.5, 'rec0': 0.7777778, 'rec1': 0.6666667, 'auroc': 0.7623456790123456, 'auprc': 0.7186670825756749, 'minpse': 0.6666666666666666}
epoch 20
29.835379779338837
validation set
{'acc': 0.83076924, 'prec0': 0.84444445, 'prec1': 0.8, 'rec0': 0.9047619, 'rec1': 0.6956522, 'auroc': 0.8581780538302277, 'auprc': 0.8296982866685485, 'minpse': 0.6956521739130435}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.8490566, 'prec1': 0.5263158, 'rec0': 0.8333333, 'rec1': 0.5555556, 'auroc': 0.7623456790123456, 'auprc': 0.6447635524293046, 'minpse': 0.5555555555555556}
epoch 21
31.009038016200066
validation set
{'acc': 0.84615386, 'prec0': 0.84782606, 'prec1': 0.84210527, 'rec0': 0.9285714, 'rec1': 0.6956522, 'auroc': 0.8726708074534162, 'auprc': 0.8218829937582355, 'minpse': 0.7391304347826086}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8596491, 'prec1': 0.6666667, 'rec0': 0.9074074, 'rec1': 0.5555556, 'auroc': 0.7952674897119342, 'auprc': 0.6077625829224295, 'minpse': 0.6666666666666666}
epoch 22
27.82716093957424
validation set
{'acc': 0.8153846, 'prec0': 0.8, 'prec1': 0.8666667, 'rec0': 0.95238096, 'rec1': 0.5652174, 'auroc': 0.8364389233954452, 'auprc': 0.7998279380251339, 'minpse': 0.6086956521739131}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.83870965, 'prec1': 0.8, 'rec0': 0.962963, 'rec1': 0.44444445, 'auroc': 0.7818930041152264, 'auprc': 0.6881585770239055, 'minpse': 0.5652173913043478}
epoch 23
25.308854162693024
validation set
{'acc': 0.86153847, 'prec0': 0.85106385, 'prec1': 0.8888889, 'rec0': 0.95238096, 'rec1': 0.6956522, 'auroc': 0.8498964803312629, 'auprc': 0.8192738920354169, 'minpse': 0.7391304347826086}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.86440676, 'prec1': 0.7692308, 'rec0': 0.9444444, 'rec1': 0.5555556, 'auroc': 0.8179012345679013, 'auprc': 0.7323885901305831, 'minpse': 0.6111111111111112}
epoch 24
30.834739714860916
validation set
{'acc': 0.83076924, 'prec0': 0.8604651, 'prec1': 0.77272725, 'rec0': 0.88095236, 'rec1': 0.73913044, 'auroc': 0.8674948240165632, 'auprc': 0.8422150964525468, 'minpse': 0.7391304347826086}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8727273, 'prec1': 0.64705884, 'rec0': 0.8888889, 'rec1': 0.6111111, 'auroc': 0.7829218106995884, 'auprc': 0.684057320544232, 'minpse': 0.65}
epoch 25
25.647879369556904
validation set
{'acc': 0.8153846, 'prec0': 0.9166667, 'prec1': 0.6896552, 'rec0': 0.78571427, 'rec1': 0.8695652, 'auroc': 0.8343685300207039, 'auprc': 0.6554888368867839, 'minpse': 0.7391304347826086}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.877551, 'prec1': 0.5217391, 'rec0': 0.7962963, 'rec1': 0.6666667, 'auroc': 0.808641975308642, 'auprc': 0.6240583038300752, 'minpse': 0.5789473684210527}
epoch 26
24.27441254258156
validation set
{'acc': 0.7692308, 'prec0': 0.90909094, 'prec1': 0.625, 'rec0': 0.71428573, 'rec1': 0.8695652, 'auroc': 0.8333333333333334, 'auprc': 0.7658753828549294, 'minpse': 0.7083333333333334}
Mortality Prediction on the test set
{'acc': 0.6944444, 'prec0': 0.8636364, 'prec1': 0.42857143, 'rec0': 0.7037037, 'rec1': 0.6666667, 'auroc': 0.7921810699588477, 'auprc': 0.6650001772325406, 'minpse': 0.5555555555555556}
epoch 27
24.78449982404709
validation set
{'acc': 0.86153847, 'prec0': 0.88372093, 'prec1': 0.8181818, 'rec0': 0.9047619, 'rec1': 0.7826087, 'auroc': 0.8881987577639752, 'auprc': 0.8713168922709009, 'minpse': 0.782608695652174}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.875, 'prec1': 0.6875, 'rec0': 0.9074074, 'rec1': 0.6111111, 'auroc': 0.7458847736625515, 'auprc': 0.5221746214001982, 'minpse': 0.6111111111111112}
epoch 28
26.97167171537876
validation set
{'acc': 0.84615386, 'prec0': 0.88095236, 'prec1': 0.7826087, 'rec0': 0.88095236, 'rec1': 0.7826087, 'auroc': 0.8581780538302277, 'auprc': 0.8086871814657106, 'minpse': 0.782608695652174}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8679245, 'prec1': 0.57894737, 'rec0': 0.8518519, 'rec1': 0.6111111, 'auroc': 0.7397119341563786, 'auprc': 0.5936725196899371, 'minpse': 0.6111111111111112}
epoch 29
24.7845271974802
validation set
{'acc': 0.8769231, 'prec0': 0.84, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.65217394, 'auroc': 0.855072463768116, 'auprc': 0.850434592009679, 'minpse': 0.7391304347826086}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.8448276, 'prec1': 0.64285713, 'rec0': 0.9074074, 'rec1': 0.5, 'auroc': 0.8004115226337448, 'auprc': 0.6824617637504449, 'minpse': 0.6111111111111112}
epoch 30
23.21109876036644
validation set
{'acc': 0.8923077, 'prec0': 0.87234044, 'prec1': 0.9444444, 'rec0': 0.97619045, 'rec1': 0.73913044, 'auroc': 0.8467908902691511, 'auprc': 0.8387591633913425, 'minpse': 0.782608695652174}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.84745765, 'prec1': 0.6923077, 'rec0': 0.9259259, 'rec1': 0.5, 'auroc': 0.7705761316872429, 'auprc': 0.5696967383099714, 'minpse': 0.6111111111111112}
epoch 31
25.789387837052345
validation set
{'acc': 0.73846155, 'prec0': 0.8378378, 'prec1': 0.60714287, 'rec0': 0.7380952, 'rec1': 0.73913044, 'auroc': 0.7329192546583851, 'auprc': 0.5746148927335446, 'minpse': 0.625}
Mortality Prediction on the test set
{'acc': 0.6527778, 'prec0': 0.82222223, 'prec1': 0.37037036, 'rec0': 0.6851852, 'rec1': 0.5555556, 'auroc': 0.6286008230452674, 'auprc': 0.4697482706523539, 'minpse': 0.5}
epoch 32
29.049160704016685
validation set
{'acc': 0.75384617, 'prec0': 0.8611111, 'prec1': 0.62068963, 'rec0': 0.7380952, 'rec1': 0.7826087, 'auroc': 0.8115942028985508, 'auprc': 0.7852198575290843, 'minpse': 0.6521739130434783}
Mortality Prediction on the test set
{'acc': 0.6805556, 'prec0': 0.84444445, 'prec1': 0.4074074, 'rec0': 0.7037037, 'rec1': 0.6111111, 'auroc': 0.6862139917695473, 'auprc': 0.4893299697456124, 'minpse': 0.5}
epoch 33
30.16188532114029
validation set
{'acc': 0.84615386, 'prec0': 0.8636364, 'prec1': 0.8095238, 'rec0': 0.9047619, 'rec1': 0.73913044, 'auroc': 0.8623188405797102, 'auprc': 0.8474956436083919, 'minpse': 0.7391304347826086}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.8703704, 'prec1': 0.6111111, 'rec0': 0.8703704, 'rec1': 0.6111111, 'auroc': 0.7685185185185185, 'auprc': 0.6362016833696675, 'minpse': 0.6111111111111112}
epoch 34
25.731997653841972
validation set
{'acc': 0.86153847, 'prec0': 0.902439, 'prec1': 0.7916667, 'rec0': 0.88095236, 'rec1': 0.82608694, 'auroc': 0.8664596273291926, 'auprc': 0.8418166069355575, 'minpse': 0.7916666666666666}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.88, 'prec1': 0.54545456, 'rec0': 0.8148148, 'rec1': 0.6666667, 'auroc': 0.7818930041152263, 'auprc': 0.71125582542366, 'minpse': 0.631578947368421}
epoch 35
21.944553405046463
validation set
{'acc': 0.86153847, 'prec0': 0.9230769, 'prec1': 0.7692308, 'rec0': 0.85714287, 'rec1': 0.8695652, 'auroc': 0.8985507246376812, 'auprc': 0.871126931155874, 'minpse': 0.7916666666666666}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8867925, 'prec1': 0.6315789, 'rec0': 0.8703704, 'rec1': 0.6666667, 'auroc': 0.8343621399176955, 'auprc': 0.7439319972943168, 'minpse': 0.631578947368421}
epoch 36
26.25018799304962
validation set
{'acc': 0.86153847, 'prec0': 0.85106385, 'prec1': 0.8888889, 'rec0': 0.95238096, 'rec1': 0.6956522, 'auroc': 0.8540372670807453, 'auprc': 0.8375617460607454, 'minpse': 0.7391304347826086}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.82258064, 'prec1': 0.7, 'rec0': 0.9444444, 'rec1': 0.3888889, 'auroc': 0.7654320987654321, 'auprc': 0.6106795444178235, 'minpse': 0.55}
epoch 37
27.531406670808792
validation set
{'acc': 0.86153847, 'prec0': 0.85106385, 'prec1': 0.8888889, 'rec0': 0.95238096, 'rec1': 0.6956522, 'auroc': 0.8757763975155279, 'auprc': 0.8648001789386113, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8727273, 'prec1': 0.64705884, 'rec0': 0.8888889, 'rec1': 0.6111111, 'auroc': 0.7479423868312758, 'auprc': 0.64676268376029, 'minpse': 0.6111111111111112}
epoch 38
21.956889495253563
validation set
{'acc': 0.83076924, 'prec0': 0.82978725, 'prec1': 0.8333333, 'rec0': 0.9285714, 'rec1': 0.65217394, 'auroc': 0.8291925465838509, 'auprc': 0.7807470445339935, 'minpse': 0.7083333333333334}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.81666666, 'prec1': 0.5833333, 'rec0': 0.9074074, 'rec1': 0.3888889, 'auroc': 0.7016460905349794, 'auprc': 0.5672211221020836, 'minpse': 0.4444444444444444}
epoch 39
23.833907157182693
validation set
{'acc': 0.83076924, 'prec0': 0.8780488, 'prec1': 0.75, 'rec0': 0.85714287, 'rec1': 0.7826087, 'auroc': 0.888198757763975, 'auprc': 0.8599588955966717, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.86538464, 'prec1': 0.55, 'rec0': 0.8333333, 'rec1': 0.6111111, 'auroc': 0.7438271604938271, 'auprc': 0.6952221089847028, 'minpse': 0.6111111111111112}
Reset trainable parameters of layer = Conv2d(1, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Linear(in_features=512, out_features=1000, bias=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Conv2d(64, 384, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=7200, bias=True)
Reset trainable parameters of layer = Linear(in_features=1000, out_features=6272, bias=True)
Reset trainable parameters of layer = Linear(in_features=7200, out_features=3600, bias=True)
Reset trainable parameters of layer = Linear(in_features=3600, out_features=1800, bias=True)
Reset trainable parameters of layer = Linear(in_features=1800, out_features=400, bias=True)
Reset trainable parameters of layer = Linear(in_features=400, out_features=1, bias=True)
for distribution val
type 0= 49 type 1= 16
for distribution test
type 0= 54 type 1= 18
epoch 0
53.281990706920624
validation set
{'acc': 0.86153847, 'prec0': 0.9166667, 'prec1': 0.7058824, 'rec0': 0.8979592, 'rec1': 0.75, 'auroc': 0.8775510204081632, 'auprc': 0.7270914118676534, 'minpse': 0.7058823529411765}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.9245283, 'prec1': 0.7368421, 'rec0': 0.9074074, 'rec1': 0.7777778, 'auroc': 0.8703703703703705, 'auprc': 0.72725013274855, 'minpse': 0.7368421052631579}
epoch 1
50.673134207725525
validation set
{'acc': 0.83076924, 'prec0': 0.975, 'prec1': 0.6, 'rec0': 0.79591835, 'rec1': 0.9375, 'auroc': 0.8852040816326531, 'auprc': 0.7427650689260976, 'minpse': 0.7058823529411765}
Mortality Prediction on the test set
{'acc': 0.6805556, 'prec0': 0.9189189, 'prec1': 0.42857143, 'rec0': 0.6296296, 'rec1': 0.8333333, 'auroc': 0.8333333333333333, 'auprc': 0.713650348032767, 'minpse': 0.6666666666666666}
epoch 2
44.032977521419525
validation set
{'acc': 0.8, 'prec0': 0.95, 'prec1': 0.56, 'rec0': 0.7755102, 'rec1': 0.875, 'auroc': 0.8507653061224489, 'auprc': 0.6582868472816454, 'minpse': 0.625}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.9148936, 'prec1': 0.56, 'rec0': 0.7962963, 'rec1': 0.7777778, 'auroc': 0.8868312757201646, 'auprc': 0.7442112702174594, 'minpse': 0.7222222222222222}
epoch 3
44.84775334596634
validation set
{'acc': 0.8153846, 'prec0': 0.9512195, 'prec1': 0.5833333, 'rec0': 0.79591835, 'rec1': 0.875, 'auroc': 0.8571428571428571, 'auprc': 0.6397827037311794, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8979592, 'prec1': 0.5652174, 'rec0': 0.8148148, 'rec1': 0.7222222, 'auroc': 0.8724279835390947, 'auprc': 0.8028856277945984, 'minpse': 0.6666666666666666}
epoch 4
41.649671256542206
validation set
{'acc': 0.63076925, 'prec0': 1.0, 'prec1': 0.4, 'rec0': 0.5102041, 'rec1': 1.0, 'auroc': 0.8099489795918368, 'auprc': 0.6582380595828738, 'minpse': 0.5294117647058824}
Mortality Prediction on the test set
{'acc': 0.6527778, 'prec0': 0.8918919, 'prec1': 0.4, 'rec0': 0.6111111, 'rec1': 0.7777778, 'auroc': 0.8076131687242798, 'auprc': 0.7073749178004192, 'minpse': 0.6111111111111112}
epoch 5
43.3712782561779
validation set
{'acc': 0.8, 'prec0': 0.95, 'prec1': 0.56, 'rec0': 0.7755102, 'rec1': 0.875, 'auroc': 0.8584183673469388, 'auprc': 0.7707303782330455, 'minpse': 0.7058823529411765}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.877551, 'prec1': 0.5217391, 'rec0': 0.7962963, 'rec1': 0.6666667, 'auroc': 0.845679012345679, 'auprc': 0.7331477528241807, 'minpse': 0.6666666666666666}
epoch 6
35.792020350694656
validation set
{'acc': 0.84615386, 'prec0': 0.8979592, 'prec1': 0.6875, 'rec0': 0.8979592, 'rec1': 0.6875, 'auroc': 0.8252551020408163, 'auprc': 0.7619025371401961, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.8269231, 'prec1': 0.45, 'rec0': 0.7962963, 'rec1': 0.5, 'auroc': 0.7417695473251028, 'auprc': 0.5701170921726512, 'minpse': 0.47368421052631576}
epoch 7
38.68979801237583
validation set
{'acc': 0.84615386, 'prec0': 0.9148936, 'prec1': 0.6666667, 'rec0': 0.877551, 'rec1': 0.75, 'auroc': 0.8341836734693878, 'auprc': 0.7152621994761037, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.8888889, 'prec1': 0.6666667, 'rec0': 0.8888889, 'rec1': 0.6666667, 'auroc': 0.8724279835390947, 'auprc': 0.7706675407956677, 'minpse': 0.6666666666666666}
epoch 8
45.32672429084778
validation set
{'acc': 0.83076924, 'prec0': 0.95238096, 'prec1': 0.6086956, 'rec0': 0.81632656, 'rec1': 0.875, 'auroc': 0.8762755102040818, 'auprc': 0.8114603437243703, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.88461536, 'prec1': 0.6, 'rec0': 0.8518519, 'rec1': 0.6666667, 'auroc': 0.8580246913580247, 'auprc': 0.7612928525804598, 'minpse': 0.631578947368421}
epoch 9
38.43084555864334
validation set
{'acc': 0.8769231, 'prec0': 0.9019608, 'prec1': 0.78571427, 'rec0': 0.93877554, 'rec1': 0.6875, 'auroc': 0.8290816326530612, 'auprc': 0.7106692979037379, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8727273, 'prec1': 0.64705884, 'rec0': 0.8888889, 'rec1': 0.6111111, 'auroc': 0.8425925925925927, 'auprc': 0.7602216491085002, 'minpse': 0.631578947368421}
epoch 10
32.49106848239899
validation set
{'acc': 0.8153846, 'prec0': 0.9111111, 'prec1': 0.6, 'rec0': 0.8367347, 'rec1': 0.75, 'auroc': 0.8239795918367346, 'auprc': 0.6859172866189274, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.9019608, 'prec1': 0.61904764, 'rec0': 0.8518519, 'rec1': 0.7222222, 'auroc': 0.831275720164609, 'auprc': 0.7468714288705183, 'minpse': 0.6842105263157895}
epoch 11
36.921226978302
validation set
{'acc': 0.83076924, 'prec0': 0.8958333, 'prec1': 0.64705884, 'rec0': 0.877551, 'rec1': 0.6875, 'auroc': 0.798469387755102, 'auprc': 0.7081429064168909, 'minpse': 0.6470588235294118}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.86, 'prec1': 0.5, 'rec0': 0.7962963, 'rec1': 0.6111111, 'auroc': 0.7407407407407408, 'auprc': 0.6763449212455546, 'minpse': 0.5789473684210527}
epoch 12
32.28350481390953
validation set
{'acc': 0.84615386, 'prec0': 0.88235295, 'prec1': 0.71428573, 'rec0': 0.9183673, 'rec1': 0.625, 'auroc': 0.8061224489795918, 'auprc': 0.6280176496577207, 'minpse': 0.625}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.86538464, 'prec1': 0.55, 'rec0': 0.8333333, 'rec1': 0.6111111, 'auroc': 0.8374485596707819, 'auprc': 0.6285576857467128, 'minpse': 0.6111111111111112}
epoch 13
38.31963962316513
validation set
{'acc': 0.7846154, 'prec0': 0.8888889, 'prec1': 0.55, 'rec0': 0.81632656, 'rec1': 0.6875, 'auroc': 0.8010204081632654, 'auprc': 0.6195697389037097, 'minpse': 0.625}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.8627451, 'prec1': 0.52380955, 'rec0': 0.8148148, 'rec1': 0.6111111, 'auroc': 0.8333333333333333, 'auprc': 0.7185843321814097, 'minpse': 0.6111111111111112}
epoch 14
35.548977598547935
validation set
{'acc': 0.8153846, 'prec0': 0.89361703, 'prec1': 0.6111111, 'rec0': 0.85714287, 'rec1': 0.6875, 'auroc': 0.7716836734693877, 'auprc': 0.5917641337873261, 'minpse': 0.625}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8727273, 'prec1': 0.64705884, 'rec0': 0.8888889, 'rec1': 0.6111111, 'auroc': 0.8353909465020577, 'auprc': 0.6884446815292072, 'minpse': 0.6666666666666666}
epoch 15
32.32788468897343
validation set
{'acc': 0.83076924, 'prec0': 0.9130435, 'prec1': 0.6315789, 'rec0': 0.85714287, 'rec1': 0.75, 'auroc': 0.8316326530612246, 'auprc': 0.6209902524011905, 'minpse': 0.6470588235294118}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.8888889, 'prec1': 0.6666667, 'rec0': 0.8888889, 'rec1': 0.6666667, 'auroc': 0.8641975308641976, 'auprc': 0.7881876870115967, 'minpse': 0.6666666666666666}
epoch 16
31.016039490699768
validation set
{'acc': 0.86153847, 'prec0': 0.88461536, 'prec1': 0.7692308, 'rec0': 0.93877554, 'rec1': 0.625, 'auroc': 0.8099489795918368, 'auprc': 0.7300937698001329, 'minpse': 0.625}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.82258064, 'prec1': 0.7, 'rec0': 0.9444444, 'rec1': 0.3888889, 'auroc': 0.8034979423868313, 'auprc': 0.6832320463673065, 'minpse': 0.6111111111111112}
epoch 17
29.582175314426422
validation set
{'acc': 0.75384617, 'prec0': 0.9230769, 'prec1': 0.5, 'rec0': 0.7346939, 'rec1': 0.8125, 'auroc': 0.8137755102040817, 'auprc': 0.7479784850911673, 'minpse': 0.625}
Mortality Prediction on the test set
{'acc': 0.6388889, 'prec0': 0.8888889, 'prec1': 0.3888889, 'rec0': 0.5925926, 'rec1': 0.7777778, 'auroc': 0.771604938271605, 'auprc': 0.6828485553549368, 'minpse': 0.5555555555555556}
epoch 18
28.741081029176712
validation set
{'acc': 0.8, 'prec0': 0.875, 'prec1': 0.5882353, 'rec0': 0.85714287, 'rec1': 0.625, 'auroc': 0.7538265306122449, 'auprc': 0.6185248642313408, 'minpse': 0.5882352941176471}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.86538464, 'prec1': 0.55, 'rec0': 0.8333333, 'rec1': 0.6111111, 'auroc': 0.7592592592592592, 'auprc': 0.6509453387161162, 'minpse': 0.6111111111111112}
epoch 19
26.472244948148727
validation set
{'acc': 0.8769231, 'prec0': 0.9019608, 'prec1': 0.78571427, 'rec0': 0.93877554, 'rec1': 0.6875, 'auroc': 0.8201530612244898, 'auprc': 0.6096889621051425, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.85, 'prec1': 0.75, 'rec0': 0.9444444, 'rec1': 0.5, 'auroc': 0.7746913580246915, 'auprc': 0.7158979113353602, 'minpse': 0.6111111111111112}
epoch 20
30.368282556533813
validation set
{'acc': 0.84615386, 'prec0': 0.9148936, 'prec1': 0.6666667, 'rec0': 0.877551, 'rec1': 0.75, 'auroc': 0.8354591836734693, 'auprc': 0.7423809972707032, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.877551, 'prec1': 0.5217391, 'rec0': 0.7962963, 'rec1': 0.6666667, 'auroc': 0.7623456790123456, 'auprc': 0.6989935599507706, 'minpse': 0.6666666666666666}
epoch 21
25.141690641641617
validation set
{'acc': 0.7846154, 'prec0': 0.90697676, 'prec1': 0.54545456, 'rec0': 0.79591835, 'rec1': 0.75, 'auroc': 0.8201530612244898, 'auprc': 0.6659559267325812, 'minpse': 0.5882352941176471}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.9019608, 'prec1': 0.61904764, 'rec0': 0.8518519, 'rec1': 0.7222222, 'auroc': 0.8148148148148149, 'auprc': 0.7842324915664073, 'minpse': 0.6842105263157895}
epoch 22
31.545495003461838
validation set
{'acc': 0.75384617, 'prec0': 0.9714286, 'prec1': 0.5, 'rec0': 0.6938776, 'rec1': 0.9375, 'auroc': 0.8762755102040817, 'auprc': 0.7543790082913269, 'minpse': 0.625}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.8958333, 'prec1': 0.5416667, 'rec0': 0.7962963, 'rec1': 0.7222222, 'auroc': 0.8261316872427984, 'auprc': 0.7394233993887358, 'minpse': 0.65}
epoch 23
33.70970490574837
validation set
{'acc': 0.84615386, 'prec0': 0.93333334, 'prec1': 0.65, 'rec0': 0.85714287, 'rec1': 0.8125, 'auroc': 0.8698979591836735, 'auprc': 0.6884081286411535, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.8703704, 'prec1': 0.6111111, 'rec0': 0.8703704, 'rec1': 0.6111111, 'auroc': 0.7602880658436214, 'auprc': 0.7111996922014433, 'minpse': 0.6111111111111112}
epoch 24
26.910685941576958
validation set
{'acc': 0.8153846, 'prec0': 0.9111111, 'prec1': 0.6, 'rec0': 0.8367347, 'rec1': 0.75, 'auroc': 0.8482142857142857, 'auprc': 0.7256503802393682, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.8703704, 'prec1': 0.6111111, 'rec0': 0.8703704, 'rec1': 0.6111111, 'auroc': 0.8045267489711934, 'auprc': 0.6938946741459028, 'minpse': 0.6111111111111112}
epoch 25
27.21878010034561
validation set
{'acc': 0.7076923, 'prec0': 0.96875, 'prec1': 0.45454547, 'rec0': 0.63265306, 'rec1': 0.9375, 'auroc': 0.8035714285714285, 'auprc': 0.6641750821793477, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.6388889, 'prec0': 0.8888889, 'prec1': 0.3888889, 'rec0': 0.5925926, 'rec1': 0.7777778, 'auroc': 0.8405349794238683, 'auprc': 0.7222621629130022, 'minpse': 0.631578947368421}
epoch 26
23.992588967084885
validation set
{'acc': 0.8153846, 'prec0': 0.9111111, 'prec1': 0.6, 'rec0': 0.8367347, 'rec1': 0.75, 'auroc': 0.8520408163265306, 'auprc': 0.7179477613530172, 'minpse': 0.625}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8679245, 'prec1': 0.57894737, 'rec0': 0.8518519, 'rec1': 0.6111111, 'auroc': 0.8209876543209876, 'auprc': 0.7161520391017132, 'minpse': 0.6111111111111112}
epoch 27
29.535045325756073
validation set
{'acc': 0.8769231, 'prec0': 0.9183673, 'prec1': 0.75, 'rec0': 0.9183673, 'rec1': 0.75, 'auroc': 0.8788265306122449, 'auprc': 0.7602900526226765, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.89285713, 'prec1': 0.75, 'rec0': 0.9259259, 'rec1': 0.6666667, 'auroc': 0.7942386831275721, 'auprc': 0.7319625956913989, 'minpse': 0.6666666666666666}
epoch 28
25.258056916296482
validation set
{'acc': 0.7692308, 'prec0': 0.925, 'prec1': 0.52, 'rec0': 0.75510204, 'rec1': 0.8125, 'auroc': 0.8278061224489797, 'auprc': 0.703171763807401, 'minpse': 0.625}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.9302326, 'prec1': 0.51724136, 'rec0': 0.7407407, 'rec1': 0.8333333, 'auroc': 0.8539094650205762, 'auprc': 0.7538028536890429, 'minpse': 0.6111111111111112}
epoch 29
38.913733035326004
validation set
{'acc': 0.8769231, 'prec0': 0.9019608, 'prec1': 0.78571427, 'rec0': 0.93877554, 'rec1': 0.6875, 'auroc': 0.8635204081632653, 'auprc': 0.7364805364103273, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.8448276, 'prec1': 0.64285713, 'rec0': 0.9074074, 'rec1': 0.5, 'auroc': 0.7983539094650206, 'auprc': 0.6796143640443782, 'minpse': 0.6}
epoch 30
26.449687093496323
validation set
{'acc': 0.8769231, 'prec0': 0.8867925, 'prec1': 0.8333333, 'rec0': 0.9591837, 'rec1': 0.625, 'auroc': 0.8150510204081634, 'auprc': 0.6766887001724062, 'minpse': 0.625}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.8666667, 'prec1': 0.8333333, 'rec0': 0.962963, 'rec1': 0.5555556, 'auroc': 0.8179012345679013, 'auprc': 0.7115875603496162, 'minpse': 0.6111111111111112}
epoch 31
28.087994009256363
validation set
{'acc': 0.8923077, 'prec0': 0.90384614, 'prec1': 0.84615386, 'rec0': 0.9591837, 'rec1': 0.6875, 'auroc': 0.8290816326530612, 'auprc': 0.7627336640395055, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.86206895, 'prec1': 0.71428573, 'rec0': 0.9259259, 'rec1': 0.5555556, 'auroc': 0.7901234567901234, 'auprc': 0.6983261735942784, 'minpse': 0.6666666666666666}
epoch 32
26.542832493782043
validation set
{'acc': 0.8153846, 'prec0': 0.89361703, 'prec1': 0.6111111, 'rec0': 0.85714287, 'rec1': 0.6875, 'auroc': 0.8316326530612246, 'auprc': 0.7252458001006268, 'minpse': 0.625}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.8703704, 'prec1': 0.6111111, 'rec0': 0.8703704, 'rec1': 0.6111111, 'auroc': 0.7818930041152262, 'auprc': 0.7192653635965778, 'minpse': 0.6111111111111112}
epoch 33
23.533764570951462
validation set
{'acc': 0.7076923, 'prec0': 0.9411765, 'prec1': 0.4516129, 'rec0': 0.6530612, 'rec1': 0.875, 'auroc': 0.7793367346938774, 'auprc': 0.6674301931027365, 'minpse': 0.5882352941176471}
Mortality Prediction on the test set
{'acc': 0.625, 'prec0': 0.8857143, 'prec1': 0.3783784, 'rec0': 0.5740741, 'rec1': 0.7777778, 'auroc': 0.8374485596707819, 'auprc': 0.6863977899739312, 'minpse': 0.6666666666666666}
epoch 34
21.106674298644066
validation set
{'acc': 0.83076924, 'prec0': 0.88, 'prec1': 0.6666667, 'rec0': 0.8979592, 'rec1': 0.625, 'auroc': 0.764030612244898, 'auprc': 0.6566117251948373, 'minpse': 0.625}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.8909091, 'prec1': 0.7058824, 'rec0': 0.9074074, 'rec1': 0.6666667, 'auroc': 0.8744855967078189, 'auprc': 0.7227310519153762, 'minpse': 0.6666666666666666}
epoch 35
29.904687732458115
validation set
{'acc': 0.84615386, 'prec0': 0.9148936, 'prec1': 0.6666667, 'rec0': 0.877551, 'rec1': 0.75, 'auroc': 0.8622448979591837, 'auprc': 0.7085402799320495, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.9056604, 'prec1': 0.68421054, 'rec0': 0.8888889, 'rec1': 0.7222222, 'auroc': 0.8137860082304527, 'auprc': 0.7360388140993099, 'minpse': 0.7222222222222222}
epoch 36
22.71432939171791
validation set
{'acc': 0.86153847, 'prec0': 0.9, 'prec1': 0.73333335, 'rec0': 0.9183673, 'rec1': 0.6875, 'auroc': 0.8112244897959184, 'auprc': 0.6074504554598211, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.86440676, 'prec1': 0.7692308, 'rec0': 0.9444444, 'rec1': 0.5555556, 'auroc': 0.8024691358024691, 'auprc': 0.7207639738310178, 'minpse': 0.6111111111111112}
epoch 37
22.64479637145996
validation set
{'acc': 0.7692308, 'prec0': 0.9047619, 'prec1': 0.5217391, 'rec0': 0.7755102, 'rec1': 0.75, 'auroc': 0.7614795918367347, 'auprc': 0.4509314063569459, 'minpse': 0.5625}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.87234044, 'prec1': 0.48, 'rec0': 0.7592593, 'rec1': 0.6666667, 'auroc': 0.7541152263374485, 'auprc': 0.4432210511972809, 'minpse': 0.5454545454545454}
epoch 38
20.15570542216301
validation set
{'acc': 0.86153847, 'prec0': 0.88461536, 'prec1': 0.7692308, 'rec0': 0.93877554, 'rec1': 0.625, 'auroc': 0.7933673469387754, 'auprc': 0.6124765991222921, 'minpse': 0.625}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8727273, 'prec1': 0.64705884, 'rec0': 0.8888889, 'rec1': 0.6111111, 'auroc': 0.8497942386831275, 'auprc': 0.5771748526840934, 'minpse': 0.6111111111111112}
epoch 39
25.178443576209247
validation set
{'acc': 0.8923077, 'prec0': 0.92, 'prec1': 0.8, 'rec0': 0.93877554, 'rec1': 0.75, 'auroc': 0.832908163265306, 'auprc': 0.7167544470990681, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.9074074, 'prec1': 0.7222222, 'rec0': 0.9074074, 'rec1': 0.7222222, 'auroc': 0.8621399176954732, 'auprc': 0.7864291593569167, 'minpse': 0.7222222222222222}
Reset trainable parameters of layer = Conv2d(1, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Linear(in_features=512, out_features=1000, bias=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Conv2d(64, 384, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=7200, bias=True)
Reset trainable parameters of layer = Linear(in_features=1000, out_features=6272, bias=True)
Reset trainable parameters of layer = Linear(in_features=7200, out_features=3600, bias=True)
Reset trainable parameters of layer = Linear(in_features=3600, out_features=1800, bias=True)
Reset trainable parameters of layer = Linear(in_features=1800, out_features=400, bias=True)
Reset trainable parameters of layer = Linear(in_features=400, out_features=1, bias=True)
for distribution val
type 0= 41 type 1= 23
for distribution test
type 0= 54 type 1= 18
epoch 0
53.333290696144104
validation set
{'acc': 0.921875, 'prec0': 0.9285714, 'prec1': 0.90909094, 'rec0': 0.9512195, 'rec1': 0.8695652, 'auroc': 0.9469777306468716, 'auprc': 0.9399404723337117, 'minpse': 0.8695652173913043}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.8888889, 'prec1': 0.4814815, 'rec0': 0.7407407, 'rec1': 0.7222222, 'auroc': 0.8539094650205762, 'auprc': 0.7575130295098678, 'minpse': 0.631578947368421}
epoch 1
48.472640216350555
validation set
{'acc': 0.9375, 'prec0': 0.9512195, 'prec1': 0.9130435, 'rec0': 0.9512195, 'rec1': 0.9130435, 'auroc': 0.9469777306468717, 'auprc': 0.9248061921332134, 'minpse': 0.9130434782608695}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.9148936, 'prec1': 0.56, 'rec0': 0.7962963, 'rec1': 0.7777778, 'auroc': 0.8436213991769548, 'auprc': 0.6339282180389285, 'minpse': 0.5833333333333334}
epoch 2
50.11272954940796
validation set
{'acc': 0.859375, 'prec0': 0.9444444, 'prec1': 0.75, 'rec0': 0.8292683, 'rec1': 0.9130435, 'auroc': 0.9215270413573701, 'auprc': 0.8994073711463721, 'minpse': 0.8260869565217391}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.9148936, 'prec1': 0.56, 'rec0': 0.7962963, 'rec1': 0.7777778, 'auroc': 0.8827160493827161, 'auprc': 0.7935987082322464, 'minpse': 0.7222222222222222}
epoch 3
45.79183501005173
validation set
{'acc': 0.859375, 'prec0': 0.8636364, 'prec1': 0.85, 'rec0': 0.9268293, 'rec1': 0.73913044, 'auroc': 0.8727465535524921, 'auprc': 0.8621868235097596, 'minpse': 0.7391304347826086}
Mortality Prediction on the test set
{'acc': 0.6805556, 'prec0': 0.7924528, 'prec1': 0.36842105, 'rec0': 0.7777778, 'rec1': 0.3888889, 'auroc': 0.6409465020576133, 'auprc': 0.4082064599142044, 'minpse': 0.391304347826087}
epoch 4
44.29386132955551
validation set
{'acc': 0.921875, 'prec0': 0.95, 'prec1': 0.875, 'rec0': 0.9268293, 'rec1': 0.9130435, 'auroc': 0.9448568398727466, 'auprc': 0.9349145477310037, 'minpse': 0.875}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.9375, 'prec1': 0.625, 'rec0': 0.8333333, 'rec1': 0.8333333, 'auroc': 0.8888888888888888, 'auprc': 0.7858168612163877, 'minpse': 0.7}
epoch 5
42.79610803723335
validation set
{'acc': 0.890625, 'prec0': 0.925, 'prec1': 0.8333333, 'rec0': 0.902439, 'rec1': 0.8695652, 'auroc': 0.9374337221633086, 'auprc': 0.9206811754744574, 'minpse': 0.8333333333333334}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.877193, 'prec1': 0.73333335, 'rec0': 0.9259259, 'rec1': 0.6111111, 'auroc': 0.8713991769547326, 'auprc': 0.7700863062664818, 'minpse': 0.7222222222222222}
epoch 6
39.770605862140656
validation set
{'acc': 0.90625, 'prec0': 0.8888889, 'prec1': 0.94736844, 'rec0': 0.9756098, 'rec1': 0.7826087, 'auroc': 0.9310710498409333, 'auprc': 0.9254630591075054, 'minpse': 0.8260869565217391}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.84745765, 'prec1': 0.6923077, 'rec0': 0.9259259, 'rec1': 0.5, 'auroc': 0.815843621399177, 'auprc': 0.6846669172793847, 'minpse': 0.7222222222222222}
epoch 7
34.778486639261246
validation set
{'acc': 0.859375, 'prec0': 0.9705882, 'prec1': 0.73333335, 'rec0': 0.80487806, 'rec1': 0.95652175, 'auroc': 0.9109225874867445, 'auprc': 0.7779875363700635, 'minpse': 0.782608695652174}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.9268293, 'prec1': 0.48387095, 'rec0': 0.7037037, 'rec1': 0.8333333, 'auroc': 0.8569958847736625, 'auprc': 0.6289693448262268, 'minpse': 0.6190476190476191}
epoch 8
39.941882371902466
validation set
{'acc': 0.890625, 'prec0': 0.8863636, 'prec1': 0.9, 'rec0': 0.9512195, 'rec1': 0.7826087, 'auroc': 0.9469777306468716, 'auprc': 0.9252803894378996, 'minpse': 0.782608695652174}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.852459, 'prec1': 0.8181818, 'rec0': 0.962963, 'rec1': 0.5, 'auroc': 0.8333333333333334, 'auprc': 0.7379729911089778, 'minpse': 0.6111111111111112}
epoch 9
38.07716628909111
validation set
{'acc': 0.875, 'prec0': 0.88372093, 'prec1': 0.85714287, 'rec0': 0.9268293, 'rec1': 0.7826087, 'auroc': 0.9151643690349947, 'auprc': 0.9037777621680811, 'minpse': 0.782608695652174}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.8703704, 'prec1': 0.6111111, 'rec0': 0.8703704, 'rec1': 0.6111111, 'auroc': 0.7746913580246914, 'auprc': 0.6723490518304868, 'minpse': 0.6111111111111112}
epoch 10
35.279155015945435
validation set
{'acc': 0.90625, 'prec0': 0.94871795, 'prec1': 0.84, 'rec0': 0.902439, 'rec1': 0.9130435, 'auroc': 0.9300106044538706, 'auprc': 0.8908304010527989, 'minpse': 0.84}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.9361702, 'prec1': 0.6, 'rec0': 0.8148148, 'rec1': 0.8333333, 'auroc': 0.8096707818930041, 'auprc': 0.4902407597902981, 'minpse': 0.631578947368421}
epoch 11
40.10596722364426
validation set
{'acc': 0.84375, 'prec0': 0.969697, 'prec1': 0.7096774, 'rec0': 0.7804878, 'rec1': 0.95652175, 'auroc': 0.9321314952279958, 'auprc': 0.9163916958042941, 'minpse': 0.7916666666666666}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.925, 'prec1': 0.46875, 'rec0': 0.6851852, 'rec1': 0.8333333, 'auroc': 0.8323045267489713, 'auprc': 0.6691762373718299, 'minpse': 0.5555555555555556}
epoch 12
29.386778950691223
validation set
{'acc': 0.90625, 'prec0': 0.90697676, 'prec1': 0.9047619, 'rec0': 0.9512195, 'rec1': 0.82608694, 'auroc': 0.934252386002121, 'auprc': 0.9137704724314022, 'minpse': 0.8333333333333334}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.8518519, 'prec1': 0.5555556, 'rec0': 0.8518519, 'rec1': 0.5555556, 'auroc': 0.7345679012345679, 'auprc': 0.622969213193773, 'minpse': 0.5555555555555556}
epoch 13
34.09011325240135
validation set
{'acc': 0.84375, 'prec0': 0.9189189, 'prec1': 0.7407407, 'rec0': 0.8292683, 'rec1': 0.8695652, 'auroc': 0.9151643690349947, 'auprc': 0.8758097902176144, 'minpse': 0.782608695652174}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.8909091, 'prec1': 0.7058824, 'rec0': 0.9074074, 'rec1': 0.6666667, 'auroc': 0.8220164609053497, 'auprc': 0.6967841209079526, 'minpse': 0.6666666666666666}
epoch 14
34.32107898592949
validation set
{'acc': 0.890625, 'prec0': 0.94736844, 'prec1': 0.8076923, 'rec0': 0.8780488, 'rec1': 0.9130435, 'auroc': 0.9247083775185577, 'auprc': 0.9083720977754788, 'minpse': 0.8333333333333334}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.86538464, 'prec1': 0.55, 'rec0': 0.8333333, 'rec1': 0.6111111, 'auroc': 0.7623456790123457, 'auprc': 0.6870821401022742, 'minpse': 0.6111111111111112}
epoch 15
30.939968168735504
validation set
{'acc': 0.78125, 'prec0': 0.8292683, 'prec1': 0.6956522, 'rec0': 0.8292683, 'rec1': 0.6956522, 'auroc': 0.8303287380699894, 'auprc': 0.7847958503648944, 'minpse': 0.6956521739130435}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8545455, 'prec1': 0.5882353, 'rec0': 0.8703704, 'rec1': 0.5555556, 'auroc': 0.712962962962963, 'auprc': 0.6116017652749112, 'minpse': 0.6111111111111112}
epoch 16
29.835723638534546
validation set
{'acc': 0.734375, 'prec0': 0.9285714, 'prec1': 0.5833333, 'rec0': 0.63414633, 'rec1': 0.9130435, 'auroc': 0.8515376458112407, 'auprc': 0.7855290533881594, 'minpse': 0.6521739130434783}
Mortality Prediction on the test set
{'acc': 0.6527778, 'prec0': 0.93939394, 'prec1': 0.41025642, 'rec0': 0.5740741, 'rec1': 0.8888889, 'auroc': 0.8292181069958847, 'auprc': 0.644118427208086, 'minpse': 0.5555555555555556}
epoch 17
27.035024493932724
validation set
{'acc': 0.796875, 'prec0': 0.85, 'prec1': 0.7083333, 'rec0': 0.8292683, 'rec1': 0.73913044, 'auroc': 0.8515376458112408, 'auprc': 0.8194803765505051, 'minpse': 0.7083333333333334}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.8703704, 'prec1': 0.6111111, 'rec0': 0.8703704, 'rec1': 0.6111111, 'auroc': 0.8127572016460906, 'auprc': 0.6368510140897929, 'minpse': 0.631578947368421}
epoch 18
32.76656885817647
validation set
{'acc': 0.78125, 'prec0': 0.8648649, 'prec1': 0.6666667, 'rec0': 0.7804878, 'rec1': 0.7826087, 'auroc': 0.846235418875928, 'auprc': 0.7978831955816892, 'minpse': 0.6956521739130435}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.86, 'prec1': 0.5, 'rec0': 0.7962963, 'rec1': 0.6111111, 'auroc': 0.7469135802469136, 'auprc': 0.47673079446140554, 'minpse': 0.5555555555555556}
epoch 19
25.9970144033432
validation set
{'acc': 0.84375, 'prec0': 0.84444445, 'prec1': 0.84210527, 'rec0': 0.9268293, 'rec1': 0.6956522, 'auroc': 0.8600212089077413, 'auprc': 0.8264275219942171, 'minpse': 0.7391304347826086}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.85714287, 'prec1': 0.625, 'rec0': 0.8888889, 'rec1': 0.5555556, 'auroc': 0.7489711934156379, 'auprc': 0.5717608907173454, 'minpse': 0.5555555555555556}
epoch 20
34.162239879369736
validation set
{'acc': 0.859375, 'prec0': 0.8636364, 'prec1': 0.85, 'rec0': 0.9268293, 'rec1': 0.73913044, 'auroc': 0.8960763520678685, 'auprc': 0.8522139885024504, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8545455, 'prec1': 0.5882353, 'rec0': 0.8703704, 'rec1': 0.5555556, 'auroc': 0.7654320987654322, 'auprc': 0.6499857883802045, 'minpse': 0.5555555555555556}
epoch 21
28.994169138371944
validation set
{'acc': 0.8125, 'prec0': 0.82222223, 'prec1': 0.7894737, 'rec0': 0.902439, 'rec1': 0.65217394, 'auroc': 0.8324496288441146, 'auprc': 0.7969652918927039, 'minpse': 0.6521739130434783}
Mortality Prediction on the test set
{'acc': 0.7083333, 'prec0': 0.8113208, 'prec1': 0.42105263, 'rec0': 0.7962963, 'rec1': 0.44444445, 'auroc': 0.6646090534979424, 'auprc': 0.38630910954070086, 'minpse': 0.45454545454545453}
epoch 22
29.53224429488182
validation set
{'acc': 0.828125, 'prec0': 0.85714287, 'prec1': 0.77272725, 'rec0': 0.8780488, 'rec1': 0.73913044, 'auroc': 0.8441145281018028, 'auprc': 0.8173039891647298, 'minpse': 0.7391304347826086}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.8245614, 'prec1': 0.53333336, 'rec0': 0.8703704, 'rec1': 0.44444445, 'auroc': 0.6748971193415637, 'auprc': 0.4692445115550057, 'minpse': 0.5263157894736842}
epoch 23
29.876801669597626
validation set
{'acc': 0.875, 'prec0': 0.88372093, 'prec1': 0.85714287, 'rec0': 0.9268293, 'rec1': 0.7826087, 'auroc': 0.9045599151643691, 'auprc': 0.8930958696464177, 'minpse': 0.7916666666666666}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.86, 'prec1': 0.5, 'rec0': 0.7962963, 'rec1': 0.6111111, 'auroc': 0.8209876543209876, 'auprc': 0.6568966937407743, 'minpse': 0.5238095238095238}
epoch 24
28.77714493870735
validation set
{'acc': 0.859375, 'prec0': 0.8333333, 'prec1': 0.9375, 'rec0': 0.9756098, 'rec1': 0.65217394, 'auroc': 0.8547189819724283, 'auprc': 0.841205095971588, 'minpse': 0.7391304347826086}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8196721, 'prec1': 0.6363636, 'rec0': 0.9259259, 'rec1': 0.3888889, 'auroc': 0.7366255144032922, 'auprc': 0.5215273524229953, 'minpse': 0.5555555555555556}
epoch 25
26.75007513165474
validation set
{'acc': 0.859375, 'prec0': 0.9444444, 'prec1': 0.75, 'rec0': 0.8292683, 'rec1': 0.9130435, 'auroc': 0.9278897136797455, 'auprc': 0.8987483888011185, 'minpse': 0.782608695652174}
Mortality Prediction on the test set
{'acc': 0.6527778, 'prec0': 0.8918919, 'prec1': 0.4, 'rec0': 0.6111111, 'rec1': 0.7777778, 'auroc': 0.7880658436213992, 'auprc': 0.6318699779260022, 'minpse': 0.5555555555555556}
epoch 26
24.786365434527397
validation set
{'acc': 0.78125, 'prec0': 0.8857143, 'prec1': 0.6551724, 'rec0': 0.75609756, 'rec1': 0.82608694, 'auroc': 0.8260869565217391, 'auprc': 0.7836748211252488, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.6388889, 'prec0': 0.8684211, 'prec1': 0.38235295, 'rec0': 0.6111111, 'rec1': 0.7222222, 'auroc': 0.7469135802469136, 'auprc': 0.49393578841465424, 'minpse': 0.5}
epoch 27
25.80283558368683
validation set
{'acc': 0.78125, 'prec0': 1.0, 'prec1': 0.6216216, 'rec0': 0.6585366, 'rec1': 1.0, 'auroc': 0.914103923647932, 'auprc': 0.8587402386166945, 'minpse': 0.7391304347826086}
Mortality Prediction on the test set
{'acc': 0.5833333, 'prec0': 0.96153843, 'prec1': 0.36956522, 'rec0': 0.46296296, 'rec1': 0.9444444, 'auroc': 0.8158436213991769, 'auprc': 0.6692435948027071, 'minpse': 0.5555555555555556}
epoch 28
26.700767248868942
validation set
{'acc': 0.734375, 'prec0': 0.9, 'prec1': 0.5882353, 'rec0': 0.6585366, 'rec1': 0.8695652, 'auroc': 0.8218451749734887, 'auprc': 0.7666329494326827, 'minpse': 0.6538461538461539}
Mortality Prediction on the test set
{'acc': 0.5972222, 'prec0': 0.9310345, 'prec1': 0.37209302, 'rec0': 0.5, 'rec1': 0.8888889, 'auroc': 0.7880658436213992, 'auprc': 0.5905645409748213, 'minpse': 0.6}
epoch 29
24.378768160939217
validation set
{'acc': 0.828125, 'prec0': 0.84090906, 'prec1': 0.8, 'rec0': 0.902439, 'rec1': 0.6956522, 'auroc': 0.8674443266171792, 'auprc': 0.8371746340113722, 'minpse': 0.6956521739130435}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.81666666, 'prec1': 0.5833333, 'rec0': 0.9074074, 'rec1': 0.3888889, 'auroc': 0.7222222222222223, 'auprc': 0.5286909129157145, 'minpse': 0.5}
epoch 30
26.137890249490738
validation set
{'acc': 0.765625, 'prec0': 0.825, 'prec1': 0.6666667, 'rec0': 0.80487806, 'rec1': 0.6956522, 'auroc': 0.7486744432661717, 'auprc': 0.7602094807402338, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.8541667, 'prec1': 0.45833334, 'rec0': 0.7592593, 'rec1': 0.6111111, 'auroc': 0.6965020576131686, 'auprc': 0.5810787533056101, 'minpse': 0.5}
epoch 31
34.54138159751892
validation set
{'acc': 0.78125, 'prec0': 0.8, 'prec1': 0.7368421, 'rec0': 0.8780488, 'rec1': 0.6086956, 'auroc': 0.8144220572640508, 'auprc': 0.7471877692254685, 'minpse': 0.6086956521739131}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.82758623, 'prec1': 0.5714286, 'rec0': 0.8888889, 'rec1': 0.44444445, 'auroc': 0.6532921810699589, 'auprc': 0.49771654848800057, 'minpse': 0.5}
epoch 32
31.249322175979614
validation set
{'acc': 0.8125, 'prec0': 0.93939394, 'prec1': 0.67741936, 'rec0': 0.75609756, 'rec1': 0.9130435, 'auroc': 0.9056203605514316, 'auprc': 0.8729357038937122, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.7083333, 'prec0': 0.8666667, 'prec1': 0.44444445, 'rec0': 0.7222222, 'rec1': 0.6666667, 'auroc': 0.7818930041152263, 'auprc': 0.6833864088887867, 'minpse': 0.5789473684210527}
epoch 33
25.603703543543816
validation set
{'acc': 0.84375, 'prec0': 0.8604651, 'prec1': 0.8095238, 'rec0': 0.902439, 'rec1': 0.73913044, 'auroc': 0.9056203605514316, 'auprc': 0.8671889923690902, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.8245614, 'prec1': 0.53333336, 'rec0': 0.8703704, 'rec1': 0.44444445, 'auroc': 0.7263374485596708, 'auprc': 0.6267019274055742, 'minpse': 0.5}
epoch 34
22.78935906291008
validation set
{'acc': 0.84375, 'prec0': 0.8974359, 'prec1': 0.76, 'rec0': 0.85365856, 'rec1': 0.82608694, 'auroc': 0.9056203605514316, 'auprc': 0.8604890923224964, 'minpse': 0.782608695652174}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.8490566, 'prec1': 0.5263158, 'rec0': 0.8333333, 'rec1': 0.5555556, 'auroc': 0.7026748971193416, 'auprc': 0.6130584408982072, 'minpse': 0.5263157894736842}
epoch 35
20.725368086248636
validation set
{'acc': 0.8125, 'prec0': 0.9677419, 'prec1': 0.6666667, 'rec0': 0.73170733, 'rec1': 0.95652175, 'auroc': 0.9088016967126193, 'auprc': 0.8662652577775266, 'minpse': 0.6956521739130435}
Mortality Prediction on the test set
{'acc': 0.6666667, 'prec0': 0.85714287, 'prec1': 0.4, 'rec0': 0.6666667, 'rec1': 0.6666667, 'auroc': 0.7993827160493826, 'auprc': 0.6761043286933716, 'minpse': 0.6111111111111112}
epoch 36
21.10560356080532
validation set
{'acc': 0.796875, 'prec0': 0.9375, 'prec1': 0.65625, 'rec0': 0.73170733, 'rec1': 0.9130435, 'auroc': 0.9013785790031814, 'auprc': 0.8511547304755628, 'minpse': 0.7391304347826086}
Mortality Prediction on the test set
{'acc': 0.7083333, 'prec0': 0.902439, 'prec1': 0.4516129, 'rec0': 0.6851852, 'rec1': 0.7777778, 'auroc': 0.8251028806584362, 'auprc': 0.6970737810891646, 'minpse': 0.5833333333333334}
epoch 37
28.089679569005966
validation set
{'acc': 0.8125, 'prec0': 0.8918919, 'prec1': 0.7037037, 'rec0': 0.80487806, 'rec1': 0.82608694, 'auroc': 0.8897136797454931, 'auprc': 0.8503582515431397, 'minpse': 0.72}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.86, 'prec1': 0.5, 'rec0': 0.7962963, 'rec1': 0.6111111, 'auroc': 0.7767489711934157, 'auprc': 0.6867631142344428, 'minpse': 0.5555555555555556}
epoch 38
21.733130171895027
validation set
{'acc': 0.8125, 'prec0': 0.8717949, 'prec1': 0.72, 'rec0': 0.8292683, 'rec1': 0.7826087, 'auroc': 0.7857900318133616, 'auprc': 0.7759527091617255, 'minpse': 0.72}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.84313726, 'prec1': 0.47619048, 'rec0': 0.7962963, 'rec1': 0.5555556, 'auroc': 0.697530864197531, 'auprc': 0.6175428325516954, 'minpse': 0.5}
epoch 39
20.1463203728199
validation set
{'acc': 0.8125, 'prec0': 0.9142857, 'prec1': 0.6896552, 'rec0': 0.7804878, 'rec1': 0.8695652, 'auroc': 0.8504772004241782, 'auprc': 0.8371935313090051, 'minpse': 0.7391304347826086}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.8888889, 'prec1': 0.4814815, 'rec0': 0.7407407, 'rec1': 0.7222222, 'auroc': 0.7263374485596708, 'auprc': 0.6534075492323739, 'minpse': 0.5555555555555556}
Reset trainable parameters of layer = Conv2d(1, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Linear(in_features=512, out_features=1000, bias=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Conv2d(64, 384, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=7200, bias=True)
Reset trainable parameters of layer = Linear(in_features=1000, out_features=6272, bias=True)
Reset trainable parameters of layer = Linear(in_features=7200, out_features=3600, bias=True)
Reset trainable parameters of layer = Linear(in_features=3600, out_features=1800, bias=True)
Reset trainable parameters of layer = Linear(in_features=1800, out_features=400, bias=True)
Reset trainable parameters of layer = Linear(in_features=400, out_features=1, bias=True)
for mortality prediction
sensitivity
0.6111111044883728
mean is 0.7888888835906982 and variance is 0.006666665607028789
specificity
0.9814814925193787
mean is 0.8592592597007751 and variance is 0.004128943604860638
accuracy
0.8888888955116272
mean is 0.8416666686534882 and variance is 0.001203703229074371
AUC of ROC
mean is 0.9027777777777779 and variance is 0.00014421285711866392
[0.91255144 0.91255144 0.92489712 0.91358025 0.89506173 0.90329218
 0.89814815 0.89197531 0.88683128 0.88888889]
[0.86580087 0.8125     0.95995423 0.76       0.96449704 0.85691824
 0.82777778 0.93581781 0.85076531 0.94485684]
