nohup: ignoring input
/diskb/yuhua/StageNet/train_SICH_cammap.py:10: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
Preparing training data ... 
Constructing model ... 
available device: cuda:0
Start training ... 
Removing classifier.fc.weight, number of classes has changed.
Removing classifier.fc.bias, number of classes has changed.
for distribution val
type 0= 44 type 1= 21
for distribution test
type 0= 54 type 1= 18
epoch 0
34.27610802650452
validation set
{'acc': 0.33846155, 'prec0': 0.5263158, 'prec1': 0.26086956, 'rec0': 0.22727273, 'rec1': 0.5714286, 'auroc': 0.4523809523809524, 'auprc': 0.4200615948566687, 'minpse': 0.3333333333333333}
Mortality Prediction on the test set
{'acc': 0.4722222, 'prec0': 0.8636364, 'prec1': 0.3, 'rec0': 0.35185185, 'rec1': 0.8333333, 'auroc': 0.7191358024691359, 'auprc': 0.4893545367646924, 'minpse': 0.5}
epoch 1
33.569571018218994
validation set
{'acc': 0.72307694, 'prec0': 0.75, 'prec1': 0.61538464, 'rec0': 0.8863636, 'rec1': 0.3809524, 'auroc': 0.5508658008658008, 'auprc': 0.47954703949428723, 'minpse': 0.42857142857142855}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.8181818, 'prec1': 0.47058824, 'rec0': 0.8333333, 'rec1': 0.44444445, 'auroc': 0.7150205761316872, 'auprc': 0.5987891649674439, 'minpse': 0.4444444444444444}
epoch 2
31.56704032421112
validation set
{'acc': 0.72307694, 'prec0': 0.84210527, 'prec1': 0.5555556, 'rec0': 0.72727275, 'rec1': 0.71428573, 'auroc': 0.7738095238095237, 'auprc': 0.6438880711573949, 'minpse': 0.6190476190476191}
Mortality Prediction on the test set
{'acc': 0.5833333, 'prec0': 0.8, 'prec1': 0.3125, 'rec0': 0.5925926, 'rec1': 0.5555556, 'auroc': 0.5699588477366254, 'auprc': 0.49733554210279995, 'minpse': 0.5}
epoch 3
33.03861451148987
validation set
{'acc': 0.72307694, 'prec0': 0.8095238, 'prec1': 0.5652174, 'rec0': 0.77272725, 'rec1': 0.61904764, 'auroc': 0.6623376623376623, 'auprc': 0.6018399223453601, 'minpse': 0.5652173913043478}
Mortality Prediction on the test set
{'acc': 0.6805556, 'prec0': 0.81632656, 'prec1': 0.39130434, 'rec0': 0.7407407, 'rec1': 0.5, 'auroc': 0.624485596707819, 'auprc': 0.41906532962789905, 'minpse': 0.5}
epoch 4
31.345669269561768
validation set
{'acc': 0.6923077, 'prec0': 0.85294116, 'prec1': 0.516129, 'rec0': 0.65909094, 'rec1': 0.7619048, 'auroc': 0.7294372294372293, 'auprc': 0.5894036808673078, 'minpse': 0.5384615384615384}
Mortality Prediction on the test set
{'acc': 0.5694444, 'prec0': 0.8108108, 'prec1': 0.31428573, 'rec0': 0.5555556, 'rec1': 0.6111111, 'auroc': 0.7160493827160493, 'auprc': 0.5725923923035965, 'minpse': 0.4782608695652174}
epoch 5
29.753660559654236
validation set
{'acc': 0.7846154, 'prec0': 0.82608694, 'prec1': 0.68421054, 'rec0': 0.8636364, 'rec1': 0.61904764, 'auroc': 0.7543290043290044, 'auprc': 0.6724472380364017, 'minpse': 0.6190476190476191}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.89285713, 'prec1': 0.75, 'rec0': 0.9259259, 'rec1': 0.6666667, 'auroc': 0.8353909465020576, 'auprc': 0.7567628306600378, 'minpse': 0.6666666666666666}
epoch 6
28.175079584121704
validation set
{'acc': 0.7846154, 'prec0': 0.85714287, 'prec1': 0.65217394, 'rec0': 0.8181818, 'rec1': 0.71428573, 'auroc': 0.817099567099567, 'auprc': 0.7032963651830244, 'minpse': 0.6521739130434783}
Mortality Prediction on the test set
{'acc': 0.6666667, 'prec0': 0.8125, 'prec1': 0.375, 'rec0': 0.7222222, 'rec1': 0.5, 'auroc': 0.6779835390946503, 'auprc': 0.526912128228936, 'minpse': 0.47368421052631576}
epoch 7
28.91782510280609
validation set
{'acc': 0.72307694, 'prec0': 0.96428573, 'prec1': 0.5405405, 'rec0': 0.6136364, 'rec1': 0.95238096, 'auroc': 0.8452380952380952, 'auprc': 0.7374734740942663, 'minpse': 0.6521739130434783}
Mortality Prediction on the test set
{'acc': 0.5833333, 'prec0': 0.875, 'prec1': 0.35, 'rec0': 0.5185185, 'rec1': 0.7777778, 'auroc': 0.7870370370370371, 'auprc': 0.7083320252328684, 'minpse': 0.631578947368421}
epoch 8
27.505104899406433
validation set
{'acc': 0.83076924, 'prec0': 0.902439, 'prec1': 0.7083333, 'rec0': 0.84090906, 'rec1': 0.8095238, 'auroc': 0.8712121212121212, 'auprc': 0.7746128062842552, 'minpse': 0.7083333333333334}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.89361703, 'prec1': 0.52, 'rec0': 0.7777778, 'rec1': 0.7222222, 'auroc': 0.8168724279835391, 'auprc': 0.7441060784417763, 'minpse': 0.6666666666666666}
epoch 9
26.855330288410187
validation set
{'acc': 0.7846154, 'prec0': 0.84090906, 'prec1': 0.6666667, 'rec0': 0.84090906, 'rec1': 0.6666667, 'auroc': 0.7943722943722944, 'auprc': 0.707979244720101, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.8333333, 'prec1': 0.5, 'rec0': 0.8333333, 'rec1': 0.5, 'auroc': 0.6460905349794239, 'auprc': 0.5447779582256214, 'minpse': 0.5}
epoch 10
27.11835753917694
validation set
{'acc': 0.73846155, 'prec0': 0.9354839, 'prec1': 0.5588235, 'rec0': 0.65909094, 'rec1': 0.9047619, 'auroc': 0.8517316017316017, 'auprc': 0.7377454841545579, 'minpse': 0.64}
Mortality Prediction on the test set
{'acc': 0.6388889, 'prec0': 0.8888889, 'prec1': 0.3888889, 'rec0': 0.5925926, 'rec1': 0.7777778, 'auroc': 0.7880658436213992, 'auprc': 0.6828206145840764, 'minpse': 0.6111111111111112}
epoch 11
23.412014365196228
validation set
{'acc': 0.75384617, 'prec0': 1.0, 'prec1': 0.5675676, 'rec0': 0.6363636, 'rec1': 1.0, 'auroc': 0.8906926406926406, 'auprc': 0.7804938831855648, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.6388889, 'prec0': 0.9117647, 'prec1': 0.39473686, 'rec0': 0.5740741, 'rec1': 0.8333333, 'auroc': 0.808641975308642, 'auprc': 0.6881625518959944, 'minpse': 0.6666666666666666}
epoch 12
24.41123878955841
validation set
{'acc': 0.7692308, 'prec0': 0.93939394, 'prec1': 0.59375, 'rec0': 0.70454544, 'rec1': 0.9047619, 'auroc': 0.8733766233766234, 'auprc': 0.7601881905039516, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.6527778, 'prec0': 0.8918919, 'prec1': 0.4, 'rec0': 0.6111111, 'rec1': 0.7777778, 'auroc': 0.8240740740740741, 'auprc': 0.736383402480437, 'minpse': 0.6666666666666666}
epoch 13
22.900959193706512
validation set
{'acc': 0.84615386, 'prec0': 0.8695652, 'prec1': 0.7894737, 'rec0': 0.90909094, 'rec1': 0.71428573, 'auroc': 0.8387445887445888, 'auprc': 0.7498175102279947, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.8703704, 'prec1': 0.6111111, 'rec0': 0.8703704, 'rec1': 0.6111111, 'auroc': 0.7932098765432098, 'auprc': 0.6879211743394799, 'minpse': 0.6111111111111112}
epoch 14
24.691673696041107
validation set
{'acc': 0.83076924, 'prec0': 0.8666667, 'prec1': 0.75, 'rec0': 0.8863636, 'rec1': 0.71428573, 'auroc': 0.8311688311688311, 'auprc': 0.6635987133452207, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8679245, 'prec1': 0.57894737, 'rec0': 0.8518519, 'rec1': 0.6111111, 'auroc': 0.7160493827160492, 'auprc': 0.6067985226334367, 'minpse': 0.6111111111111112}
epoch 15
22.938925862312317
validation set
{'acc': 0.8, 'prec0': 0.8604651, 'prec1': 0.6818182, 'rec0': 0.84090906, 'rec1': 0.71428573, 'auroc': 0.8279220779220778, 'auprc': 0.7289212661526592, 'minpse': 0.6818181818181818}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.88, 'prec1': 0.54545456, 'rec0': 0.8148148, 'rec1': 0.6666667, 'auroc': 0.8251028806584363, 'auprc': 0.7390416377735097, 'minpse': 0.631578947368421}
epoch 16
19.314974188804626
validation set
{'acc': 0.7846154, 'prec0': 0.9166667, 'prec1': 0.62068963, 'rec0': 0.75, 'rec1': 0.85714287, 'auroc': 0.8560606060606061, 'auprc': 0.7379766024258814, 'minpse': 0.6818181818181818}
Mortality Prediction on the test set
{'acc': 0.6388889, 'prec0': 0.9117647, 'prec1': 0.39473686, 'rec0': 0.5740741, 'rec1': 0.8333333, 'auroc': 0.7788065843621399, 'auprc': 0.660278887731226, 'minpse': 0.6111111111111112}
epoch 17
20.519697606563568
validation set
{'acc': 0.7692308, 'prec0': 0.8717949, 'prec1': 0.61538464, 'rec0': 0.77272725, 'rec1': 0.7619048, 'auroc': 0.8116883116883117, 'auprc': 0.6914600438345855, 'minpse': 0.625}
Mortality Prediction on the test set
{'acc': 0.7083333, 'prec0': 0.88372093, 'prec1': 0.44827586, 'rec0': 0.7037037, 'rec1': 0.7222222, 'auroc': 0.8137860082304527, 'auprc': 0.5024941443904959, 'minpse': 0.6666666666666666}
epoch 18
18.751054883003235
validation set
{'acc': 0.8769231, 'prec0': 0.86, 'prec1': 0.93333334, 'rec0': 0.97727275, 'rec1': 0.6666667, 'auroc': 0.8603896103896104, 'auprc': 0.7851497700054304, 'minpse': 0.6818181818181818}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.86440676, 'prec1': 0.7692308, 'rec0': 0.9444444, 'rec1': 0.5555556, 'auroc': 0.7829218106995885, 'auprc': 0.7077657037124543, 'minpse': 0.6666666666666666}
epoch 19
20.321480989456177
validation set
{'acc': 0.75384617, 'prec0': 0.9375, 'prec1': 0.57575756, 'rec0': 0.6818182, 'rec1': 0.9047619, 'auroc': 0.8441558441558442, 'auprc': 0.7214539909110094, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.6111111, 'prec0': 0.8611111, 'prec1': 0.3611111, 'rec0': 0.5740741, 'rec1': 0.7222222, 'auroc': 0.7397119341563786, 'auprc': 0.6686076936678704, 'minpse': 0.6111111111111112}
epoch 20
18.778418838977814
validation set
{'acc': 0.83076924, 'prec0': 0.8666667, 'prec1': 0.75, 'rec0': 0.8863636, 'rec1': 0.71428573, 'auroc': 0.8376623376623377, 'auprc': 0.758881592377822, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.8627451, 'prec1': 0.52380955, 'rec0': 0.8148148, 'rec1': 0.6111111, 'auroc': 0.7448559670781892, 'auprc': 0.6939864568919878, 'minpse': 0.6111111111111112}
epoch 21
17.56158173084259
validation set
{'acc': 0.7846154, 'prec0': 0.8947368, 'prec1': 0.6296296, 'rec0': 0.77272725, 'rec1': 0.8095238, 'auroc': 0.8333333333333334, 'auprc': 0.7402636197972499, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.925, 'prec1': 0.46875, 'rec0': 0.6851852, 'rec1': 0.8333333, 'auroc': 0.8343621399176955, 'auprc': 0.5844231452080604, 'minpse': 0.6111111111111112}
epoch 22
17.01375639438629
validation set
{'acc': 0.83076924, 'prec0': 0.88372093, 'prec1': 0.72727275, 'rec0': 0.8636364, 'rec1': 0.7619048, 'auroc': 0.8495670995670995, 'auprc': 0.7275483551908981, 'minpse': 0.7272727272727273}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.8703704, 'prec1': 0.6111111, 'rec0': 0.8703704, 'rec1': 0.6111111, 'auroc': 0.7078189300411523, 'auprc': 0.6392143473773753, 'minpse': 0.6111111111111112}
epoch 23
17.517019003629684
validation set
{'acc': 0.8153846, 'prec0': 0.9, 'prec1': 0.68, 'rec0': 0.8181818, 'rec1': 0.8095238, 'auroc': 0.8744588744588745, 'auprc': 0.7855816563113205, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.8888889, 'prec1': 0.4814815, 'rec0': 0.7407407, 'rec1': 0.7222222, 'auroc': 0.7839506172839507, 'auprc': 0.67698298045035, 'minpse': 0.6666666666666666}
epoch 24
18.08796602487564
validation set
{'acc': 0.84615386, 'prec0': 0.8695652, 'prec1': 0.7894737, 'rec0': 0.90909094, 'rec1': 0.71428573, 'auroc': 0.8484848484848485, 'auprc': 0.7886435065000812, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.8909091, 'prec1': 0.7058824, 'rec0': 0.9074074, 'rec1': 0.6666667, 'auroc': 0.8518518518518519, 'auprc': 0.6425382358078531, 'minpse': 0.6666666666666666}
epoch 25
16.469341546297073
validation set
{'acc': 0.86153847, 'prec0': 0.85714287, 'prec1': 0.875, 'rec0': 0.95454544, 'rec1': 0.6666667, 'auroc': 0.829004329004329, 'auprc': 0.7069352226403487, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.86206895, 'prec1': 0.71428573, 'rec0': 0.9259259, 'rec1': 0.5555556, 'auroc': 0.7325102880658435, 'auprc': 0.5735845312621703, 'minpse': 0.6666666666666666}
epoch 26
15.517126083374023
validation set
{'acc': 0.83076924, 'prec0': 0.85106385, 'prec1': 0.7777778, 'rec0': 0.90909094, 'rec1': 0.6666667, 'auroc': 0.8311688311688312, 'auprc': 0.7869955682409016, 'minpse': 0.6818181818181818}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.875, 'prec1': 0.6875, 'rec0': 0.9074074, 'rec1': 0.6111111, 'auroc': 0.7386831275720164, 'auprc': 0.5672979435990202, 'minpse': 0.631578947368421}
epoch 27
16.30707412958145
validation set
{'acc': 0.84615386, 'prec0': 0.8541667, 'prec1': 0.8235294, 'rec0': 0.9318182, 'rec1': 0.6666667, 'auroc': 0.8658008658008658, 'auprc': 0.7870716925799364, 'minpse': 0.6818181818181818}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8727273, 'prec1': 0.64705884, 'rec0': 0.8888889, 'rec1': 0.6111111, 'auroc': 0.7746913580246915, 'auprc': 0.6688065577161089, 'minpse': 0.6666666666666666}
epoch 28
16.94695883989334
validation set
{'acc': 0.7692308, 'prec0': 0.7735849, 'prec1': 0.75, 'rec0': 0.9318182, 'rec1': 0.42857143, 'auroc': 0.6103896103896104, 'auprc': 0.47625856157757684, 'minpse': 0.47619047619047616}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.796875, 'prec1': 0.625, 'rec0': 0.9444444, 'rec1': 0.2777778, 'auroc': 0.618312757201646, 'auprc': 0.4249123555881472, 'minpse': 0.4444444444444444}
epoch 29
16.80605137348175
validation set
{'acc': 0.86153847, 'prec0': 0.85714287, 'prec1': 0.875, 'rec0': 0.95454544, 'rec1': 0.6666667, 'auroc': 0.8474025974025974, 'auprc': 0.7694438669118309, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.87931037, 'prec1': 0.78571427, 'rec0': 0.9444444, 'rec1': 0.6111111, 'auroc': 0.7788065843621399, 'auprc': 0.691562151899175, 'minpse': 0.6111111111111112}
epoch 30
14.858454585075378
validation set
{'acc': 0.84615386, 'prec0': 0.8541667, 'prec1': 0.8235294, 'rec0': 0.9318182, 'rec1': 0.6666667, 'auroc': 0.8376623376623378, 'auprc': 0.7519545337328701, 'minpse': 0.6818181818181818}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.8888889, 'prec1': 0.6666667, 'rec0': 0.8888889, 'rec1': 0.6666667, 'auroc': 0.7026748971193415, 'auprc': 0.6107823281588436, 'minpse': 0.6666666666666666}
epoch 31
16.61737549304962
validation set
{'acc': 0.7692308, 'prec0': 0.9142857, 'prec1': 0.6, 'rec0': 0.72727275, 'rec1': 0.85714287, 'auroc': 0.8365800865800865, 'auprc': 0.6805551907175035, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.625, 'prec0': 0.8648649, 'prec1': 0.37142858, 'rec0': 0.5925926, 'rec1': 0.7222222, 'auroc': 0.7006172839506173, 'auprc': 0.5765199028368838, 'minpse': 0.6111111111111112}
epoch 32
16.600201427936554
validation set
{'acc': 0.8153846, 'prec0': 0.84782606, 'prec1': 0.7368421, 'rec0': 0.8863636, 'rec1': 0.6666667, 'auroc': 0.7878787878787878, 'auprc': 0.7096994175972051, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.877193, 'prec1': 0.73333335, 'rec0': 0.9259259, 'rec1': 0.6111111, 'auroc': 0.7520576131687242, 'auprc': 0.5931105329401614, 'minpse': 0.6666666666666666}
epoch 33
17.11465275287628
validation set
{'acc': 0.7692308, 'prec0': 0.93939394, 'prec1': 0.59375, 'rec0': 0.70454544, 'rec1': 0.9047619, 'auroc': 0.8668831168831169, 'auprc': 0.7720209820970387, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.6388889, 'prec0': 0.8684211, 'prec1': 0.38235295, 'rec0': 0.6111111, 'rec1': 0.7222222, 'auroc': 0.6934156378600822, 'auprc': 0.6582357858143968, 'minpse': 0.6666666666666666}
epoch 34
16.481163024902344
validation set
{'acc': 0.8153846, 'prec0': 0.92105263, 'prec1': 0.6666667, 'rec0': 0.79545456, 'rec1': 0.85714287, 'auroc': 0.8874458874458875, 'auprc': 0.7991785447376889, 'minpse': 0.7619047619047619}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.87234044, 'prec1': 0.48, 'rec0': 0.7592593, 'rec1': 0.6666667, 'auroc': 0.7458847736625515, 'auprc': 0.7208773083246269, 'minpse': 0.6666666666666666}
epoch 35
14.369497150182724
validation set
{'acc': 0.7846154, 'prec0': 0.9411765, 'prec1': 0.61290324, 'rec0': 0.72727275, 'rec1': 0.9047619, 'auroc': 0.8463203463203464, 'auprc': 0.7659795393725999, 'minpse': 0.68}
Mortality Prediction on the test set
{'acc': 0.6388889, 'prec0': 0.9117647, 'prec1': 0.39473686, 'rec0': 0.5740741, 'rec1': 0.8333333, 'auroc': 0.7695473251028807, 'auprc': 0.58885905380488, 'minpse': 0.6111111111111112}
epoch 36
14.823718041181564
validation set
{'acc': 0.83076924, 'prec0': 0.85106385, 'prec1': 0.7777778, 'rec0': 0.90909094, 'rec1': 0.6666667, 'auroc': 0.8333333333333333, 'auprc': 0.7614639164858279, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.877551, 'prec1': 0.5217391, 'rec0': 0.7962963, 'rec1': 0.6666667, 'auroc': 0.7397119341563787, 'auprc': 0.5822900290978885, 'minpse': 0.6666666666666666}
epoch 37
13.770473033189774
validation set
{'acc': 0.7692308, 'prec0': 0.8918919, 'prec1': 0.60714287, 'rec0': 0.75, 'rec1': 0.8095238, 'auroc': 0.8084415584415585, 'auprc': 0.7460246252876752, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.6944444, 'prec0': 0.82, 'prec1': 0.4090909, 'rec0': 0.7592593, 'rec1': 0.5, 'auroc': 0.6604938271604939, 'auprc': 0.47707649203616564, 'minpse': 0.5}
epoch 38
15.09780216217041
validation set
{'acc': 0.8, 'prec0': 0.82978725, 'prec1': 0.7222222, 'rec0': 0.8863636, 'rec1': 0.61904764, 'auroc': 0.8203463203463204, 'auprc': 0.7530861649151788, 'minpse': 0.6190476190476191}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.84210527, 'prec1': 0.6, 'rec0': 0.8888889, 'rec1': 0.5, 'auroc': 0.6615226337448559, 'auprc': 0.6308246920449397, 'minpse': 0.5555555555555556}
epoch 39
14.556371062994003
validation set
{'acc': 0.8153846, 'prec0': 0.9, 'prec1': 0.68, 'rec0': 0.8181818, 'rec1': 0.8095238, 'auroc': 0.8517316017316018, 'auprc': 0.712135564263706, 'minpse': 0.7272727272727273}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.8541667, 'prec1': 0.45833334, 'rec0': 0.7592593, 'rec1': 0.6111111, 'auroc': 0.7201646090534979, 'auprc': 0.6032996332462093, 'minpse': 0.6111111111111112}
epoch 40
12.626180768013
validation set
{'acc': 0.8153846, 'prec0': 0.84782606, 'prec1': 0.7368421, 'rec0': 0.8863636, 'rec1': 0.6666667, 'auroc': 0.7987012987012987, 'auprc': 0.7071779266142704, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.8518519, 'prec1': 0.5555556, 'rec0': 0.8518519, 'rec1': 0.5555556, 'auroc': 0.6820987654320988, 'auprc': 0.6330865684202538, 'minpse': 0.5555555555555556}
epoch 41
13.104296177625656
validation set
{'acc': 0.8769231, 'prec0': 0.8913044, 'prec1': 0.84210527, 'rec0': 0.9318182, 'rec1': 0.7619048, 'auroc': 0.8495670995670996, 'auprc': 0.7554658660610958, 'minpse': 0.7619047619047619}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.86538464, 'prec1': 0.55, 'rec0': 0.8333333, 'rec1': 0.6111111, 'auroc': 0.7417695473251029, 'auprc': 0.4904259034035292, 'minpse': 0.6111111111111112}
epoch 42
15.653711259365082
validation set
{'acc': 0.8153846, 'prec0': 0.8636364, 'prec1': 0.71428573, 'rec0': 0.8636364, 'rec1': 0.71428573, 'auroc': 0.814935064935065, 'auprc': 0.7637166104862032, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.7083333, 'prec0': 0.88372093, 'prec1': 0.44827586, 'rec0': 0.7037037, 'rec1': 0.7222222, 'auroc': 0.6954732510288064, 'auprc': 0.48808250794194263, 'minpse': 0.5}
epoch 43
19.70207244157791
validation set
{'acc': 0.8, 'prec0': 0.9189189, 'prec1': 0.64285713, 'rec0': 0.77272725, 'rec1': 0.85714287, 'auroc': 0.8495670995670995, 'auprc': 0.7178647089815369, 'minpse': 0.7272727272727273}
Mortality Prediction on the test set
{'acc': 0.6944444, 'prec0': 0.88095236, 'prec1': 0.43333334, 'rec0': 0.6851852, 'rec1': 0.7222222, 'auroc': 0.7232510288065843, 'auprc': 0.5054081017332395, 'minpse': 0.5555555555555556}
epoch 44
14.890269935131073
validation set
{'acc': 0.7692308, 'prec0': 0.93939394, 'prec1': 0.59375, 'rec0': 0.70454544, 'rec1': 0.9047619, 'auroc': 0.869047619047619, 'auprc': 0.7682942233778969, 'minpse': 0.6521739130434783}
Mortality Prediction on the test set
{'acc': 0.5694444, 'prec0': 0.8965517, 'prec1': 0.3488372, 'rec0': 0.4814815, 'rec1': 0.8333333, 'auroc': 0.7613168724279835, 'auprc': 0.5205298111414264, 'minpse': 0.631578947368421}
epoch 45
14.97230464220047
validation set
{'acc': 0.8153846, 'prec0': 0.9705882, 'prec1': 0.6451613, 'rec0': 0.75, 'rec1': 0.95238096, 'auroc': 0.8755411255411255, 'auprc': 0.6765346567009811, 'minpse': 0.7272727272727273}
Mortality Prediction on the test set
{'acc': 0.6527778, 'prec0': 0.8717949, 'prec1': 0.3939394, 'rec0': 0.6296296, 'rec1': 0.7222222, 'auroc': 0.7160493827160495, 'auprc': 0.501415668895174, 'minpse': 0.6111111111111112}
epoch 46
12.720468193292618
validation set
{'acc': 0.8, 'prec0': 0.94285715, 'prec1': 0.6333333, 'rec0': 0.75, 'rec1': 0.9047619, 'auroc': 0.8787878787878788, 'auprc': 0.764461088426986, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.6666667, 'prec0': 0.85714287, 'prec1': 0.4, 'rec0': 0.6666667, 'rec1': 0.6666667, 'auroc': 0.7479423868312757, 'auprc': 0.6801639840350561, 'minpse': 0.6666666666666666}
epoch 47
13.841641366481781
validation set
{'acc': 0.8769231, 'prec0': 0.875, 'prec1': 0.88235295, 'rec0': 0.95454544, 'rec1': 0.71428573, 'auroc': 0.8885281385281385, 'auprc': 0.7907811450223199, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.86538464, 'prec1': 0.55, 'rec0': 0.8333333, 'rec1': 0.6111111, 'auroc': 0.7592592592592593, 'auprc': 0.5314008422474967, 'minpse': 0.5789473684210527}
epoch 48
14.063516199588776
validation set
{'acc': 0.7846154, 'prec0': 0.9411765, 'prec1': 0.61290324, 'rec0': 0.72727275, 'rec1': 0.9047619, 'auroc': 0.8831168831168831, 'auprc': 0.8006767032218847, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.6944444, 'prec0': 0.88095236, 'prec1': 0.43333334, 'rec0': 0.6851852, 'rec1': 0.7222222, 'auroc': 0.7335390946502058, 'auprc': 0.5749085699232499, 'minpse': 0.6111111111111112}
epoch 49
12.91590341925621
validation set
{'acc': 0.84615386, 'prec0': 0.9047619, 'prec1': 0.73913044, 'rec0': 0.8636364, 'rec1': 0.8095238, 'auroc': 0.8809523809523809, 'auprc': 0.7890937363807518, 'minpse': 0.7391304347826086}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.877551, 'prec1': 0.5217391, 'rec0': 0.7962963, 'rec1': 0.6666667, 'auroc': 0.7397119341563786, 'auprc': 0.5563126959573517, 'minpse': 0.6111111111111112}
Reset trainable parameters of layer = Conv2d(1, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Linear(in_features=512, out_features=1000, bias=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Conv2d(64, 384, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=7200, bias=True)
Reset trainable parameters of layer = Linear(in_features=1000, out_features=6272, bias=True)
Reset trainable parameters of layer = Linear(in_features=300, out_features=600, bias=True)
Reset trainable parameters of layer = Linear(in_features=600, out_features=300, bias=True)
Reset trainable parameters of layer = Conv1d(300, 300, kernel_size=(24,), stride=(1,))
Reset trainable parameters of layer = Linear(in_features=300, out_features=1, bias=True)
Reset trainable parameters of layer = Linear(in_features=24, out_features=1, bias=True)
Removing classifier.fc.weight, number of classes has changed.
Removing classifier.fc.bias, number of classes has changed.
for distribution val
type 0= 49 type 1= 16
for distribution test
type 0= 54 type 1= 18
epoch 0
37.3792964220047
validation set
{'acc': 0.46153846, 'prec0': 0.9375, 'prec1': 0.30612245, 'rec0': 0.30612245, 'rec1': 0.9375, 'auroc': 0.610969387755102, 'auprc': 0.32182540086496136, 'minpse': 0.3333333333333333}
Mortality Prediction on the test set
{'acc': 0.31944445, 'prec0': 0.64705884, 'prec1': 0.21818182, 'rec0': 0.2037037, 'rec1': 0.6666667, 'auroc': 0.5699588477366255, 'auprc': 0.3850678143479507, 'minpse': 0.45}
epoch 1
35.08643877506256
validation set
{'acc': 0.61538464, 'prec0': 0.81578946, 'prec1': 0.33333334, 'rec0': 0.63265306, 'rec1': 0.5625, 'auroc': 0.5739795918367347, 'auprc': 0.36270705657081614, 'minpse': 0.3333333333333333}
Mortality Prediction on the test set
{'acc': 0.4861111, 'prec0': 0.6888889, 'prec1': 0.14814815, 'rec0': 0.5740741, 'rec1': 0.22222222, 'auroc': 0.37962962962962965, 'auprc': 0.29251737328674476, 'minpse': 0.25}
epoch 2
34.70613241195679
validation set
{'acc': 0.53846157, 'prec0': 0.9130435, 'prec1': 0.33333334, 'rec0': 0.42857143, 'rec1': 0.875, 'auroc': 0.6785714285714285, 'auprc': 0.37634362027935264, 'minpse': 0.42105263157894735}
Mortality Prediction on the test set
{'acc': 0.4722222, 'prec0': 0.9444444, 'prec1': 0.3148148, 'rec0': 0.3148148, 'rec1': 0.9444444, 'auroc': 0.7582304526748971, 'auprc': 0.5089161375522886, 'minpse': 0.5}
epoch 3
34.61487102508545
validation set
{'acc': 0.6, 'prec0': 0.8965517, 'prec1': 0.3611111, 'rec0': 0.53061223, 'rec1': 0.8125, 'auroc': 0.6122448979591837, 'auprc': 0.34543824021869446, 'minpse': 0.38461538461538464}
Mortality Prediction on the test set
{'acc': 0.5972222, 'prec0': 0.9032258, 'prec1': 0.36585367, 'rec0': 0.5185185, 'rec1': 0.8333333, 'auroc': 0.7325102880658436, 'auprc': 0.4194998339067808, 'minpse': 0.45}
epoch 4
33.74104928970337
validation set
{'acc': 0.72307694, 'prec0': 0.9189189, 'prec1': 0.4642857, 'rec0': 0.6938776, 'rec1': 0.8125, 'auroc': 0.778061224489796, 'auprc': 0.5191429136062724, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.5416667, 'prec0': 0.8, 'prec1': 0.2972973, 'rec0': 0.5185185, 'rec1': 0.6111111, 'auroc': 0.617283950617284, 'auprc': 0.45302248802020756, 'minpse': 0.45}
epoch 5
33.27211117744446
validation set
{'acc': 0.73846155, 'prec0': 0.88095236, 'prec1': 0.47826087, 'rec0': 0.75510204, 'rec1': 0.6875, 'auroc': 0.735969387755102, 'auprc': 0.4593043476809442, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.5833333, 'prec0': 0.78571427, 'prec1': 0.3, 'rec0': 0.6111111, 'rec1': 0.5, 'auroc': 0.5761316872427983, 'auprc': 0.3425413078445982, 'minpse': 0.35294117647058826}
epoch 6
33.77662754058838
validation set
{'acc': 0.53846157, 'prec0': 0.95238096, 'prec1': 0.3409091, 'rec0': 0.40816328, 'rec1': 0.9375, 'auroc': 0.6696428571428571, 'auprc': 0.46630937950868506, 'minpse': 0.3684210526315789}
Mortality Prediction on the test set
{'acc': 0.5, 'prec0': 0.90909094, 'prec1': 0.32, 'rec0': 0.37037036, 'rec1': 0.8888889, 'auroc': 0.6944444444444444, 'auprc': 0.425871254777953, 'minpse': 0.45}
epoch 7
33.27617156505585
validation set
{'acc': 0.8153846, 'prec0': 0.877551, 'prec1': 0.625, 'rec0': 0.877551, 'rec1': 0.625, 'auroc': 0.7614795918367347, 'auprc': 0.60638160808048, 'minpse': 0.625}
Mortality Prediction on the test set
{'acc': 0.7083333, 'prec0': 0.8367347, 'prec1': 0.4347826, 'rec0': 0.7592593, 'rec1': 0.5555556, 'auroc': 0.6820987654320988, 'auprc': 0.4337830428506928, 'minpse': 0.5}
epoch 8
31.926467061042786
validation set
{'acc': 0.83076924, 'prec0': 0.9318182, 'prec1': 0.61904764, 'rec0': 0.8367347, 'rec1': 0.8125, 'auroc': 0.8392857142857143, 'auprc': 0.7134320116423885, 'minpse': 0.7058823529411765}
Mortality Prediction on the test set
{'acc': 0.6388889, 'prec0': 0.8684211, 'prec1': 0.38235295, 'rec0': 0.6111111, 'rec1': 0.7222222, 'auroc': 0.7448559670781894, 'auprc': 0.5804839255501297, 'minpse': 0.6111111111111112}
epoch 9
32.021199345588684
validation set
{'acc': 0.8923077, 'prec0': 0.90384614, 'prec1': 0.84615386, 'rec0': 0.9591837, 'rec1': 0.6875, 'auroc': 0.8405612244897959, 'auprc': 0.7497218579112983, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.8627451, 'prec1': 0.52380955, 'rec0': 0.8148148, 'rec1': 0.6111111, 'auroc': 0.7530864197530864, 'auprc': 0.592349939466472, 'minpse': 0.6111111111111112}
epoch 10
28.821334838867188
validation set
{'acc': 0.86153847, 'prec0': 0.9, 'prec1': 0.73333335, 'rec0': 0.9183673, 'rec1': 0.6875, 'auroc': 0.8252551020408163, 'auprc': 0.6793954373824843, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.84210527, 'prec1': 0.6, 'rec0': 0.8888889, 'rec1': 0.5, 'auroc': 0.8024691358024691, 'auprc': 0.6719784652039863, 'minpse': 0.6111111111111112}
epoch 11
30.38805603981018
validation set
{'acc': 0.8769231, 'prec0': 0.9183673, 'prec1': 0.75, 'rec0': 0.9183673, 'rec1': 0.75, 'auroc': 0.8482142857142857, 'auprc': 0.7355683331991076, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.875, 'prec1': 0.5, 'rec0': 0.7777778, 'rec1': 0.6666667, 'auroc': 0.7417695473251029, 'auprc': 0.5629447357618329, 'minpse': 0.5789473684210527}
epoch 12
31.2537944316864
validation set
{'acc': 0.8769231, 'prec0': 0.9019608, 'prec1': 0.78571427, 'rec0': 0.93877554, 'rec1': 0.6875, 'auroc': 0.8278061224489796, 'auprc': 0.771998647151399, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.8703704, 'prec1': 0.6111111, 'rec0': 0.8703704, 'rec1': 0.6111111, 'auroc': 0.8765432098765432, 'auprc': 0.7511164886263357, 'minpse': 0.64}
epoch 13
24.887672543525696
validation set
{'acc': 0.86153847, 'prec0': 0.9347826, 'prec1': 0.68421054, 'rec0': 0.877551, 'rec1': 0.8125, 'auroc': 0.8392857142857142, 'auprc': 0.7963811792469228, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.9302326, 'prec1': 0.51724136, 'rec0': 0.7407407, 'rec1': 0.8333333, 'auroc': 0.8837448559670782, 'auprc': 0.825330299830763, 'minpse': 0.7777777777777778}
epoch 14
24.318416714668274
validation set
{'acc': 0.8923077, 'prec0': 0.90384614, 'prec1': 0.84615386, 'rec0': 0.9591837, 'rec1': 0.6875, 'auroc': 0.8329081632653061, 'auprc': 0.7574940539238723, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.9027778, 'prec0': 0.89830506, 'prec1': 0.9230769, 'rec0': 0.9814815, 'rec1': 0.6666667, 'auroc': 0.8713991769547325, 'auprc': 0.823318608832009, 'minpse': 0.7222222222222222}
epoch 15
23.776203155517578
validation set
{'acc': 0.84615386, 'prec0': 0.88235295, 'prec1': 0.71428573, 'rec0': 0.9183673, 'rec1': 0.625, 'auroc': 0.8316326530612246, 'auprc': 0.7437887575031257, 'minpse': 0.625}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.9074074, 'prec1': 0.7222222, 'rec0': 0.9074074, 'rec1': 0.7222222, 'auroc': 0.8621399176954732, 'auprc': 0.8090564081475564, 'minpse': 0.7222222222222222}
epoch 16
24.403978943824768
validation set
{'acc': 0.8769231, 'prec0': 0.9019608, 'prec1': 0.78571427, 'rec0': 0.93877554, 'rec1': 0.6875, 'auroc': 0.8176020408163266, 'auprc': 0.7711320804635389, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8196721, 'prec1': 0.6363636, 'rec0': 0.9259259, 'rec1': 0.3888889, 'auroc': 0.7654320987654322, 'auprc': 0.5853570814118312, 'minpse': 0.5652173913043478}
epoch 17
22.856054723262787
validation set
{'acc': 0.86153847, 'prec0': 0.9, 'prec1': 0.73333335, 'rec0': 0.9183673, 'rec1': 0.6875, 'auroc': 0.8137755102040817, 'auprc': 0.7659010856018991, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.9230769, 'prec1': 0.7, 'rec0': 0.8888889, 'rec1': 0.7777778, 'auroc': 0.8734567901234568, 'auprc': 0.8088454082410182, 'minpse': 0.7222222222222222}
epoch 18
21.496109783649445
validation set
{'acc': 0.84615386, 'prec0': 0.9148936, 'prec1': 0.6666667, 'rec0': 0.877551, 'rec1': 0.75, 'auroc': 0.7984693877551021, 'auprc': 0.7720310352189459, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.88235295, 'prec1': 0.5714286, 'rec0': 0.8333333, 'rec1': 0.6666667, 'auroc': 0.7767489711934156, 'auprc': 0.7452404751186458, 'minpse': 0.6666666666666666}
epoch 19
19.728338181972504
validation set
{'acc': 0.8923077, 'prec0': 0.90384614, 'prec1': 0.84615386, 'rec0': 0.9591837, 'rec1': 0.6875, 'auroc': 0.7933673469387754, 'auprc': 0.780094915790598, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.8909091, 'prec1': 0.7058824, 'rec0': 0.9074074, 'rec1': 0.6666667, 'auroc': 0.8806584362139918, 'auprc': 0.8030403856835745, 'minpse': 0.6666666666666666}
epoch 20
19.636671543121338
validation set
{'acc': 0.9076923, 'prec0': 0.92156863, 'prec1': 0.85714287, 'rec0': 0.9591837, 'rec1': 0.75, 'auroc': 0.8278061224489797, 'auprc': 0.8171710428381443, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.83928573, 'prec1': 0.5625, 'rec0': 0.8703704, 'rec1': 0.5, 'auroc': 0.8323045267489713, 'auprc': 0.7278157176556019, 'minpse': 0.5789473684210527}
epoch 21
21.049602180719376
validation set
{'acc': 0.84615386, 'prec0': 0.9148936, 'prec1': 0.6666667, 'rec0': 0.877551, 'rec1': 0.75, 'auroc': 0.7691326530612245, 'auprc': 0.693385660869372, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.90384614, 'prec1': 0.65, 'rec0': 0.8703704, 'rec1': 0.7222222, 'auroc': 0.8425925925925926, 'auprc': 0.7097191548044816, 'minpse': 0.65}
epoch 22
18.86278200149536
validation set
{'acc': 0.9230769, 'prec0': 0.9074074, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.6875, 'auroc': 0.8073979591836735, 'auprc': 0.7907363144670838, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.87096775, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.5555556, 'auroc': 0.8179012345679013, 'auprc': 0.7748225958120453, 'minpse': 0.6666666666666666}
epoch 23
18.488078713417053
validation set
{'acc': 0.8769231, 'prec0': 0.9183673, 'prec1': 0.75, 'rec0': 0.9183673, 'rec1': 0.75, 'auroc': 0.7857142857142857, 'auprc': 0.7728079478988901, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.8695652, 'prec1': 0.46153846, 'rec0': 0.7407407, 'rec1': 0.6666667, 'auroc': 0.6851851851851852, 'auprc': 0.5551775865499446, 'minpse': 0.48}
epoch 24
17.26755392551422
validation set
{'acc': 0.9076923, 'prec0': 0.8909091, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.625, 'auroc': 0.8558673469387755, 'auprc': 0.7937756859396341, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.86206895, 'prec1': 0.71428573, 'rec0': 0.9259259, 'rec1': 0.5555556, 'auroc': 0.815843621399177, 'auprc': 0.6795218856325423, 'minpse': 0.6666666666666666}
epoch 25
18.205257326364517
validation set
{'acc': 0.8769231, 'prec0': 0.9019608, 'prec1': 0.78571427, 'rec0': 0.93877554, 'rec1': 0.6875, 'auroc': 0.8239795918367347, 'auprc': 0.775151939944814, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.8909091, 'prec1': 0.7058824, 'rec0': 0.9074074, 'rec1': 0.6666667, 'auroc': 0.8652263374485597, 'auprc': 0.7489938706149564, 'minpse': 0.6666666666666666}
epoch 26
20.521919667720795
validation set
{'acc': 0.8769231, 'prec0': 0.9019608, 'prec1': 0.78571427, 'rec0': 0.93877554, 'rec1': 0.6875, 'auroc': 0.7997448979591836, 'auprc': 0.6998871233383755, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.9056604, 'prec1': 0.68421054, 'rec0': 0.8888889, 'rec1': 0.7222222, 'auroc': 0.8106995884773662, 'auprc': 0.6891045278458263, 'minpse': 0.6842105263157895}
epoch 27
19.1574786901474
validation set
{'acc': 0.9076923, 'prec0': 0.93877554, 'prec1': 0.8125, 'rec0': 0.93877554, 'rec1': 0.8125, 'auroc': 0.8698979591836735, 'auprc': 0.8388669784414365, 'minpse': 0.8125}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8979592, 'prec1': 0.5652174, 'rec0': 0.8148148, 'rec1': 0.7222222, 'auroc': 0.8034979423868314, 'auprc': 0.7777551950651835, 'minpse': 0.7222222222222222}
epoch 28
17.41635823249817
validation set
{'acc': 0.8923077, 'prec0': 0.92, 'prec1': 0.8, 'rec0': 0.93877554, 'rec1': 0.75, 'auroc': 0.8303571428571429, 'auprc': 0.8163920317497659, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.9074074, 'prec1': 0.7222222, 'rec0': 0.9074074, 'rec1': 0.7222222, 'auroc': 0.8878600823045267, 'auprc': 0.7970965819393201, 'minpse': 0.7222222222222222}
epoch 29
15.560222186148167
validation set
{'acc': 0.8923077, 'prec0': 0.90384614, 'prec1': 0.84615386, 'rec0': 0.9591837, 'rec1': 0.6875, 'auroc': 0.8456632653061226, 'auprc': 0.7306322624406947, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.8909091, 'prec1': 0.7058824, 'rec0': 0.9074074, 'rec1': 0.6666667, 'auroc': 0.8281893004115226, 'auprc': 0.6939767329638509, 'minpse': 0.7}
epoch 30
19.67513406276703
validation set
{'acc': 0.8769231, 'prec0': 0.9361702, 'prec1': 0.7222222, 'rec0': 0.8979592, 'rec1': 0.8125, 'auroc': 0.8380102040816327, 'auprc': 0.7227226748148097, 'minpse': 0.7222222222222222}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.89285713, 'prec1': 0.75, 'rec0': 0.9259259, 'rec1': 0.6666667, 'auroc': 0.8405349794238683, 'auprc': 0.7128203662875889, 'minpse': 0.7222222222222222}
epoch 31
22.51723223924637
validation set
{'acc': 0.8769231, 'prec0': 0.8867925, 'prec1': 0.8333333, 'rec0': 0.9591837, 'rec1': 0.625, 'auroc': 0.7857142857142857, 'auprc': 0.7362611352292205, 'minpse': 0.625}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.8518519, 'prec1': 0.5555556, 'rec0': 0.8518519, 'rec1': 0.5555556, 'auroc': 0.7232510288065843, 'auprc': 0.6424959758628935, 'minpse': 0.5789473684210527}
epoch 32
18.903726994991302
validation set
{'acc': 0.8769231, 'prec0': 0.9183673, 'prec1': 0.75, 'rec0': 0.9183673, 'rec1': 0.75, 'auroc': 0.7895408163265307, 'auprc': 0.6687024715329057, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.89285713, 'prec1': 0.75, 'rec0': 0.9259259, 'rec1': 0.6666667, 'auroc': 0.8292181069958847, 'auprc': 0.7850082055151357, 'minpse': 0.7222222222222222}
epoch 33
18.825621128082275
validation set
{'acc': 0.8153846, 'prec0': 0.89361703, 'prec1': 0.6111111, 'rec0': 0.85714287, 'rec1': 0.6875, 'auroc': 0.7257653061224489, 'auprc': 0.6749649242782875, 'minpse': 0.625}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.88461536, 'prec1': 0.6, 'rec0': 0.8518519, 'rec1': 0.6666667, 'auroc': 0.8045267489711935, 'auprc': 0.6856278751988396, 'minpse': 0.631578947368421}
epoch 34
17.044650852680206
validation set
{'acc': 0.8923077, 'prec0': 0.92, 'prec1': 0.8, 'rec0': 0.93877554, 'rec1': 0.75, 'auroc': 0.8456632653061225, 'auprc': 0.7432165656736436, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8596491, 'prec1': 0.6666667, 'rec0': 0.9074074, 'rec1': 0.5555556, 'auroc': 0.77880658436214, 'auprc': 0.6835964022593155, 'minpse': 0.6111111111111112}
epoch 35
18.57847934961319
validation set
{'acc': 0.8, 'prec0': 0.90909094, 'prec1': 0.5714286, 'rec0': 0.81632656, 'rec1': 0.75, 'auroc': 0.8086734693877551, 'auprc': 0.5700404257140879, 'minpse': 0.5714285714285714}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.8958333, 'prec1': 0.5416667, 'rec0': 0.7962963, 'rec1': 0.7222222, 'auroc': 0.8220164609053497, 'auprc': 0.6578176803976094, 'minpse': 0.65}
epoch 36
15.735949218273163
validation set
{'acc': 0.86153847, 'prec0': 0.9166667, 'prec1': 0.7058824, 'rec0': 0.8979592, 'rec1': 0.75, 'auroc': 0.8035714285714286, 'auprc': 0.7636911859739228, 'minpse': 0.7058823529411765}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.84, 'prec1': 0.45454547, 'rec0': 0.7777778, 'rec1': 0.5555556, 'auroc': 0.7006172839506173, 'auprc': 0.6384414174934641, 'minpse': 0.5555555555555556}
epoch 37
16.513882398605347
validation set
{'acc': 0.8769231, 'prec0': 0.8867925, 'prec1': 0.8333333, 'rec0': 0.9591837, 'rec1': 0.625, 'auroc': 0.7806122448979591, 'auprc': 0.7469816469776449, 'minpse': 0.6470588235294118}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.8064516, 'prec1': 0.6, 'rec0': 0.9259259, 'rec1': 0.33333334, 'auroc': 0.8024691358024691, 'auprc': 0.6543978677786897, 'minpse': 0.6111111111111112}
epoch 38
15.64062374830246
validation set
{'acc': 0.8, 'prec0': 0.9285714, 'prec1': 0.5652174, 'rec0': 0.79591835, 'rec1': 0.8125, 'auroc': 0.8188775510204082, 'auprc': 0.7122342397342465, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.87234044, 'prec1': 0.48, 'rec0': 0.7592593, 'rec1': 0.6666667, 'auroc': 0.7613168724279836, 'auprc': 0.6837312868059487, 'minpse': 0.6111111111111112}
epoch 39
15.463308155536652
validation set
{'acc': 0.8769231, 'prec0': 0.9183673, 'prec1': 0.75, 'rec0': 0.9183673, 'rec1': 0.75, 'auroc': 0.8163265306122449, 'auprc': 0.7445434858478546, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.88, 'prec1': 0.54545456, 'rec0': 0.8148148, 'rec1': 0.6666667, 'auroc': 0.7335390946502057, 'auprc': 0.7038979013779912, 'minpse': 0.631578947368421}
epoch 40
15.943763077259064
validation set
{'acc': 0.8, 'prec0': 0.9285714, 'prec1': 0.5652174, 'rec0': 0.79591835, 'rec1': 0.8125, 'auroc': 0.8137755102040817, 'auprc': 0.7386823365339812, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.6944444, 'prec0': 0.8636364, 'prec1': 0.42857143, 'rec0': 0.7037037, 'rec1': 0.6666667, 'auroc': 0.7561728395061729, 'auprc': 0.6414949955062026, 'minpse': 0.5555555555555556}
epoch 41
14.590203046798706
validation set
{'acc': 0.84615386, 'prec0': 0.8979592, 'prec1': 0.6875, 'rec0': 0.8979592, 'rec1': 0.6875, 'auroc': 0.8035714285714286, 'auprc': 0.7347672321338772, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.7083333, 'prec0': 0.85106385, 'prec1': 0.44, 'rec0': 0.7407407, 'rec1': 0.6111111, 'auroc': 0.7386831275720165, 'auprc': 0.6536625014965554, 'minpse': 0.5555555555555556}
epoch 42
14.550461053848267
validation set
{'acc': 0.83076924, 'prec0': 0.9130435, 'prec1': 0.6315789, 'rec0': 0.85714287, 'rec1': 0.75, 'auroc': 0.8137755102040816, 'auprc': 0.7634050486536701, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.88461536, 'prec1': 0.6, 'rec0': 0.8518519, 'rec1': 0.6666667, 'auroc': 0.7633744855967078, 'auprc': 0.7004248785361618, 'minpse': 0.6666666666666666}
epoch 43
15.020525932312012
validation set
{'acc': 0.8769231, 'prec0': 0.9019608, 'prec1': 0.78571427, 'rec0': 0.93877554, 'rec1': 0.6875, 'auroc': 0.7920918367346939, 'auprc': 0.7099191694077059, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.83870965, 'prec1': 0.8, 'rec0': 0.962963, 'rec1': 0.44444445, 'auroc': 0.7983539094650205, 'auprc': 0.6877365291105626, 'minpse': 0.65}
epoch 44
14.145949065685272
validation set
{'acc': 0.83076924, 'prec0': 0.9130435, 'prec1': 0.6315789, 'rec0': 0.85714287, 'rec1': 0.75, 'auroc': 0.8405612244897959, 'auprc': 0.7353489355863896, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.87234044, 'prec1': 0.48, 'rec0': 0.7592593, 'rec1': 0.6666667, 'auroc': 0.7633744855967078, 'auprc': 0.7161125362809302, 'minpse': 0.6111111111111112}
epoch 45
14.959739446640015
validation set
{'acc': 0.8769231, 'prec0': 0.8727273, 'prec1': 0.9, 'rec0': 0.97959185, 'rec1': 0.5625, 'auroc': 0.7448979591836735, 'auprc': 0.7122231265793888, 'minpse': 0.5789473684210527}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.80701756, 'prec1': 0.46666667, 'rec0': 0.8518519, 'rec1': 0.3888889, 'auroc': 0.6347736625514404, 'auprc': 0.5411059129230494, 'minpse': 0.5}
epoch 46
15.349214673042297
validation set
{'acc': 0.73846155, 'prec0': 0.9444444, 'prec1': 0.4827586, 'rec0': 0.6938776, 'rec1': 0.875, 'auroc': 0.8227040816326531, 'auprc': 0.6417623809065507, 'minpse': 0.625}
Mortality Prediction on the test set
{'acc': 0.625, 'prec0': 0.8857143, 'prec1': 0.3783784, 'rec0': 0.5740741, 'rec1': 0.7777778, 'auroc': 0.7479423868312758, 'auprc': 0.5899299263206428, 'minpse': 0.6111111111111112}
epoch 47
14.955285131931305
validation set
{'acc': 0.86153847, 'prec0': 0.9166667, 'prec1': 0.7058824, 'rec0': 0.8979592, 'rec1': 0.75, 'auroc': 0.8150510204081632, 'auprc': 0.7671853541786301, 'minpse': 0.7058823529411765}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8679245, 'prec1': 0.57894737, 'rec0': 0.8518519, 'rec1': 0.6111111, 'auroc': 0.8096707818930041, 'auprc': 0.6883657009391664, 'minpse': 0.6111111111111112}
epoch 48
14.461412906646729
validation set
{'acc': 0.86153847, 'prec0': 0.9, 'prec1': 0.73333335, 'rec0': 0.9183673, 'rec1': 0.6875, 'auroc': 0.8061224489795918, 'auprc': 0.7195771209928632, 'minpse': 0.6875}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8679245, 'prec1': 0.57894737, 'rec0': 0.8518519, 'rec1': 0.6111111, 'auroc': 0.7417695473251029, 'auprc': 0.6978731161793239, 'minpse': 0.6111111111111112}
epoch 49
13.659941010177135
validation set
{'acc': 0.83076924, 'prec0': 0.8958333, 'prec1': 0.64705884, 'rec0': 0.877551, 'rec1': 0.6875, 'auroc': 0.7780612244897959, 'auprc': 0.7153350024570961, 'minpse': 0.6470588235294118}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.88, 'prec1': 0.54545456, 'rec0': 0.8148148, 'rec1': 0.6666667, 'auroc': 0.7808641975308642, 'auprc': 0.6327432232536965, 'minpse': 0.5714285714285714}
Reset trainable parameters of layer = Conv2d(1, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Linear(in_features=512, out_features=1000, bias=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Conv2d(64, 384, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=7200, bias=True)
Reset trainable parameters of layer = Linear(in_features=1000, out_features=6272, bias=True)
Reset trainable parameters of layer = Linear(in_features=300, out_features=600, bias=True)
Reset trainable parameters of layer = Linear(in_features=600, out_features=300, bias=True)
Reset trainable parameters of layer = Conv1d(300, 300, kernel_size=(24,), stride=(1,))
Reset trainable parameters of layer = Linear(in_features=300, out_features=1, bias=True)
Reset trainable parameters of layer = Linear(in_features=24, out_features=1, bias=True)
Removing classifier.fc.weight, number of classes has changed.
Removing classifier.fc.bias, number of classes has changed.
for distribution val
type 0= 46 type 1= 19
for distribution test
type 0= 54 type 1= 18
epoch 0
34.76546669006348
validation set
{'acc': 0.6923077, 'prec0': 0.8095238, 'prec1': 0.47826087, 'rec0': 0.73913044, 'rec1': 0.57894737, 'auroc': 0.6910755148741419, 'auprc': 0.5564674503425653, 'minpse': 0.4782608695652174}
Mortality Prediction on the test set
{'acc': 0.6111111, 'prec0': 0.79545456, 'prec1': 0.32142857, 'rec0': 0.6481481, 'rec1': 0.5, 'auroc': 0.5802469135802468, 'auprc': 0.4331695965469571, 'minpse': 0.35}
epoch 1
33.93130683898926
validation set
{'acc': 0.6615385, 'prec0': 0.875, 'prec1': 0.45454547, 'rec0': 0.6086956, 'rec1': 0.7894737, 'auroc': 0.7013729977116705, 'auprc': 0.4839436426946968, 'minpse': 0.48148148148148145}
Mortality Prediction on the test set
{'acc': 0.5833333, 'prec0': 0.8333333, 'prec1': 0.33333334, 'rec0': 0.5555556, 'rec1': 0.6666667, 'auroc': 0.6893004115226338, 'auprc': 0.3887969901298246, 'minpse': 0.41379310344827586}
epoch 2
33.29917633533478
validation set
{'acc': 0.53846157, 'prec0': 0.9444444, 'prec1': 0.38297874, 'rec0': 0.36956522, 'rec1': 0.94736844, 'auroc': 0.6636155606407322, 'auprc': 0.38028064734499395, 'minpse': 0.44}
Mortality Prediction on the test set
{'acc': 0.41666666, 'prec0': 0.875, 'prec1': 0.2857143, 'rec0': 0.25925925, 'rec1': 0.8888889, 'auroc': 0.6450617283950618, 'auprc': 0.3802620218561849, 'minpse': 0.3888888888888889}
epoch 3
33.56790101528168
validation set
{'acc': 0.73846155, 'prec0': 0.76363635, 'prec1': 0.6, 'rec0': 0.9130435, 'rec1': 0.31578946, 'auroc': 0.5354691075514875, 'auprc': 0.3863364514004469, 'minpse': 0.375}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.78125, 'prec1': 0.5, 'rec0': 0.9259259, 'rec1': 0.22222222, 'auroc': 0.6141975308641976, 'auprc': 0.36193049904817953, 'minpse': 0.391304347826087}
epoch 4
32.05617880821228
validation set
{'acc': 0.8, 'prec0': 0.9714286, 'prec1': 0.6, 'rec0': 0.73913044, 'rec1': 0.94736844, 'auroc': 0.8501144164759725, 'auprc': 0.6976703407874307, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.5972222, 'prec0': 0.8787879, 'prec1': 0.35897437, 'rec0': 0.537037, 'rec1': 0.7777778, 'auroc': 0.7366255144032922, 'auprc': 0.5791168105675802, 'minpse': 0.5}
epoch 5
30.519964575767517
validation set
{'acc': 0.75384617, 'prec0': 0.9166667, 'prec1': 0.55172414, 'rec0': 0.7173913, 'rec1': 0.84210527, 'auroc': 0.8054919908466819, 'auprc': 0.6073260760436447, 'minpse': 0.631578947368421}
Mortality Prediction on the test set
{'acc': 0.5833333, 'prec0': 0.8, 'prec1': 0.3125, 'rec0': 0.5925926, 'rec1': 0.5555556, 'auroc': 0.676954732510288, 'auprc': 0.39912140810268837, 'minpse': 0.4444444444444444}
epoch 6
29.490492463111877
validation set
{'acc': 0.84615386, 'prec0': 0.875, 'prec1': 0.7647059, 'rec0': 0.9130435, 'rec1': 0.68421054, 'auroc': 0.8672768878718535, 'auprc': 0.7684676624137807, 'minpse': 0.6842105263157895}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.88235295, 'prec1': 0.5714286, 'rec0': 0.8333333, 'rec1': 0.6666667, 'auroc': 0.8137860082304527, 'auprc': 0.6277534411471417, 'minpse': 0.631578947368421}
epoch 7
27.427834510803223
validation set
{'acc': 0.86153847, 'prec0': 0.9111111, 'prec1': 0.75, 'rec0': 0.8913044, 'rec1': 0.7894737, 'auroc': 0.8695652173913043, 'auprc': 0.7668683235236167, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9166667, 'prec1': 0.5833333, 'rec0': 0.8148148, 'rec1': 0.7777778, 'auroc': 0.8137860082304527, 'auprc': 0.6417896778146204, 'minpse': 0.6086956521739131}
epoch 8
26.969891011714935
validation set
{'acc': 0.8, 'prec0': 0.902439, 'prec1': 0.625, 'rec0': 0.8043478, 'rec1': 0.7894737, 'auroc': 0.8752860411899314, 'auprc': 0.794962602773448, 'minpse': 0.65}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.90909094, 'prec1': 0.5, 'rec0': 0.7407407, 'rec1': 0.7777778, 'auroc': 0.8446502057613169, 'auprc': 0.7501424476870887, 'minpse': 0.7222222222222222}
epoch 9
26.24391520023346
validation set
{'acc': 0.8153846, 'prec0': 0.94736844, 'prec1': 0.6296296, 'rec0': 0.7826087, 'rec1': 0.8947368, 'auroc': 0.9096109839816934, 'auprc': 0.8522527754386453, 'minpse': 0.7368421052631579}
Mortality Prediction on the test set
{'acc': 0.6666667, 'prec0': 0.9166667, 'prec1': 0.41666666, 'rec0': 0.6111111, 'rec1': 0.8333333, 'auroc': 0.838477366255144, 'auprc': 0.7080953385107664, 'minpse': 0.6666666666666666}
epoch 10
24.604634165763855
validation set
{'acc': 0.8769231, 'prec0': 0.95238096, 'prec1': 0.73913044, 'rec0': 0.8695652, 'rec1': 0.8947368, 'auroc': 0.925629290617849, 'auprc': 0.8365511506074406, 'minpse': 0.7894736842105263}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.9361702, 'prec1': 0.6, 'rec0': 0.8148148, 'rec1': 0.8333333, 'auroc': 0.8662551440329218, 'auprc': 0.7749493887693374, 'minpse': 0.6666666666666666}
epoch 11
25.701550126075745
validation set
{'acc': 0.86153847, 'prec0': 0.877551, 'prec1': 0.8125, 'rec0': 0.9347826, 'rec1': 0.68421054, 'auroc': 0.8935926773455378, 'auprc': 0.8330246730463775, 'minpse': 0.7}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.8958333, 'prec1': 0.5416667, 'rec0': 0.7962963, 'rec1': 0.7222222, 'auroc': 0.7839506172839505, 'auprc': 0.7013560119730611, 'minpse': 0.631578947368421}
epoch 12
24.29089730978012
validation set
{'acc': 0.8153846, 'prec0': 0.8863636, 'prec1': 0.6666667, 'rec0': 0.84782606, 'rec1': 0.7368421, 'auroc': 0.7883295194508009, 'auprc': 0.677005665893901, 'minpse': 0.6842105263157895}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.86, 'prec1': 0.5, 'rec0': 0.7962963, 'rec1': 0.6111111, 'auroc': 0.7283950617283951, 'auprc': 0.4627564632492, 'minpse': 0.5263157894736842}
epoch 13
22.01983916759491
validation set
{'acc': 0.8153846, 'prec0': 0.9722222, 'prec1': 0.62068963, 'rec0': 0.76086956, 'rec1': 0.94736844, 'auroc': 0.9164759725400458, 'auprc': 0.8630886173023005, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.7083333, 'prec0': 0.9230769, 'prec1': 0.45454547, 'rec0': 0.6666667, 'rec1': 0.8333333, 'auroc': 0.8292181069958847, 'auprc': 0.7519097936679546, 'minpse': 0.65}
epoch 14
22.825977206230164
validation set
{'acc': 0.9076923, 'prec0': 0.95454544, 'prec1': 0.8095238, 'rec0': 0.9130435, 'rec1': 0.8947368, 'auroc': 0.9645308924485126, 'auprc': 0.9293831441773825, 'minpse': 0.8095238095238095}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9347826, 'prec1': 0.5769231, 'rec0': 0.7962963, 'rec1': 0.8333333, 'auroc': 0.8641975308641975, 'auprc': 0.7104839943295557, 'minpse': 0.6666666666666666}
epoch 15
24.53597319126129
validation set
{'acc': 0.83076924, 'prec0': 0.90697676, 'prec1': 0.6818182, 'rec0': 0.84782606, 'rec1': 0.7894737, 'auroc': 0.8707093821510298, 'auprc': 0.7500500577861304, 'minpse': 0.7}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.8913044, 'prec1': 0.5, 'rec0': 0.7592593, 'rec1': 0.7222222, 'auroc': 0.8179012345679013, 'auprc': 0.6742872520726038, 'minpse': 0.6111111111111112}
epoch 16
20.40024757385254
validation set
{'acc': 0.8769231, 'prec0': 0.95238096, 'prec1': 0.73913044, 'rec0': 0.8695652, 'rec1': 0.8947368, 'auroc': 0.9508009153318078, 'auprc': 0.9106186271837773, 'minpse': 0.7894736842105263}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9166667, 'prec1': 0.5833333, 'rec0': 0.8148148, 'rec1': 0.7777778, 'auroc': 0.8384773662551441, 'auprc': 0.768787552799254, 'minpse': 0.7368421052631579}
epoch 17
19.689867675304413
validation set
{'acc': 0.9076923, 'prec0': 0.97619045, 'prec1': 0.7826087, 'rec0': 0.8913044, 'rec1': 0.94736844, 'auroc': 0.9633867276887873, 'auprc': 0.9208500782540194, 'minpse': 0.7894736842105263}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.9318182, 'prec1': 0.53571427, 'rec0': 0.7592593, 'rec1': 0.8333333, 'auroc': 0.8477366255144033, 'auprc': 0.7683597809820314, 'minpse': 0.631578947368421}
epoch 18
19.077491760253906
validation set
{'acc': 0.8153846, 'prec0': 0.94736844, 'prec1': 0.6296296, 'rec0': 0.7826087, 'rec1': 0.8947368, 'auroc': 0.9233409610983981, 'auprc': 0.8657130864687488, 'minpse': 0.7368421052631579}
Mortality Prediction on the test set
{'acc': 0.6666667, 'prec0': 0.9166667, 'prec1': 0.41666666, 'rec0': 0.6111111, 'rec1': 0.8333333, 'auroc': 0.8261316872427984, 'auprc': 0.7048320107400317, 'minpse': 0.6842105263157895}
epoch 19
20.052453100681305
validation set
{'acc': 0.9230769, 'prec0': 0.9767442, 'prec1': 0.8181818, 'rec0': 0.9130435, 'rec1': 0.94736844, 'auroc': 0.9668192219679634, 'auprc': 0.9413171335435879, 'minpse': 0.85}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.8888889, 'prec1': 0.4814815, 'rec0': 0.7407407, 'rec1': 0.7222222, 'auroc': 0.7921810699588477, 'auprc': 0.7066496478518347, 'minpse': 0.5555555555555556}
epoch 20
20.46650195121765
validation set
{'acc': 0.84615386, 'prec0': 1.0, 'prec1': 0.6551724, 'rec0': 0.7826087, 'rec1': 1.0, 'auroc': 0.9519450800915332, 'auprc': 0.9009970150258144, 'minpse': 0.8}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.9268293, 'prec1': 0.48387095, 'rec0': 0.7037037, 'rec1': 0.8333333, 'auroc': 0.8621399176954733, 'auprc': 0.8020240028088732, 'minpse': 0.6842105263157895}
epoch 21
18.94927203655243
validation set
{'acc': 0.8769231, 'prec0': 1.0, 'prec1': 0.7037037, 'rec0': 0.82608694, 'rec1': 1.0, 'auroc': 0.9473684210526316, 'auprc': 0.8831243108655951, 'minpse': 0.7368421052631579}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.88235295, 'prec1': 0.5714286, 'rec0': 0.8333333, 'rec1': 0.6666667, 'auroc': 0.7654320987654321, 'auprc': 0.7375985007320358, 'minpse': 0.6666666666666666}
epoch 22
17.966028153896332
validation set
{'acc': 0.8769231, 'prec0': 0.975, 'prec1': 0.72, 'rec0': 0.84782606, 'rec1': 0.94736844, 'auroc': 0.9416475972540046, 'auprc': 0.8601175565974846, 'minpse': 0.7727272727272727}
Mortality Prediction on the test set
{'acc': 0.7083333, 'prec0': 0.902439, 'prec1': 0.4516129, 'rec0': 0.6851852, 'rec1': 0.7777778, 'auroc': 0.8641975308641975, 'auprc': 0.7933048178474207, 'minpse': 0.6666666666666666}
epoch 23
19.046027719974518
validation set
{'acc': 0.86153847, 'prec0': 0.9111111, 'prec1': 0.75, 'rec0': 0.8913044, 'rec1': 0.7894737, 'auroc': 0.8775743707093822, 'auprc': 0.7598238161347095, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.875, 'prec1': 0.6875, 'rec0': 0.9074074, 'rec1': 0.6111111, 'auroc': 0.815843621399177, 'auprc': 0.7736106490455512, 'minpse': 0.7222222222222222}
epoch 24
18.606432735919952
validation set
{'acc': 0.83076924, 'prec0': 0.8888889, 'prec1': 0.7, 'rec0': 0.8695652, 'rec1': 0.7368421, 'auroc': 0.8432494279176201, 'auprc': 0.6952440007549172, 'minpse': 0.7}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.877551, 'prec1': 0.5217391, 'rec0': 0.7962963, 'rec1': 0.6666667, 'auroc': 0.7788065843621398, 'auprc': 0.7390914503114109, 'minpse': 0.6111111111111112}
epoch 25
25.130440533161163
validation set
{'acc': 0.83076924, 'prec0': 0.94871795, 'prec1': 0.65384614, 'rec0': 0.8043478, 'rec1': 0.8947368, 'auroc': 0.8455377574370709, 'auprc': 0.6556427206387394, 'minpse': 0.6842105263157895}
Mortality Prediction on the test set
{'acc': 0.6805556, 'prec0': 0.84444445, 'prec1': 0.4074074, 'rec0': 0.7037037, 'rec1': 0.6111111, 'auroc': 0.7777777777777778, 'auprc': 0.6163803490105119, 'minpse': 0.5263157894736842}
epoch 26
22.614620804786682
validation set
{'acc': 0.86153847, 'prec0': 0.9512195, 'prec1': 0.7083333, 'rec0': 0.84782606, 'rec1': 0.8947368, 'auroc': 0.9302059496567506, 'auprc': 0.8635473910162894, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.9318182, 'prec1': 0.53571427, 'rec0': 0.7592593, 'rec1': 0.8333333, 'auroc': 0.8364197530864197, 'auprc': 0.8074768174032425, 'minpse': 0.7}
epoch 27
21.17265611886978
validation set
{'acc': 0.8923077, 'prec0': 0.93333334, 'prec1': 0.8, 'rec0': 0.9130435, 'rec1': 0.84210527, 'auroc': 0.9290617848970253, 'auprc': 0.8646664643894562, 'minpse': 0.8}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.93877554, 'prec1': 0.65217394, 'rec0': 0.8518519, 'rec1': 0.8333333, 'auroc': 0.8703703703703703, 'auprc': 0.7669498634088328, 'minpse': 0.6666666666666666}
epoch 28
21.11700999736786
validation set
{'acc': 0.9076923, 'prec0': 0.88461536, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.68421054, 'auroc': 0.9164759725400458, 'auprc': 0.8726185862408771, 'minpse': 0.7368421052631579}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.8548387, 'prec1': 0.9, 'rec0': 0.9814815, 'rec1': 0.5, 'auroc': 0.8333333333333334, 'auprc': 0.7347656627379395, 'minpse': 0.631578947368421}
epoch 29
19.763789117336273
validation set
{'acc': 0.8, 'prec0': 1.0, 'prec1': 0.59375, 'rec0': 0.7173913, 'rec1': 1.0, 'auroc': 0.925629290617849, 'auprc': 0.849156653885657, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.6527778, 'prec0': 0.9142857, 'prec1': 0.4054054, 'rec0': 0.5925926, 'rec1': 0.8333333, 'auroc': 0.8652263374485597, 'auprc': 0.8144095715495865, 'minpse': 0.7222222222222222}
epoch 30
19.351558029651642
validation set
{'acc': 0.8769231, 'prec0': 1.0, 'prec1': 0.7037037, 'rec0': 0.82608694, 'rec1': 1.0, 'auroc': 0.9473684210526316, 'auprc': 0.8588718304618299, 'minpse': 0.8095238095238095}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.95, 'prec1': 0.5, 'rec0': 0.7037037, 'rec1': 0.8888889, 'auroc': 0.8755144032921811, 'auprc': 0.775168167553961, 'minpse': 0.7222222222222222}
epoch 31
17.84687978029251
validation set
{'acc': 0.8769231, 'prec0': 0.975, 'prec1': 0.72, 'rec0': 0.84782606, 'rec1': 0.94736844, 'auroc': 0.9359267734553776, 'auprc': 0.8541683622221949, 'minpse': 0.7272727272727273}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.9130435, 'prec1': 0.53846157, 'rec0': 0.7777778, 'rec1': 0.7777778, 'auroc': 0.8353909465020576, 'auprc': 0.7683129606454917, 'minpse': 0.631578947368421}
epoch 32
19.51248812675476
validation set
{'acc': 0.8769231, 'prec0': 0.975, 'prec1': 0.72, 'rec0': 0.84782606, 'rec1': 0.94736844, 'auroc': 0.9302059496567506, 'auprc': 0.8353323087169346, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.9130435, 'prec1': 0.53846157, 'rec0': 0.7777778, 'rec1': 0.7777778, 'auroc': 0.8446502057613169, 'auprc': 0.7855766672199933, 'minpse': 0.6842105263157895}
epoch 33
18.75417983531952
validation set
{'acc': 0.86153847, 'prec0': 0.974359, 'prec1': 0.6923077, 'rec0': 0.82608694, 'rec1': 0.94736844, 'auroc': 0.9324942791762014, 'auprc': 0.8509954137794093, 'minpse': 0.7894736842105263}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.9148936, 'prec1': 0.56, 'rec0': 0.7962963, 'rec1': 0.7777778, 'auroc': 0.8353909465020577, 'auprc': 0.7675121137714913, 'minpse': 0.6190476190476191}
epoch 34
18.61928278207779
validation set
{'acc': 0.9076923, 'prec0': 0.9166667, 'prec1': 0.88235295, 'rec0': 0.95652175, 'rec1': 0.7894737, 'auroc': 0.8981693363844394, 'auprc': 0.8643049829006546, 'minpse': 0.7894736842105263}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.8245614, 'prec1': 0.53333336, 'rec0': 0.8703704, 'rec1': 0.44444445, 'auroc': 0.7962962962962963, 'auprc': 0.6005779185544483, 'minpse': 0.6}
epoch 35
17.72620928287506
validation set
{'acc': 0.8, 'prec0': 0.902439, 'prec1': 0.625, 'rec0': 0.8043478, 'rec1': 0.7894737, 'auroc': 0.8123569794050343, 'auprc': 0.7138164815306287, 'minpse': 0.6363636363636364}
Mortality Prediction on the test set
{'acc': 0.6388889, 'prec0': 0.8333333, 'prec1': 0.36666667, 'rec0': 0.6481481, 'rec1': 0.6111111, 'auroc': 0.70679012345679, 'auprc': 0.5598344666049324, 'minpse': 0.47619047619047616}
epoch 36
18.644411325454712
validation set
{'acc': 0.86153847, 'prec0': 0.974359, 'prec1': 0.6923077, 'rec0': 0.82608694, 'rec1': 0.94736844, 'auroc': 0.9164759725400458, 'auprc': 0.8271857194498187, 'minpse': 0.7391304347826086}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8979592, 'prec1': 0.5652174, 'rec0': 0.8148148, 'rec1': 0.7222222, 'auroc': 0.823045267489712, 'auprc': 0.7675076192835011, 'minpse': 0.6842105263157895}
epoch 37
18.453118801116943
validation set
{'acc': 0.8769231, 'prec0': 0.95238096, 'prec1': 0.73913044, 'rec0': 0.8695652, 'rec1': 0.8947368, 'auroc': 0.9347826086956522, 'auprc': 0.8556919935087435, 'minpse': 0.7619047619047619}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.89361703, 'prec1': 0.52, 'rec0': 0.7777778, 'rec1': 0.7222222, 'auroc': 0.8405349794238682, 'auprc': 0.7804993973956246, 'minpse': 0.6666666666666666}
epoch 38
16.689505875110626
validation set
{'acc': 0.8769231, 'prec0': 0.975, 'prec1': 0.72, 'rec0': 0.84782606, 'rec1': 0.94736844, 'auroc': 0.9439359267734554, 'auprc': 0.8745240008300954, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.89361703, 'prec1': 0.52, 'rec0': 0.7777778, 'rec1': 0.7222222, 'auroc': 0.8302469135802469, 'auprc': 0.7230615940028642, 'minpse': 0.631578947368421}
epoch 39
17.572327136993408
validation set
{'acc': 0.86153847, 'prec0': 0.9512195, 'prec1': 0.7083333, 'rec0': 0.84782606, 'rec1': 0.8947368, 'auroc': 0.9302059496567505, 'auprc': 0.8653212986792549, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.88461536, 'prec1': 0.6, 'rec0': 0.8518519, 'rec1': 0.6666667, 'auroc': 0.8292181069958848, 'auprc': 0.7254128638565703, 'minpse': 0.6111111111111112}
epoch 40
18.496778786182404
validation set
{'acc': 0.84615386, 'prec0': 1.0, 'prec1': 0.6551724, 'rec0': 0.7826087, 'rec1': 1.0, 'auroc': 0.9290617848970252, 'auprc': 0.8398404278957485, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.9047619, 'prec1': 0.46666667, 'rec0': 0.7037037, 'rec1': 0.7777778, 'auroc': 0.8096707818930042, 'auprc': 0.7271203525580022, 'minpse': 0.631578947368421}
epoch 41
17.756400883197784
validation set
{'acc': 0.8, 'prec0': 0.9459459, 'prec1': 0.60714287, 'rec0': 0.76086956, 'rec1': 0.8947368, 'auroc': 0.8695652173913043, 'auprc': 0.7910030403782888, 'minpse': 0.6521739130434783}
Mortality Prediction on the test set
{'acc': 0.6666667, 'prec0': 0.8947368, 'prec1': 0.4117647, 'rec0': 0.6296296, 'rec1': 0.7777778, 'auroc': 0.7962962962962964, 'auprc': 0.7471840884641681, 'minpse': 0.6666666666666666}
epoch 42
16.384274899959564
validation set
{'acc': 0.86153847, 'prec0': 0.9512195, 'prec1': 0.7083333, 'rec0': 0.84782606, 'rec1': 0.8947368, 'auroc': 0.9199084668192219, 'auprc': 0.8312974513550964, 'minpse': 0.7619047619047619}
Mortality Prediction on the test set
{'acc': 0.6666667, 'prec0': 0.8947368, 'prec1': 0.4117647, 'rec0': 0.6296296, 'rec1': 0.7777778, 'auroc': 0.8292181069958848, 'auprc': 0.7845205288322328, 'minpse': 0.6666666666666666}
epoch 43
16.791459679603577
validation set
{'acc': 0.8769231, 'prec0': 0.9130435, 'prec1': 0.7894737, 'rec0': 0.9130435, 'rec1': 0.7894737, 'auroc': 0.8924485125858124, 'auprc': 0.8376561299129075, 'minpse': 0.7894736842105263}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8867925, 'prec1': 0.6315789, 'rec0': 0.8703704, 'rec1': 0.6666667, 'auroc': 0.8353909465020576, 'auprc': 0.7837379534701387, 'minpse': 0.6666666666666666}
epoch 44
15.853214740753174
validation set
{'acc': 0.84615386, 'prec0': 0.95, 'prec1': 0.68, 'rec0': 0.82608694, 'rec1': 0.8947368, 'auroc': 0.8524027459954234, 'auprc': 0.824764016986061, 'minpse': 0.7368421052631579}
Mortality Prediction on the test set
{'acc': 0.6805556, 'prec0': 0.8604651, 'prec1': 0.41379312, 'rec0': 0.6851852, 'rec1': 0.6666667, 'auroc': 0.7510288065843621, 'auprc': 0.705924881123155, 'minpse': 0.631578947368421}
epoch 45
16.98356780409813
validation set
{'acc': 0.8769231, 'prec0': 0.8958333, 'prec1': 0.8235294, 'rec0': 0.9347826, 'rec1': 0.7368421, 'auroc': 0.8569794050343249, 'auprc': 0.7966489404229595, 'minpse': 0.7368421052631579}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.85714287, 'prec1': 0.625, 'rec0': 0.8888889, 'rec1': 0.5555556, 'auroc': 0.7633744855967078, 'auprc': 0.6483616141688252, 'minpse': 0.5555555555555556}
epoch 46
15.69156564027071
validation set
{'acc': 0.8769231, 'prec0': 0.9130435, 'prec1': 0.7894737, 'rec0': 0.9130435, 'rec1': 0.7894737, 'auroc': 0.8821510297482837, 'auprc': 0.8023084660573387, 'minpse': 0.7894736842105263}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.88461536, 'prec1': 0.6, 'rec0': 0.8518519, 'rec1': 0.6666667, 'auroc': 0.809670781893004, 'auprc': 0.7477457666069487, 'minpse': 0.6111111111111112}
epoch 47
16.220715582370758
validation set
{'acc': 0.83076924, 'prec0': 0.80701756, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.42105263, 'auroc': 0.6567505720823799, 'auprc': 0.6324088588212702, 'minpse': 0.5263157894736842}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.7647059, 'prec1': 0.5, 'rec0': 0.962963, 'rec1': 0.11111111, 'auroc': 0.4794238683127572, 'auprc': 0.26828198942073417, 'minpse': 0.2727272727272727}
epoch 48
15.656407952308655
validation set
{'acc': 0.83076924, 'prec0': 0.9268293, 'prec1': 0.6666667, 'rec0': 0.82608694, 'rec1': 0.84210527, 'auroc': 0.8958810068649885, 'auprc': 0.8214378957634407, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.8863636, 'prec1': 0.4642857, 'rec0': 0.7222222, 'rec1': 0.7222222, 'auroc': 0.8292181069958847, 'auprc': 0.7482043615960263, 'minpse': 0.6111111111111112}
epoch 49
15.33272933959961
validation set
{'acc': 0.8, 'prec0': 0.8, 'prec1': 0.8, 'rec0': 0.95652175, 'rec1': 0.42105263, 'auroc': 0.6990846681922197, 'auprc': 0.6269685660454529, 'minpse': 0.47368421052631576}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.796875, 'prec1': 0.625, 'rec0': 0.9444444, 'rec1': 0.2777778, 'auroc': 0.5802469135802469, 'auprc': 0.4140986220026322, 'minpse': 0.3142857142857143}
Reset trainable parameters of layer = Conv2d(1, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Linear(in_features=512, out_features=1000, bias=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Conv2d(64, 384, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=7200, bias=True)
Reset trainable parameters of layer = Linear(in_features=1000, out_features=6272, bias=True)
Reset trainable parameters of layer = Linear(in_features=300, out_features=600, bias=True)
Reset trainable parameters of layer = Linear(in_features=600, out_features=300, bias=True)
Reset trainable parameters of layer = Conv1d(300, 300, kernel_size=(24,), stride=(1,))
Reset trainable parameters of layer = Linear(in_features=300, out_features=1, bias=True)
Reset trainable parameters of layer = Linear(in_features=24, out_features=1, bias=True)
Removing classifier.fc.weight, number of classes has changed.
Removing classifier.fc.bias, number of classes has changed.
for distribution val
type 0= 45 type 1= 20
for distribution test
type 0= 54 type 1= 18
epoch 0
34.062436282634735
validation set
{'acc': 0.3846154, 'prec0': 0.6, 'prec1': 0.25, 'rec0': 0.33333334, 'rec1': 0.5, 'auroc': 0.49888888888888894, 'auprc': 0.3182410095885747, 'minpse': 0.36363636363636365}
Mortality Prediction on the test set
{'acc': 0.3611111, 'prec0': 0.6666667, 'prec1': 0.20833333, 'rec0': 0.2962963, 'rec1': 0.5555556, 'auroc': 0.45267489711934156, 'auprc': 0.2792902117314757, 'minpse': 0.3}
epoch 1
34.89851796627045
validation set
{'acc': 0.72307694, 'prec0': 0.754717, 'prec1': 0.5833333, 'rec0': 0.8888889, 'rec1': 0.35, 'auroc': 0.5544444444444444, 'auprc': 0.3895863110677159, 'minpse': 0.4}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.8103448, 'prec1': 0.5, 'rec0': 0.8703704, 'rec1': 0.3888889, 'auroc': 0.6491769547325102, 'auprc': 0.4771676838114721, 'minpse': 0.39285714285714285}
epoch 2
33.83159112930298
validation set
{'acc': 0.8153846, 'prec0': 0.8, 'prec1': 0.9, 'rec0': 0.9777778, 'rec1': 0.45, 'auroc': 0.6688888888888889, 'auprc': 0.5980168129076964, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.796875, 'prec1': 0.625, 'rec0': 0.9444444, 'rec1': 0.2777778, 'auroc': 0.6090534979423868, 'auprc': 0.5080282459638683, 'minpse': 0.4}
epoch 3
32.55812180042267
validation set
{'acc': 0.7076923, 'prec0': 0.7407407, 'prec1': 0.54545456, 'rec0': 0.8888889, 'rec1': 0.3, 'auroc': 0.5499999999999999, 'auprc': 0.45689325284859356, 'minpse': 0.35}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.8103448, 'prec1': 0.5, 'rec0': 0.8703704, 'rec1': 0.3888889, 'auroc': 0.6049382716049382, 'auprc': 0.5309776161612432, 'minpse': 0.4444444444444444}
epoch 4
32.629199504852295
validation set
{'acc': 0.7076923, 'prec0': 0.7708333, 'prec1': 0.5294118, 'rec0': 0.82222223, 'rec1': 0.45, 'auroc': 0.59, 'auprc': 0.4894034938397731, 'minpse': 0.45454545454545453}
Mortality Prediction on the test set
{'acc': 0.6944444, 'prec0': 0.8076923, 'prec1': 0.4, 'rec0': 0.7777778, 'rec1': 0.44444445, 'auroc': 0.6347736625514403, 'auprc': 0.5538067683298971, 'minpse': 0.42857142857142855}
epoch 5
31.28573226928711
validation set
{'acc': 0.7846154, 'prec0': 0.8780488, 'prec1': 0.625, 'rec0': 0.8, 'rec1': 0.75, 'auroc': 0.7377777777777778, 'auprc': 0.6783001951935204, 'minpse': 0.625}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.87234044, 'prec1': 0.48, 'rec0': 0.7592593, 'rec1': 0.6666667, 'auroc': 0.7366255144032922, 'auprc': 0.595318962464049, 'minpse': 0.5}
epoch 6
28.78278398513794
validation set
{'acc': 0.7076923, 'prec0': 0.76, 'prec1': 0.53333336, 'rec0': 0.84444445, 'rec1': 0.4, 'auroc': 0.6077777777777778, 'auprc': 0.4903811404440817, 'minpse': 0.42857142857142855}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.8181818, 'prec1': 0.47058824, 'rec0': 0.8333333, 'rec1': 0.44444445, 'auroc': 0.7664609053497943, 'auprc': 0.6299022914771544, 'minpse': 0.4782608695652174}
epoch 7
28.6108917593956
validation set
{'acc': 0.7846154, 'prec0': 0.81632656, 'prec1': 0.6875, 'rec0': 0.8888889, 'rec1': 0.55, 'auroc': 0.7344444444444445, 'auprc': 0.6467937947804324, 'minpse': 0.55}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.8363636, 'prec1': 0.5294118, 'rec0': 0.8518519, 'rec1': 0.5, 'auroc': 0.8302469135802469, 'auprc': 0.7101523164834491, 'minpse': 0.56}
epoch 8
27.48969602584839
validation set
{'acc': 0.7846154, 'prec0': 0.8604651, 'prec1': 0.6363636, 'rec0': 0.82222223, 'rec1': 0.7, 'auroc': 0.7, 'auprc': 0.611627496987291, 'minpse': 0.65}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.84313726, 'prec1': 0.47619048, 'rec0': 0.7962963, 'rec1': 0.5555556, 'auroc': 0.7139917695473251, 'auprc': 0.6282002712629415, 'minpse': 0.5555555555555556}
epoch 9
24.785240054130554
validation set
{'acc': 0.7076923, 'prec0': 0.8095238, 'prec1': 0.5217391, 'rec0': 0.75555557, 'rec1': 0.6, 'auroc': 0.678888888888889, 'auprc': 0.5287642221156456, 'minpse': 0.5238095238095238}
Mortality Prediction on the test set
{'acc': 0.7083333, 'prec0': 0.8666667, 'prec1': 0.44444445, 'rec0': 0.7222222, 'rec1': 0.6666667, 'auroc': 0.727366255144033, 'auprc': 0.45292547524094146, 'minpse': 0.6111111111111112}
epoch 10
26.022408604621887
validation set
{'acc': 0.83076924, 'prec0': 0.8269231, 'prec1': 0.84615386, 'rec0': 0.95555556, 'rec1': 0.55, 'auroc': 0.7377777777777778, 'auprc': 0.714608552993075, 'minpse': 0.6190476190476191}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.8548387, 'prec1': 0.9, 'rec0': 0.9814815, 'rec1': 0.5, 'auroc': 0.8539094650205762, 'auprc': 0.7815235901631357, 'minpse': 0.7222222222222222}
epoch 11
24.859617173671722
validation set
{'acc': 0.8153846, 'prec0': 0.8367347, 'prec1': 0.75, 'rec0': 0.9111111, 'rec1': 0.6, 'auroc': 0.7277777777777777, 'auprc': 0.6757813062027822, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8679245, 'prec1': 0.57894737, 'rec0': 0.8518519, 'rec1': 0.6111111, 'auroc': 0.7685185185185186, 'auprc': 0.5815021730899368, 'minpse': 0.6111111111111112}
epoch 12
29.168438613414764
validation set
{'acc': 0.73846155, 'prec0': 0.8333333, 'prec1': 0.5652174, 'rec0': 0.7777778, 'rec1': 0.65, 'auroc': 0.73, 'auprc': 0.6346446842327182, 'minpse': 0.5652173913043478}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.88235295, 'prec1': 0.5714286, 'rec0': 0.8333333, 'rec1': 0.6666667, 'auroc': 0.808641975308642, 'auprc': 0.6977592752120028, 'minpse': 0.6666666666666666}
epoch 13
24.33832621574402
validation set
{'acc': 0.73846155, 'prec0': 0.8043478, 'prec1': 0.57894737, 'rec0': 0.82222223, 'rec1': 0.55, 'auroc': 0.7122222222222222, 'auprc': 0.6259050380557643, 'minpse': 0.55}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.88461536, 'prec1': 0.6, 'rec0': 0.8518519, 'rec1': 0.6666667, 'auroc': 0.8333333333333334, 'auprc': 0.7557759533759656, 'minpse': 0.6666666666666666}
epoch 14
23.633659303188324
validation set
{'acc': 0.84615386, 'prec0': 0.8181818, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.5, 'auroc': 0.7733333333333333, 'auprc': 0.7392377891541055, 'minpse': 0.6190476190476191}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.86440676, 'prec1': 0.7692308, 'rec0': 0.9444444, 'rec1': 0.5555556, 'auroc': 0.8117283950617283, 'auprc': 0.7466224924524034, 'minpse': 0.631578947368421}
epoch 15
23.02357769012451
validation set
{'acc': 0.7846154, 'prec0': 0.84444445, 'prec1': 0.65, 'rec0': 0.84444445, 'rec1': 0.65, 'auroc': 0.7588888888888888, 'auprc': 0.719201011899201, 'minpse': 0.65}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8596491, 'prec1': 0.6666667, 'rec0': 0.9074074, 'rec1': 0.5555556, 'auroc': 0.8477366255144032, 'auprc': 0.7458921071170929, 'minpse': 0.6111111111111112}
epoch 16
20.714243292808533
validation set
{'acc': 0.7846154, 'prec0': 0.82978725, 'prec1': 0.6666667, 'rec0': 0.8666667, 'rec1': 0.6, 'auroc': 0.7422222222222222, 'auprc': 0.6685418115770482, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.86440676, 'prec1': 0.7692308, 'rec0': 0.9444444, 'rec1': 0.5555556, 'auroc': 0.8220164609053499, 'auprc': 0.7399582568709937, 'minpse': 0.6666666666666666}
epoch 17
19.762401163578033
validation set
{'acc': 0.8153846, 'prec0': 0.8367347, 'prec1': 0.75, 'rec0': 0.9111111, 'rec1': 0.6, 'auroc': 0.7577777777777778, 'auprc': 0.7265059904506813, 'minpse': 0.65}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.86440676, 'prec1': 0.7692308, 'rec0': 0.9444444, 'rec1': 0.5555556, 'auroc': 0.7726337448559671, 'auprc': 0.6933524934421383, 'minpse': 0.5555555555555556}
epoch 18
21.21378856897354
validation set
{'acc': 0.7692308, 'prec0': 0.875, 'prec1': 0.6, 'rec0': 0.7777778, 'rec1': 0.75, 'auroc': 0.8077777777777778, 'auprc': 0.7253212183328563, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.877551, 'prec1': 0.5217391, 'rec0': 0.7962963, 'rec1': 0.6666667, 'auroc': 0.8323045267489712, 'auprc': 0.7354084514317857, 'minpse': 0.6666666666666666}
epoch 19
21.157634437084198
validation set
{'acc': 0.83076924, 'prec0': 0.84, 'prec1': 0.8, 'rec0': 0.93333334, 'rec1': 0.6, 'auroc': 0.7722222222222221, 'auprc': 0.7488287723024607, 'minpse': 0.6190476190476191}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.86440676, 'prec1': 0.7692308, 'rec0': 0.9444444, 'rec1': 0.5555556, 'auroc': 0.8353909465020576, 'auprc': 0.7386496450380894, 'minpse': 0.6111111111111112}
epoch 20
19.371104419231415
validation set
{'acc': 0.7846154, 'prec0': 0.82978725, 'prec1': 0.6666667, 'rec0': 0.8666667, 'rec1': 0.6, 'auroc': 0.7711111111111111, 'auprc': 0.6311479732711569, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8596491, 'prec1': 0.6666667, 'rec0': 0.9074074, 'rec1': 0.5555556, 'auroc': 0.8117283950617284, 'auprc': 0.72580495832829, 'minpse': 0.5555555555555556}
epoch 21
17.877521574497223
validation set
{'acc': 0.8, 'prec0': 0.7962963, 'prec1': 0.8181818, 'rec0': 0.95555556, 'rec1': 0.45, 'auroc': 0.76, 'auprc': 0.687517945943469, 'minpse': 0.55}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.8548387, 'prec1': 0.9, 'rec0': 0.9814815, 'rec1': 0.5, 'auroc': 0.7962962962962963, 'auprc': 0.7123442676571549, 'minpse': 0.6111111111111112}
epoch 22
18.9627166390419
validation set
{'acc': 0.73846155, 'prec0': 0.85, 'prec1': 0.56, 'rec0': 0.75555557, 'rec1': 0.7, 'auroc': 0.7144444444444444, 'auprc': 0.6173678963674708, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.9148936, 'prec1': 0.56, 'rec0': 0.7962963, 'rec1': 0.7777778, 'auroc': 0.8858024691358025, 'auprc': 0.7820126094218827, 'minpse': 0.7222222222222222}
epoch 23
18.786621063947678
validation set
{'acc': 0.7846154, 'prec0': 0.8039216, 'prec1': 0.71428573, 'rec0': 0.9111111, 'rec1': 0.5, 'auroc': 0.7422222222222222, 'auprc': 0.6686661351656789, 'minpse': 0.55}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.8448276, 'prec1': 0.64285713, 'rec0': 0.9074074, 'rec1': 0.5, 'auroc': 0.7757201646090535, 'auprc': 0.705933356473656, 'minpse': 0.6111111111111112}
epoch 24
16.285129845142365
validation set
{'acc': 0.8, 'prec0': 0.82, 'prec1': 0.73333335, 'rec0': 0.9111111, 'rec1': 0.55, 'auroc': 0.7577777777777778, 'auprc': 0.7011500527119319, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8596491, 'prec1': 0.6666667, 'rec0': 0.9074074, 'rec1': 0.5555556, 'auroc': 0.8405349794238682, 'auprc': 0.719614583731, 'minpse': 0.5555555555555556}
epoch 25
16.675887405872345
validation set
{'acc': 0.5846154, 'prec0': 0.95, 'prec1': 0.42222223, 'rec0': 0.42222223, 'rec1': 0.95, 'auroc': 0.7166666666666667, 'auprc': 0.5558878756515828, 'minpse': 0.5238095238095238}
Mortality Prediction on the test set
{'acc': 0.5555556, 'prec0': 1.0, 'prec1': 0.36, 'rec0': 0.4074074, 'rec1': 1.0, 'auroc': 0.8888888888888888, 'auprc': 0.7606199004221664, 'minpse': 0.7}
epoch 26
20.910007059574127
validation set
{'acc': 0.63076925, 'prec0': 0.8888889, 'prec1': 0.4473684, 'rec0': 0.53333336, 'rec1': 0.85, 'auroc': 0.6866666666666668, 'auprc': 0.49821836112041296, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.5972222, 'prec0': 0.962963, 'prec1': 0.37777779, 'rec0': 0.4814815, 'rec1': 0.9444444, 'auroc': 0.8868312757201646, 'auprc': 0.7266447704059473, 'minpse': 0.6666666666666666}
epoch 27
18.263887465000153
validation set
{'acc': 0.7846154, 'prec0': 0.82978725, 'prec1': 0.6666667, 'rec0': 0.8666667, 'rec1': 0.6, 'auroc': 0.7766666666666666, 'auprc': 0.6855241912291566, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.852459, 'prec1': 0.8181818, 'rec0': 0.962963, 'rec1': 0.5, 'auroc': 0.7808641975308642, 'auprc': 0.7111050010526663, 'minpse': 0.6111111111111112}
epoch 28
19.34698587656021
validation set
{'acc': 0.83076924, 'prec0': 0.8035714, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.45, 'auroc': 0.7233333333333334, 'auprc': 0.6804565507569598, 'minpse': 0.55}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.8548387, 'prec1': 0.9, 'rec0': 0.9814815, 'rec1': 0.5, 'auroc': 0.8713991769547325, 'auprc': 0.7785395834315054, 'minpse': 0.6666666666666666}
epoch 29
15.799799501895905
validation set
{'acc': 0.7846154, 'prec0': 0.7924528, 'prec1': 0.75, 'rec0': 0.93333334, 'rec1': 0.45, 'auroc': 0.6988888888888889, 'auprc': 0.6454768033549463, 'minpse': 0.55}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.8548387, 'prec1': 0.9, 'rec0': 0.9814815, 'rec1': 0.5, 'auroc': 0.8086419753086419, 'auprc': 0.7319995082293085, 'minpse': 0.6666666666666666}
epoch 30
15.40845513343811
validation set
{'acc': 0.6615385, 'prec0': 0.8484849, 'prec1': 0.46875, 'rec0': 0.62222224, 'rec1': 0.75, 'auroc': 0.7, 'auprc': 0.48994539583166, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.6527778, 'prec0': 0.8717949, 'prec1': 0.3939394, 'rec0': 0.6296296, 'rec1': 0.7222222, 'auroc': 0.8220164609053499, 'auprc': 0.7073882731568594, 'minpse': 0.6666666666666666}
epoch 31
15.470199018716812
validation set
{'acc': 0.61538464, 'prec0': 1.0, 'prec1': 0.44444445, 'rec0': 0.44444445, 'rec1': 1.0, 'auroc': 0.7622222222222222, 'auprc': 0.6446222566834476, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.625, 'prec0': 0.9354839, 'prec1': 0.3902439, 'rec0': 0.537037, 'rec1': 0.8888889, 'auroc': 0.8508230452674898, 'auprc': 0.7665995549347919, 'minpse': 0.6666666666666666}
epoch 32
16.372568905353546
validation set
{'acc': 0.6769231, 'prec0': 0.8333333, 'prec1': 0.4827586, 'rec0': 0.6666667, 'rec1': 0.7, 'auroc': 0.7177777777777777, 'auprc': 0.6032538372616238, 'minpse': 0.5238095238095238}
Mortality Prediction on the test set
{'acc': 0.7083333, 'prec0': 0.8666667, 'prec1': 0.44444445, 'rec0': 0.7222222, 'rec1': 0.6666667, 'auroc': 0.7829218106995884, 'auprc': 0.7192644107958615, 'minpse': 0.5555555555555556}
epoch 33
14.88544848561287
validation set
{'acc': 0.7076923, 'prec0': 0.8611111, 'prec1': 0.51724136, 'rec0': 0.6888889, 'rec1': 0.75, 'auroc': 0.7444444444444445, 'auprc': 0.5779602794779574, 'minpse': 0.5454545454545454}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.8695652, 'prec1': 0.46153846, 'rec0': 0.7407407, 'rec1': 0.6666667, 'auroc': 0.7983539094650206, 'auprc': 0.6302653859533478, 'minpse': 0.5789473684210527}
epoch 34
16.860180020332336
validation set
{'acc': 0.7692308, 'prec0': 0.78846157, 'prec1': 0.6923077, 'rec0': 0.9111111, 'rec1': 0.45, 'auroc': 0.7044444444444444, 'auprc': 0.5415687884219125, 'minpse': 0.55}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.852459, 'prec1': 0.8181818, 'rec0': 0.962963, 'rec1': 0.5, 'auroc': 0.8076131687242798, 'auprc': 0.7130287550280454, 'minpse': 0.5555555555555556}
epoch 35
19.876939594745636
validation set
{'acc': 0.64615387, 'prec0': 0.84375, 'prec1': 0.45454547, 'rec0': 0.6, 'rec1': 0.75, 'auroc': 0.6755555555555555, 'auprc': 0.574668438939276, 'minpse': 0.46153846153846156}
Mortality Prediction on the test set
{'acc': 0.6666667, 'prec0': 0.85714287, 'prec1': 0.4, 'rec0': 0.6666667, 'rec1': 0.6666667, 'auroc': 0.7253086419753086, 'auprc': 0.7115416914070923, 'minpse': 0.6666666666666666}
epoch 36
18.645616233348846
validation set
{'acc': 0.75384617, 'prec0': 0.78431374, 'prec1': 0.64285713, 'rec0': 0.8888889, 'rec1': 0.45, 'auroc': 0.7077777777777778, 'auprc': 0.6073910602902254, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.877551, 'prec1': 0.5217391, 'rec0': 0.7962963, 'rec1': 0.6666667, 'auroc': 0.7222222222222221, 'auprc': 0.6690262249061338, 'minpse': 0.6111111111111112}
epoch 37
15.791282534599304
validation set
{'acc': 0.63076925, 'prec0': 0.95652175, 'prec1': 0.45238096, 'rec0': 0.4888889, 'rec1': 0.95, 'auroc': 0.7744444444444444, 'auprc': 0.6587548712549525, 'minpse': 0.55}
Mortality Prediction on the test set
{'acc': 0.4027778, 'prec0': 0.8235294, 'prec1': 0.27272728, 'rec0': 0.25925925, 'rec1': 0.8333333, 'auroc': 0.7798353909465021, 'auprc': 0.6726878905450985, 'minpse': 0.6666666666666666}
epoch 38
18.725334465503693
validation set
{'acc': 0.7846154, 'prec0': 0.82978725, 'prec1': 0.6666667, 'rec0': 0.8666667, 'rec1': 0.6, 'auroc': 0.7388888888888889, 'auprc': 0.6308986572985897, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.85714287, 'prec1': 0.47826087, 'rec0': 0.7777778, 'rec1': 0.6111111, 'auroc': 0.7726337448559671, 'auprc': 0.6962245949716853, 'minpse': 0.6111111111111112}
epoch 39
16.670194506645203
validation set
{'acc': 0.61538464, 'prec0': 0.95454544, 'prec1': 0.44186047, 'rec0': 0.46666667, 'rec1': 0.95, 'auroc': 0.7388888888888889, 'auprc': 0.6144995334855944, 'minpse': 0.55}
Mortality Prediction on the test set
{'acc': 0.5277778, 'prec0': 0.9166667, 'prec1': 0.33333334, 'rec0': 0.4074074, 'rec1': 0.8888889, 'auroc': 0.8549382716049383, 'auprc': 0.7869607724495589, 'minpse': 0.6666666666666666}
epoch 40
15.47638738155365
validation set
{'acc': 0.8, 'prec0': 0.8076923, 'prec1': 0.7692308, 'rec0': 0.93333334, 'rec1': 0.5, 'auroc': 0.7433333333333334, 'auprc': 0.6127910496456372, 'minpse': 0.55}
Mortality Prediction on the test set
{'acc': 0.8888889, 'prec0': 0.87096775, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.5555556, 'auroc': 0.8106995884773663, 'auprc': 0.7543858493540646, 'minpse': 0.6111111111111112}
epoch 41
12.958727240562439
validation set
{'acc': 0.73846155, 'prec0': 0.8333333, 'prec1': 0.5652174, 'rec0': 0.7777778, 'rec1': 0.65, 'auroc': 0.7611111111111111, 'auprc': 0.6349751391053359, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.9047619, 'prec1': 0.46666667, 'rec0': 0.7037037, 'rec1': 0.7777778, 'auroc': 0.8148148148148149, 'auprc': 0.7749769267664668, 'minpse': 0.6842105263157895}
epoch 42
15.502312779426575
validation set
{'acc': 0.7846154, 'prec0': 0.81632656, 'prec1': 0.6875, 'rec0': 0.8888889, 'rec1': 0.55, 'auroc': 0.7555555555555556, 'auprc': 0.6890873866113881, 'minpse': 0.55}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.88461536, 'prec1': 0.6, 'rec0': 0.8518519, 'rec1': 0.6666667, 'auroc': 0.8611111111111112, 'auprc': 0.7731804312973896, 'minpse': 0.6666666666666666}
epoch 43
13.040888220071793
validation set
{'acc': 0.7076923, 'prec0': 0.84210527, 'prec1': 0.5185185, 'rec0': 0.7111111, 'rec1': 0.7, 'auroc': 0.75, 'auprc': 0.5592367965483703, 'minpse': 0.5714285714285714}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.90909094, 'prec1': 0.5, 'rec0': 0.7407407, 'rec1': 0.7777778, 'auroc': 0.8240740740740741, 'auprc': 0.7704113470724374, 'minpse': 0.7777777777777778}
epoch 44
12.943463653326035
validation set
{'acc': 0.8153846, 'prec0': 0.8113208, 'prec1': 0.8333333, 'rec0': 0.95555556, 'rec1': 0.5, 'auroc': 0.6811111111111111, 'auprc': 0.5485249728754181, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.84126985, 'prec1': 0.8888889, 'rec0': 0.9814815, 'rec1': 0.44444445, 'auroc': 0.8271604938271605, 'auprc': 0.7182201232444971, 'minpse': 0.6111111111111112}
epoch 45
12.117235511541367
validation set
{'acc': 0.8, 'prec0': 0.7962963, 'prec1': 0.8181818, 'rec0': 0.95555556, 'rec1': 0.45, 'auroc': 0.6855555555555555, 'auprc': 0.5747260989850691, 'minpse': 0.5238095238095238}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.83076924, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.3888889, 'auroc': 0.845679012345679, 'auprc': 0.7601814958867152, 'minpse': 0.6111111111111112}
epoch 46
13.59240198135376
validation set
{'acc': 0.8153846, 'prec0': 0.8113208, 'prec1': 0.8333333, 'rec0': 0.95555556, 'rec1': 0.5, 'auroc': 0.7466666666666667, 'auprc': 0.6541575303530927, 'minpse': 0.55}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.84126985, 'prec1': 0.8888889, 'rec0': 0.9814815, 'rec1': 0.44444445, 'auroc': 0.8652263374485597, 'auprc': 0.7492981139533494, 'minpse': 0.5909090909090909}
epoch 47
13.034583806991577
validation set
{'acc': 0.75384617, 'prec0': 0.80851066, 'prec1': 0.6111111, 'rec0': 0.84444445, 'rec1': 0.55, 'auroc': 0.7344444444444445, 'auprc': 0.6235398780035221, 'minpse': 0.55}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.8909091, 'prec1': 0.7058824, 'rec0': 0.9074074, 'rec1': 0.6666667, 'auroc': 0.8004115226337448, 'auprc': 0.7176502374606908, 'minpse': 0.6666666666666666}
epoch 48
12.270363122224808
validation set
{'acc': 0.8, 'prec0': 0.8333333, 'prec1': 0.7058824, 'rec0': 0.8888889, 'rec1': 0.6, 'auroc': 0.7666666666666666, 'auprc': 0.6902054255865859, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.8909091, 'prec1': 0.7058824, 'rec0': 0.9074074, 'rec1': 0.6666667, 'auroc': 0.794238683127572, 'auprc': 0.7363835151867117, 'minpse': 0.6666666666666666}
epoch 49
13.560420036315918
validation set
{'acc': 0.7692308, 'prec0': 0.8, 'prec1': 0.6666667, 'rec0': 0.8888889, 'rec1': 0.5, 'auroc': 0.7444444444444445, 'auprc': 0.6539078483187398, 'minpse': 0.55}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.88135594, 'prec1': 0.84615386, 'rec0': 0.962963, 'rec1': 0.6111111, 'auroc': 0.7901234567901234, 'auprc': 0.7391949632789836, 'minpse': 0.6666666666666666}
Reset trainable parameters of layer = Conv2d(1, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Linear(in_features=512, out_features=1000, bias=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Conv2d(64, 384, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=7200, bias=True)
Reset trainable parameters of layer = Linear(in_features=1000, out_features=6272, bias=True)
Reset trainable parameters of layer = Linear(in_features=300, out_features=600, bias=True)
Reset trainable parameters of layer = Linear(in_features=600, out_features=300, bias=True)
Reset trainable parameters of layer = Conv1d(300, 300, kernel_size=(24,), stride=(1,))
Reset trainable parameters of layer = Linear(in_features=300, out_features=1, bias=True)
Reset trainable parameters of layer = Linear(in_features=24, out_features=1, bias=True)
Removing classifier.fc.weight, number of classes has changed.
Removing classifier.fc.bias, number of classes has changed.
for distribution val
type 0= 52 type 1= 13
for distribution test
type 0= 54 type 1= 18
epoch 0
36.15707874298096
validation set
{'acc': 0.61538464, 'prec0': 0.8648649, 'prec1': 0.2857143, 'rec0': 0.61538464, 'rec1': 0.61538464, 'auroc': 0.6109467455621301, 'auprc': 0.29237155974709456, 'minpse': 0.3125}
Mortality Prediction on the test set
{'acc': 0.5277778, 'prec0': 0.8125, 'prec1': 0.3, 'rec0': 0.4814815, 'rec1': 0.6666667, 'auroc': 0.5462962962962963, 'auprc': 0.2616474292205359, 'minpse': 0.3157894736842105}
epoch 1
35.26082515716553
validation set
{'acc': 0.5846154, 'prec0': 0.85714287, 'prec1': 0.26666668, 'rec0': 0.5769231, 'rec1': 0.61538464, 'auroc': 0.5784023668639053, 'auprc': 0.24788134547638158, 'minpse': 0.3125}
Mortality Prediction on the test set
{'acc': 0.5694444, 'prec0': 0.7948718, 'prec1': 0.3030303, 'rec0': 0.5740741, 'rec1': 0.5555556, 'auroc': 0.6450617283950617, 'auprc': 0.4696023567541642, 'minpse': 0.4444444444444444}
epoch 2
34.39484226703644
validation set
{'acc': 0.8153846, 'prec0': 0.9, 'prec1': 0.53333336, 'rec0': 0.86538464, 'rec1': 0.61538464, 'auroc': 0.7766272189349113, 'auprc': 0.47078403184131246, 'minpse': 0.5333333333333333}
Mortality Prediction on the test set
{'acc': 0.6388889, 'prec0': 0.75, 'prec1': 0.25, 'rec0': 0.7777778, 'rec1': 0.22222222, 'auroc': 0.5555555555555556, 'auprc': 0.32491474185051034, 'minpse': 0.3333333333333333}
epoch 3
34.39303803443909
validation set
{'acc': 0.6615385, 'prec0': 0.84090906, 'prec1': 0.2857143, 'rec0': 0.71153843, 'rec1': 0.46153846, 'auroc': 0.5621301775147929, 'auprc': 0.2951424365358192, 'minpse': 0.2857142857142857}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.78333336, 'prec1': 0.41666666, 'rec0': 0.8703704, 'rec1': 0.2777778, 'auroc': 0.5113168724279835, 'auprc': 0.3773716154358513, 'minpse': 0.2857142857142857}
epoch 4
33.8574937582016
validation set
{'acc': 0.5538462, 'prec0': 0.8965517, 'prec1': 0.2777778, 'rec0': 0.5, 'rec1': 0.7692308, 'auroc': 0.6242603550295858, 'auprc': 0.374585142730384, 'minpse': 0.38461538461538464}
Mortality Prediction on the test set
{'acc': 0.45833334, 'prec0': 0.7586207, 'prec1': 0.25581396, 'rec0': 0.4074074, 'rec1': 0.6111111, 'auroc': 0.5771604938271605, 'auprc': 0.3864116860405583, 'minpse': 0.3333333333333333}
epoch 5
31.885960578918457
validation set
{'acc': 0.52307695, 'prec0': 0.95652175, 'prec1': 0.2857143, 'rec0': 0.42307693, 'rec1': 0.9230769, 'auroc': 0.668639053254438, 'auprc': 0.3895147152287294, 'minpse': 0.35714285714285715}
Mortality Prediction on the test set
{'acc': 0.43055555, 'prec0': 0.84210527, 'prec1': 0.28301886, 'rec0': 0.2962963, 'rec1': 0.8333333, 'auroc': 0.5987654320987654, 'auprc': 0.45725099067605135, 'minpse': 0.35}
epoch 6
32.41336739063263
validation set
{'acc': 0.46153846, 'prec0': 1.0, 'prec1': 0.27083334, 'rec0': 0.32692307, 'rec1': 1.0, 'auroc': 0.6479289940828402, 'auprc': 0.3160579866137808, 'minpse': 0.29411764705882354}
Mortality Prediction on the test set
{'acc': 0.29166666, 'prec0': 0.6666667, 'prec1': 0.23809524, 'rec0': 0.11111111, 'rec1': 0.8333333, 'auroc': 0.5041152263374485, 'auprc': 0.37932399032298225, 'minpse': 0.3333333333333333}
epoch 7
30.61043417453766
validation set
{'acc': 0.47692308, 'prec0': 1.0, 'prec1': 0.27659574, 'rec0': 0.34615386, 'rec1': 1.0, 'auroc': 0.6760355029585798, 'auprc': 0.28838826917208016, 'minpse': 0.38461538461538464}
Mortality Prediction on the test set
{'acc': 0.45833334, 'prec0': 0.85714287, 'prec1': 0.29411766, 'rec0': 0.33333334, 'rec1': 0.8333333, 'auroc': 0.697530864197531, 'auprc': 0.5832723540699069, 'minpse': 0.5555555555555556}
epoch 8
30.762202620506287
validation set
{'acc': 0.6923077, 'prec0': 0.9705882, 'prec1': 0.38709676, 'rec0': 0.63461536, 'rec1': 0.9230769, 'auroc': 0.7810650887573964, 'auprc': 0.4765975143360195, 'minpse': 0.39285714285714285}
Mortality Prediction on the test set
{'acc': 0.6111111, 'prec0': 0.84210527, 'prec1': 0.3529412, 'rec0': 0.5925926, 'rec1': 0.6666667, 'auroc': 0.7253086419753086, 'auprc': 0.5639779445136045, 'minpse': 0.45}
epoch 9
27.729762196540833
validation set
{'acc': 0.8153846, 'prec0': 0.8448276, 'prec1': 0.5714286, 'rec0': 0.9423077, 'rec1': 0.30769232, 'auroc': 0.5976331360946746, 'auprc': 0.3619813335111641, 'minpse': 0.38461538461538464}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.7878788, 'prec1': 0.6666667, 'rec0': 0.962963, 'rec1': 0.22222222, 'auroc': 0.6275720164609053, 'auprc': 0.4839588293984424, 'minpse': 0.4444444444444444}
epoch 10
26.382327556610107
validation set
{'acc': 0.8153846, 'prec0': 0.97619045, 'prec1': 0.5217391, 'rec0': 0.78846157, 'rec1': 0.9230769, 'auroc': 0.9245562130177515, 'auprc': 0.756423268296178, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.87234044, 'prec1': 0.48, 'rec0': 0.7592593, 'rec1': 0.6666667, 'auroc': 0.8076131687242798, 'auprc': 0.7416193858736455, 'minpse': 0.6111111111111112}
epoch 11
26.63941478729248
validation set
{'acc': 0.75384617, 'prec0': 0.95, 'prec1': 0.44, 'rec0': 0.7307692, 'rec1': 0.84615386, 'auroc': 0.8357988165680473, 'auprc': 0.5939838645189814, 'minpse': 0.5333333333333333}
Mortality Prediction on the test set
{'acc': 0.6666667, 'prec0': 0.85714287, 'prec1': 0.4, 'rec0': 0.6666667, 'rec1': 0.6666667, 'auroc': 0.7592592592592592, 'auprc': 0.6316772472220736, 'minpse': 0.5263157894736842}
epoch 12
25.45249378681183
validation set
{'acc': 0.63076925, 'prec0': 1.0, 'prec1': 0.35135135, 'rec0': 0.53846157, 'rec1': 1.0, 'auroc': 0.8298816568047337, 'auprc': 0.6194056296398245, 'minpse': 0.47368421052631576}
Mortality Prediction on the test set
{'acc': 0.5416667, 'prec0': 0.8181818, 'prec1': 0.30769232, 'rec0': 0.5, 'rec1': 0.6666667, 'auroc': 0.7181069958847737, 'auprc': 0.6038193316487566, 'minpse': 0.6111111111111112}
epoch 13
23.918133199214935
validation set
{'acc': 0.86153847, 'prec0': 0.92156863, 'prec1': 0.64285713, 'rec0': 0.90384614, 'rec1': 0.6923077, 'auroc': 0.8698224852071006, 'auprc': 0.692281027167905, 'minpse': 0.6428571428571429}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.8135593, 'prec1': 0.53846157, 'rec0': 0.8888889, 'rec1': 0.3888889, 'auroc': 0.7304526748971193, 'auprc': 0.6256952337965146, 'minpse': 0.5263157894736842}
epoch 14
23.768430411815643
validation set
{'acc': 0.7076923, 'prec0': 0.9459459, 'prec1': 0.39285713, 'rec0': 0.6730769, 'rec1': 0.84615386, 'auroc': 0.841715976331361, 'auprc': 0.687696152670237, 'minpse': 0.5714285714285714}
Mortality Prediction on the test set
{'acc': 0.6944444, 'prec0': 0.84782606, 'prec1': 0.42307693, 'rec0': 0.7222222, 'rec1': 0.6111111, 'auroc': 0.75, 'auprc': 0.6309869541698625, 'minpse': 0.5555555555555556}
epoch 15
22.803263664245605
validation set
{'acc': 0.6923077, 'prec0': 1.0, 'prec1': 0.3939394, 'rec0': 0.61538464, 'rec1': 1.0, 'auroc': 0.8668639053254439, 'auprc': 0.6416233912168636, 'minpse': 0.5714285714285714}
Mortality Prediction on the test set
{'acc': 0.6527778, 'prec0': 0.85365856, 'prec1': 0.38709676, 'rec0': 0.6481481, 'rec1': 0.6666667, 'auroc': 0.7932098765432098, 'auprc': 0.7296213516015604, 'minpse': 0.6111111111111112}
epoch 16
21.436802685260773
validation set
{'acc': 0.6769231, 'prec0': 1.0, 'prec1': 0.38235295, 'rec0': 0.59615386, 'rec1': 1.0, 'auroc': 0.863905325443787, 'auprc': 0.5295908319440195, 'minpse': 0.6153846153846154}
Mortality Prediction on the test set
{'acc': 0.6388889, 'prec0': 0.8888889, 'prec1': 0.3888889, 'rec0': 0.5925926, 'rec1': 0.7777778, 'auroc': 0.772633744855967, 'auprc': 0.6705839170624953, 'minpse': 0.6111111111111112}
epoch 17
20.303630828857422
validation set
{'acc': 0.7846154, 'prec0': 0.95238096, 'prec1': 0.47826087, 'rec0': 0.7692308, 'rec1': 0.84615386, 'auroc': 0.8609467455621301, 'auprc': 0.6950591576690661, 'minpse': 0.6153846153846154}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.8863636, 'prec1': 0.4642857, 'rec0': 0.7222222, 'rec1': 0.7222222, 'auroc': 0.8189300411522634, 'auprc': 0.6558868230324719, 'minpse': 0.5789473684210527}
epoch 18
21.43405854701996
validation set
{'acc': 0.6923077, 'prec0': 0.9705882, 'prec1': 0.38709676, 'rec0': 0.63461536, 'rec1': 0.9230769, 'auroc': 0.8106508875739645, 'auprc': 0.6342595297985754, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.7083333, 'prec0': 0.9230769, 'prec1': 0.45454547, 'rec0': 0.6666667, 'rec1': 0.8333333, 'auroc': 0.7860082304526749, 'auprc': 0.6627084772099325, 'minpse': 0.5789473684210527}
epoch 19
22.018743574619293
validation set
{'acc': 0.7076923, 'prec0': 1.0, 'prec1': 0.40625, 'rec0': 0.63461536, 'rec1': 1.0, 'auroc': 0.8653846153846154, 'auprc': 0.6042462158506909, 'minpse': 0.5384615384615384}
Mortality Prediction on the test set
{'acc': 0.6944444, 'prec0': 0.8636364, 'prec1': 0.42857143, 'rec0': 0.7037037, 'rec1': 0.6666667, 'auroc': 0.7489711934156378, 'auprc': 0.6273094063410597, 'minpse': 0.5}
epoch 20
20.827832639217377
validation set
{'acc': 0.8923077, 'prec0': 0.9411765, 'prec1': 0.71428573, 'rec0': 0.9230769, 'rec1': 0.7692308, 'auroc': 0.9068047337278107, 'auprc': 0.7046043264893269, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.84745765, 'prec1': 0.6923077, 'rec0': 0.9259259, 'rec1': 0.5, 'auroc': 0.7932098765432098, 'auprc': 0.6812747498128208, 'minpse': 0.5789473684210527}
epoch 21
18.754005312919617
validation set
{'acc': 0.75384617, 'prec0': 0.9736842, 'prec1': 0.44444445, 'rec0': 0.71153843, 'rec1': 0.9230769, 'auroc': 0.8683431952662722, 'auprc': 0.5989838505415674, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.87234044, 'prec1': 0.48, 'rec0': 0.7592593, 'rec1': 0.6666667, 'auroc': 0.7901234567901234, 'auprc': 0.6819150761289572, 'minpse': 0.5789473684210527}
epoch 22
22.498847007751465
validation set
{'acc': 0.86153847, 'prec0': 0.9574468, 'prec1': 0.6111111, 'rec0': 0.86538464, 'rec1': 0.84615386, 'auroc': 0.8816568047337279, 'auprc': 0.5796652323292595, 'minpse': 0.6153846153846154}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.8958333, 'prec1': 0.5416667, 'rec0': 0.7962963, 'rec1': 0.7222222, 'auroc': 0.8425925925925926, 'auprc': 0.7711371392614457, 'minpse': 0.7222222222222222}
epoch 23
21.527007579803467
validation set
{'acc': 0.84615386, 'prec0': 0.9375, 'prec1': 0.5882353, 'rec0': 0.86538464, 'rec1': 0.7692308, 'auroc': 0.8742603550295858, 'auprc': 0.669196922822834, 'minpse': 0.6153846153846154}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.83928573, 'prec1': 0.5625, 'rec0': 0.8703704, 'rec1': 0.5, 'auroc': 0.7098765432098765, 'auprc': 0.6251165073046123, 'minpse': 0.5789473684210527}
epoch 24
22.97484463453293
validation set
{'acc': 0.7846154, 'prec0': 0.95238096, 'prec1': 0.47826087, 'rec0': 0.7692308, 'rec1': 0.84615386, 'auroc': 0.8846153846153847, 'auprc': 0.7288935722936154, 'minpse': 0.6428571428571429}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.85714287, 'prec1': 0.47826087, 'rec0': 0.7777778, 'rec1': 0.6111111, 'auroc': 0.7397119341563786, 'auprc': 0.6179635618615895, 'minpse': 0.6111111111111112}
epoch 25
19.329849183559418
validation set
{'acc': 0.83076924, 'prec0': 1.0, 'prec1': 0.5416667, 'rec0': 0.78846157, 'rec1': 1.0, 'auroc': 0.9215976331360947, 'auprc': 0.7915150368954718, 'minpse': 0.6153846153846154}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.87234044, 'prec1': 0.48, 'rec0': 0.7592593, 'rec1': 0.6666667, 'auroc': 0.779835390946502, 'auprc': 0.6757062991417009, 'minpse': 0.5789473684210527}
epoch 26
17.663368612527847
validation set
{'acc': 0.8923077, 'prec0': 0.9411765, 'prec1': 0.71428573, 'rec0': 0.9230769, 'rec1': 0.7692308, 'auroc': 0.9023668639053255, 'auprc': 0.7811490381119028, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.8448276, 'prec1': 0.64285713, 'rec0': 0.9074074, 'rec1': 0.5, 'auroc': 0.7623456790123457, 'auprc': 0.6237470047196023, 'minpse': 0.5789473684210527}
epoch 27
18.6563817858696
validation set
{'acc': 0.8, 'prec0': 0.9756098, 'prec1': 0.5, 'rec0': 0.7692308, 'rec1': 0.9230769, 'auroc': 0.878698224852071, 'auprc': 0.6694595990538605, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.6666667, 'prec0': 0.8125, 'prec1': 0.375, 'rec0': 0.7222222, 'rec1': 0.5, 'auroc': 0.7386831275720165, 'auprc': 0.5910019836807945, 'minpse': 0.5}
epoch 28
20.18987101316452
validation set
{'acc': 0.8923077, 'prec0': 0.9411765, 'prec1': 0.71428573, 'rec0': 0.9230769, 'rec1': 0.7692308, 'auroc': 0.9053254437869822, 'auprc': 0.5955050387278504, 'minpse': 0.7142857142857143}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.8363636, 'prec1': 0.5294118, 'rec0': 0.8518519, 'rec1': 0.5, 'auroc': 0.7119341563786008, 'auprc': 0.38874514916901926, 'minpse': 0.5263157894736842}
epoch 29
19.324243903160095
validation set
{'acc': 0.8, 'prec0': 0.93333334, 'prec1': 0.5, 'rec0': 0.8076923, 'rec1': 0.7692308, 'auroc': 0.856508875739645, 'auprc': 0.6581908912096777, 'minpse': 0.6153846153846154}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.86538464, 'prec1': 0.55, 'rec0': 0.8333333, 'rec1': 0.6111111, 'auroc': 0.7170781893004116, 'auprc': 0.6409342265228452, 'minpse': 0.6111111111111112}
epoch 30
16.903408467769623
validation set
{'acc': 0.73846155, 'prec0': 0.94871795, 'prec1': 0.42307693, 'rec0': 0.71153843, 'rec1': 0.84615386, 'auroc': 0.8461538461538461, 'auprc': 0.6688694504605226, 'minpse': 0.5384615384615384}
Mortality Prediction on the test set
{'acc': 0.6944444, 'prec0': 0.8333333, 'prec1': 0.41666666, 'rec0': 0.7407407, 'rec1': 0.5555556, 'auroc': 0.6430041152263374, 'auprc': 0.5507386111374231, 'minpse': 0.5}
epoch 31
16.379263818264008
validation set
{'acc': 0.83076924, 'prec0': 0.9183673, 'prec1': 0.5625, 'rec0': 0.86538464, 'rec1': 0.6923077, 'auroc': 0.8239644970414202, 'auprc': 0.48657947047356015, 'minpse': 0.6153846153846154}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.8448276, 'prec1': 0.64285713, 'rec0': 0.9074074, 'rec1': 0.5, 'auroc': 0.712962962962963, 'auprc': 0.46217958498502165, 'minpse': 0.6111111111111112}
epoch 32
16.130551040172577
validation set
{'acc': 0.8, 'prec0': 0.9148936, 'prec1': 0.5, 'rec0': 0.8269231, 'rec1': 0.6923077, 'auroc': 0.8269230769230769, 'auprc': 0.6104357101336029, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.8333333, 'prec1': 0.5, 'rec0': 0.8333333, 'rec1': 0.5, 'auroc': 0.6625514403292181, 'auprc': 0.5585570679776216, 'minpse': 0.5}
epoch 33
16.818174302577972
validation set
{'acc': 0.73846155, 'prec0': 0.972973, 'prec1': 0.42857143, 'rec0': 0.6923077, 'rec1': 0.9230769, 'auroc': 0.8446745562130178, 'auprc': 0.5421008019892811, 'minpse': 0.5384615384615384}
Mortality Prediction on the test set
{'acc': 0.6111111, 'prec0': 0.8095238, 'prec1': 0.33333334, 'rec0': 0.6296296, 'rec1': 0.5555556, 'auroc': 0.6656378600823045, 'auprc': 0.5364955052976583, 'minpse': 0.4444444444444444}
epoch 34
16.098089426755905
validation set
{'acc': 0.8153846, 'prec0': 0.9347826, 'prec1': 0.5263158, 'rec0': 0.8269231, 'rec1': 0.7692308, 'auroc': 0.8032544378698224, 'auprc': 0.38897905252245574, 'minpse': 0.5263157894736842}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.8333333, 'prec1': 0.5, 'rec0': 0.8333333, 'rec1': 0.5, 'auroc': 0.6224279835390947, 'auprc': 0.399875667406228, 'minpse': 0.5}
epoch 35
17.560060799121857
validation set
{'acc': 0.7846154, 'prec0': 0.95238096, 'prec1': 0.47826087, 'rec0': 0.7692308, 'rec1': 0.84615386, 'auroc': 0.8520710059171598, 'auprc': 0.5434529602775504, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.7083333, 'prec0': 0.8113208, 'prec1': 0.42105263, 'rec0': 0.7962963, 'rec1': 0.44444445, 'auroc': 0.6049382716049383, 'auprc': 0.5269741909163073, 'minpse': 0.4444444444444444}
epoch 36
15.733858942985535
validation set
{'acc': 0.7846154, 'prec0': 0.9318182, 'prec1': 0.47619048, 'rec0': 0.78846157, 'rec1': 0.7692308, 'auroc': 0.7943786982248521, 'auprc': 0.5380584739896481, 'minpse': 0.6153846153846154}
Mortality Prediction on the test set
{'acc': 0.6666667, 'prec0': 0.8, 'prec1': 0.36363637, 'rec0': 0.7407407, 'rec1': 0.44444445, 'auroc': 0.7098765432098766, 'auprc': 0.5353998172741787, 'minpse': 0.40625}
epoch 37
17.923470363020897
validation set
{'acc': 0.83076924, 'prec0': 0.8867925, 'prec1': 0.5833333, 'rec0': 0.90384614, 'rec1': 0.53846157, 'auroc': 0.6834319526627219, 'auprc': 0.4893882048787574, 'minpse': 0.5384615384615384}
Mortality Prediction on the test set
{'acc': 0.6805556, 'prec0': 0.7924528, 'prec1': 0.36842105, 'rec0': 0.7777778, 'rec1': 0.3888889, 'auroc': 0.6604938271604938, 'auprc': 0.5143150943912549, 'minpse': 0.391304347826087}
epoch 38
20.074904799461365
validation set
{'acc': 0.73846155, 'prec0': 1.0, 'prec1': 0.43333334, 'rec0': 0.6730769, 'rec1': 1.0, 'auroc': 0.8624260355029587, 'auprc': 0.5327480155465677, 'minpse': 0.5384615384615384}
Mortality Prediction on the test set
{'acc': 0.6805556, 'prec0': 0.84444445, 'prec1': 0.4074074, 'rec0': 0.7037037, 'rec1': 0.6111111, 'auroc': 0.6707818930041152, 'auprc': 0.5044299875637175, 'minpse': 0.47368421052631576}
epoch 39
19.8850080370903
validation set
{'acc': 0.9076923, 'prec0': 0.9259259, 'prec1': 0.8181818, 'rec0': 0.96153843, 'rec1': 0.6923077, 'auroc': 0.8875739644970414, 'auprc': 0.7534598779433346, 'minpse': 0.6923076923076923}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.81666666, 'prec1': 0.5833333, 'rec0': 0.9074074, 'rec1': 0.3888889, 'auroc': 0.6995884773662552, 'auprc': 0.6013331953902017, 'minpse': 0.5263157894736842}
epoch 40
16.34142816066742
validation set
{'acc': 0.7076923, 'prec0': 1.0, 'prec1': 0.40625, 'rec0': 0.63461536, 'rec1': 1.0, 'auroc': 0.8786982248520709, 'auprc': 0.589459141341979, 'minpse': 0.6153846153846154}
Mortality Prediction on the test set
{'acc': 0.5694444, 'prec0': 0.8108108, 'prec1': 0.31428573, 'rec0': 0.5555556, 'rec1': 0.6111111, 'auroc': 0.668724279835391, 'auprc': 0.5454067602453263, 'minpse': 0.5}
epoch 41
16.93990993499756
validation set
{'acc': 0.84615386, 'prec0': 0.97727275, 'prec1': 0.5714286, 'rec0': 0.8269231, 'rec1': 0.9230769, 'auroc': 0.8846153846153847, 'auprc': 0.668474597728091, 'minpse': 0.625}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.8148148, 'prec1': 0.44444445, 'rec0': 0.8148148, 'rec1': 0.44444445, 'auroc': 0.647119341563786, 'auprc': 0.440507096537079, 'minpse': 0.45}
epoch 42
20.933990240097046
validation set
{'acc': 0.84615386, 'prec0': 1.0, 'prec1': 0.5652174, 'rec0': 0.8076923, 'rec1': 1.0, 'auroc': 0.9423076923076923, 'auprc': 0.7878173869735654, 'minpse': 0.6923076923076923}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.8363636, 'prec1': 0.5294118, 'rec0': 0.8518519, 'rec1': 0.5, 'auroc': 0.6841563786008231, 'auprc': 0.4609548397488495, 'minpse': 0.5}
epoch 43
19.42376446723938
validation set
{'acc': 0.75384617, 'prec0': 1.0, 'prec1': 0.44827586, 'rec0': 0.6923077, 'rec1': 1.0, 'auroc': 0.8520710059171598, 'auprc': 0.4266218209163163, 'minpse': 0.5263157894736842}
Mortality Prediction on the test set
{'acc': 0.6527778, 'prec0': 0.85365856, 'prec1': 0.38709676, 'rec0': 0.6481481, 'rec1': 0.6666667, 'auroc': 0.6460905349794239, 'auprc': 0.33254586569781314, 'minpse': 0.4444444444444444}
epoch 44
17.16326653957367
validation set
{'acc': 0.7846154, 'prec0': 1.0, 'prec1': 0.4814815, 'rec0': 0.7307692, 'rec1': 1.0, 'auroc': 0.8905325443786983, 'auprc': 0.5148836277682431, 'minpse': 0.6923076923076923}
Mortality Prediction on the test set
{'acc': 0.625, 'prec0': 0.8292683, 'prec1': 0.3548387, 'rec0': 0.6296296, 'rec1': 0.6111111, 'auroc': 0.6450617283950617, 'auprc': 0.3394522588287961, 'minpse': 0.5}
epoch 45
16.710328817367554
validation set
{'acc': 0.7692308, 'prec0': 0.974359, 'prec1': 0.46153846, 'rec0': 0.7307692, 'rec1': 0.9230769, 'auroc': 0.8979289940828402, 'auprc': 0.7319582240283597, 'minpse': 0.6428571428571429}
Mortality Prediction on the test set
{'acc': 0.6805556, 'prec0': 0.84444445, 'prec1': 0.4074074, 'rec0': 0.7037037, 'rec1': 0.6111111, 'auroc': 0.6460905349794239, 'auprc': 0.45247583388162693, 'minpse': 0.5}
epoch 46
15.840798139572144
validation set
{'acc': 0.7846154, 'prec0': 0.975, 'prec1': 0.48, 'rec0': 0.75, 'rec1': 0.9230769, 'auroc': 0.9023668639053255, 'auprc': 0.753141347580655, 'minpse': 0.6428571428571429}
Mortality Prediction on the test set
{'acc': 0.6944444, 'prec0': 0.84782606, 'prec1': 0.42307693, 'rec0': 0.7222222, 'rec1': 0.6111111, 'auroc': 0.6718106995884774, 'auprc': 0.5552699636908063, 'minpse': 0.5}
epoch 47
16.25103050470352
validation set
{'acc': 0.8923077, 'prec0': 0.9787234, 'prec1': 0.6666667, 'rec0': 0.88461536, 'rec1': 0.9230769, 'auroc': 0.9097633136094674, 'auprc': 0.5904533500687347, 'minpse': 0.7333333333333333}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.8181818, 'prec1': 0.47058824, 'rec0': 0.8333333, 'rec1': 0.44444445, 'auroc': 0.7181069958847738, 'auprc': 0.4968924537869097, 'minpse': 0.45454545454545453}
epoch 48
16.911742627620697
validation set
{'acc': 0.86153847, 'prec0': 0.9777778, 'prec1': 0.6, 'rec0': 0.84615386, 'rec1': 0.9230769, 'auroc': 0.9378698224852071, 'auprc': 0.8356634452135301, 'minpse': 0.6923076923076923}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.8214286, 'prec1': 0.5, 'rec0': 0.8518519, 'rec1': 0.44444445, 'auroc': 0.7006172839506173, 'auprc': 0.5689115897341059, 'minpse': 0.4782608695652174}
epoch 49
16.10515922307968
validation set
{'acc': 0.7692308, 'prec0': 1.0, 'prec1': 0.4642857, 'rec0': 0.71153843, 'rec1': 1.0, 'auroc': 0.8786982248520709, 'auprc': 0.515857717162065, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.6388889, 'prec0': 0.8333333, 'prec1': 0.36666667, 'rec0': 0.6481481, 'rec1': 0.6111111, 'auroc': 0.6574074074074073, 'auprc': 0.5192345121199562, 'minpse': 0.5}
Reset trainable parameters of layer = Conv2d(1, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Linear(in_features=512, out_features=1000, bias=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Conv2d(64, 384, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=7200, bias=True)
Reset trainable parameters of layer = Linear(in_features=1000, out_features=6272, bias=True)
Reset trainable parameters of layer = Linear(in_features=300, out_features=600, bias=True)
Reset trainable parameters of layer = Linear(in_features=600, out_features=300, bias=True)
Reset trainable parameters of layer = Conv1d(300, 300, kernel_size=(24,), stride=(1,))
Reset trainable parameters of layer = Linear(in_features=300, out_features=1, bias=True)
Reset trainable parameters of layer = Linear(in_features=24, out_features=1, bias=True)
Removing classifier.fc.weight, number of classes has changed.
Removing classifier.fc.bias, number of classes has changed.
for distribution val
type 0= 53 type 1= 12
for distribution test
type 0= 54 type 1= 18
epoch 0
35.750521659851074
validation set
{'acc': 0.53846157, 'prec0': 0.76744187, 'prec1': 0.09090909, 'rec0': 0.6226415, 'rec1': 0.16666667, 'auroc': 0.460691823899371, 'auprc': 0.15957106495167941, 'minpse': 0.21153846153846154}
Mortality Prediction on the test set
{'acc': 0.5694444, 'prec0': 0.7446808, 'prec1': 0.24, 'rec0': 0.6481481, 'rec1': 0.33333334, 'auroc': 0.5267489711934157, 'auprc': 0.32086377654106246, 'minpse': 0.2909090909090909}
epoch 1
35.60634088516235
validation set
{'acc': 0.3846154, 'prec0': 0.7407407, 'prec1': 0.13157895, 'rec0': 0.3773585, 'rec1': 0.41666666, 'auroc': 0.46226415094339623, 'auprc': 0.27132703419591087, 'minpse': 0.19607843137254902}
Mortality Prediction on the test set
{'acc': 0.6666667, 'prec0': 0.8125, 'prec1': 0.375, 'rec0': 0.7222222, 'rec1': 0.5, 'auroc': 0.6820987654320988, 'auprc': 0.44791244590772217, 'minpse': 0.42105263157894735}
epoch 2
34.50875759124756
validation set
{'acc': 0.32307693, 'prec0': 0.6956522, 'prec1': 0.11904762, 'rec0': 0.3018868, 'rec1': 0.41666666, 'auroc': 0.47798742138364775, 'auprc': 0.24662692797426494, 'minpse': 0.3333333333333333}
Mortality Prediction on the test set
{'acc': 0.5694444, 'prec0': 0.8484849, 'prec1': 0.33333334, 'rec0': 0.5185185, 'rec1': 0.7222222, 'auroc': 0.6903292181069959, 'auprc': 0.5822941505230481, 'minpse': 0.5}
epoch 3
34.14131999015808
validation set
{'acc': 0.7846154, 'prec0': 0.93333334, 'prec1': 0.45, 'rec0': 0.7924528, 'rec1': 0.75, 'auroc': 0.6981132075471699, 'auprc': 0.37414865744308834, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.8333333, 'prec1': 0.5, 'rec0': 0.8333333, 'rec1': 0.5, 'auroc': 0.6296296296296295, 'auprc': 0.5288048747537305, 'minpse': 0.5}
epoch 4
32.82767713069916
validation set
{'acc': 0.73846155, 'prec0': 0.8913044, 'prec1': 0.36842105, 'rec0': 0.7735849, 'rec1': 0.5833333, 'auroc': 0.6163522012578617, 'auprc': 0.36125667815455403, 'minpse': 0.375}
Mortality Prediction on the test set
{'acc': 0.6527778, 'prec0': 0.78431374, 'prec1': 0.33333334, 'rec0': 0.7407407, 'rec1': 0.3888889, 'auroc': 0.5648148148148149, 'auprc': 0.4820899291710792, 'minpse': 0.3888888888888889}
epoch 5
30.69826352596283
validation set
{'acc': 0.7692308, 'prec0': 0.95238096, 'prec1': 0.4347826, 'rec0': 0.754717, 'rec1': 0.8333333, 'auroc': 0.8286163522012578, 'auprc': 0.5523245118205385, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.90697676, 'prec1': 0.4827586, 'rec0': 0.7222222, 'rec1': 0.7777778, 'auroc': 0.8662551440329218, 'auprc': 0.7333361265579399, 'minpse': 0.6842105263157895}
epoch 6
26.591204553842545
validation set
{'acc': 0.8153846, 'prec0': 0.8727273, 'prec1': 0.5, 'rec0': 0.9056604, 'rec1': 0.41666666, 'auroc': 0.5738993710691824, 'auprc': 0.3521398634369484, 'minpse': 0.4166666666666667}
Mortality Prediction on the test set
{'acc': 0.6944444, 'prec0': 0.7758621, 'prec1': 0.35714287, 'rec0': 0.8333333, 'rec1': 0.2777778, 'auroc': 0.5041152263374485, 'auprc': 0.26982869493811223, 'minpse': 0.3888888888888889}
epoch 7
26.660241842269897
validation set
{'acc': 0.5538462, 'prec0': 1.0, 'prec1': 0.29268292, 'rec0': 0.4528302, 'rec1': 1.0, 'auroc': 0.7877358490566038, 'auprc': 0.44532412942599997, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.4722222, 'prec0': 0.8333333, 'prec1': 0.29166666, 'rec0': 0.37037036, 'rec1': 0.7777778, 'auroc': 0.6553497942386831, 'auprc': 0.4877764839272136, 'minpse': 0.4166666666666667}
epoch 8
24.632754266262054
validation set
{'acc': 0.7846154, 'prec0': 0.9148936, 'prec1': 0.44444445, 'rec0': 0.8113208, 'rec1': 0.6666667, 'auroc': 0.8081761006289307, 'auprc': 0.530980805499061, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8727273, 'prec1': 0.64705884, 'rec0': 0.8888889, 'rec1': 0.6111111, 'auroc': 0.815843621399177, 'auprc': 0.728082547932132, 'minpse': 0.6111111111111112}
epoch 9
24.199935257434845
validation set
{'acc': 0.8, 'prec0': 0.95454544, 'prec1': 0.47619048, 'rec0': 0.7924528, 'rec1': 0.8333333, 'auroc': 0.8364779874213837, 'auprc': 0.6724665169566486, 'minpse': 0.5833333333333334}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9, 'prec1': 0.59090906, 'rec0': 0.8333333, 'rec1': 0.7222222, 'auroc': 0.8179012345679012, 'auprc': 0.7427906223775803, 'minpse': 0.6666666666666666}
epoch 10
22.73833340406418
validation set
{'acc': 0.75384617, 'prec0': 0.9512195, 'prec1': 0.41666666, 'rec0': 0.7358491, 'rec1': 0.8333333, 'auroc': 0.7845911949685536, 'auprc': 0.6040356077769219, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.87234044, 'prec1': 0.48, 'rec0': 0.7592593, 'rec1': 0.6666667, 'auroc': 0.8209876543209877, 'auprc': 0.7575053753830514, 'minpse': 0.6666666666666666}
epoch 11
20.80331987142563
validation set
{'acc': 0.86153847, 'prec0': 0.9074074, 'prec1': 0.6363636, 'rec0': 0.9245283, 'rec1': 0.5833333, 'auroc': 0.7154088050314465, 'auprc': 0.5797734889805345, 'minpse': 0.5833333333333334}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.85714287, 'prec1': 0.625, 'rec0': 0.8888889, 'rec1': 0.5555556, 'auroc': 0.7849794238683127, 'auprc': 0.7034516895976672, 'minpse': 0.5789473684210527}
epoch 12
19.574579000473022
validation set
{'acc': 0.8923077, 'prec0': 0.9259259, 'prec1': 0.72727275, 'rec0': 0.9433962, 'rec1': 0.6666667, 'auroc': 0.8474842767295598, 'auprc': 0.6758783108415763, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8867925, 'prec1': 0.6315789, 'rec0': 0.8703704, 'rec1': 0.6666667, 'auroc': 0.8611111111111112, 'auprc': 0.7734933917788086, 'minpse': 0.6666666666666666}
epoch 13
21.07320648431778
validation set
{'acc': 0.86153847, 'prec0': 0.9230769, 'prec1': 0.61538464, 'rec0': 0.9056604, 'rec1': 0.6666667, 'auroc': 0.7924528301886792, 'auprc': 0.6112292229502995, 'minpse': 0.6153846153846154}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.8888889, 'prec1': 0.6666667, 'rec0': 0.8888889, 'rec1': 0.6666667, 'auroc': 0.8415637860082305, 'auprc': 0.7707477446882791, 'minpse': 0.6666666666666666}
epoch 14
19.24520307779312
validation set
{'acc': 0.8, 'prec0': 0.95454544, 'prec1': 0.47619048, 'rec0': 0.7924528, 'rec1': 0.8333333, 'auroc': 0.8254716981132075, 'auprc': 0.6252950525604449, 'minpse': 0.5714285714285714}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.90384614, 'prec1': 0.65, 'rec0': 0.8703704, 'rec1': 0.7222222, 'auroc': 0.860082304526749, 'auprc': 0.7505584383596349, 'minpse': 0.6842105263157895}
epoch 15
18.68031895160675
validation set
{'acc': 0.8923077, 'prec0': 0.8833333, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.41666666, 'auroc': 0.6902515723270439, 'auprc': 0.5754367834968346, 'minpse': 0.46153846153846156}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.80597013, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.2777778, 'auroc': 0.7376543209876544, 'auprc': 0.6469921319201404, 'minpse': 0.5555555555555556}
epoch 16
20.078613877296448
validation set
{'acc': 0.6923077, 'prec0': 0.9714286, 'prec1': 0.36666667, 'rec0': 0.6415094, 'rec1': 0.9166667, 'auroc': 0.8050314465408805, 'auprc': 0.5866638257268557, 'minpse': 0.5833333333333334}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.974359, 'prec1': 0.5151515, 'rec0': 0.7037037, 'rec1': 0.9444444, 'auroc': 0.9104938271604939, 'auprc': 0.8252210913092644, 'minpse': 0.6842105263157895}
epoch 17
16.753404676914215
validation set
{'acc': 0.7846154, 'prec0': 0.9148936, 'prec1': 0.44444445, 'rec0': 0.8113208, 'rec1': 0.6666667, 'auroc': 0.7783018867924528, 'auprc': 0.5529901157104323, 'minpse': 0.4444444444444444}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.8888889, 'prec1': 0.6666667, 'rec0': 0.8888889, 'rec1': 0.6666667, 'auroc': 0.8467078189300412, 'auprc': 0.7440882681973959, 'minpse': 0.6666666666666666}
epoch 18
18.701680302619934
validation set
{'acc': 0.8153846, 'prec0': 0.9019608, 'prec1': 0.5, 'rec0': 0.8679245, 'rec1': 0.5833333, 'auroc': 0.6572327044025158, 'auprc': 0.5013202524189401, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8545455, 'prec1': 0.5882353, 'rec0': 0.8703704, 'rec1': 0.5555556, 'auroc': 0.8045267489711934, 'auprc': 0.6925133568197792, 'minpse': 0.5555555555555556}
epoch 19
16.682118892669678
validation set
{'acc': 0.84615386, 'prec0': 0.8909091, 'prec1': 0.6, 'rec0': 0.9245283, 'rec1': 0.5, 'auroc': 0.6273584905660377, 'auprc': 0.4902561640236181, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8196721, 'prec1': 0.6363636, 'rec0': 0.9259259, 'rec1': 0.3888889, 'auroc': 0.6810699588477367, 'auprc': 0.609738271070229, 'minpse': 0.5}
epoch 20
18.447822988033295
validation set
{'acc': 0.84615386, 'prec0': 0.92156863, 'prec1': 0.5714286, 'rec0': 0.8867925, 'rec1': 0.6666667, 'auroc': 0.8144654088050315, 'auprc': 0.5906060473783598, 'minpse': 0.5833333333333334}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8596491, 'prec1': 0.6666667, 'rec0': 0.9074074, 'rec1': 0.5555556, 'auroc': 0.8302469135802469, 'auprc': 0.7082755806669323, 'minpse': 0.6}
epoch 21
19.183855175971985
validation set
{'acc': 0.5692308, 'prec0': 0.9310345, 'prec1': 0.2777778, 'rec0': 0.509434, 'rec1': 0.8333333, 'auroc': 0.7185534591194969, 'auprc': 0.3882767602675711, 'minpse': 0.4166666666666667}
Mortality Prediction on the test set
{'acc': 0.5277778, 'prec0': 0.88461536, 'prec1': 0.32608697, 'rec0': 0.42592594, 'rec1': 0.8333333, 'auroc': 0.7129629629629629, 'auprc': 0.6038623852154548, 'minpse': 0.5}
epoch 22
14.218081206083298
validation set
{'acc': 0.6923077, 'prec0': 0.9459459, 'prec1': 0.35714287, 'rec0': 0.6603774, 'rec1': 0.8333333, 'auroc': 0.7955974842767295, 'auprc': 0.6440763819285246, 'minpse': 0.5833333333333334}
Mortality Prediction on the test set
{'acc': 0.6944444, 'prec0': 0.92105263, 'prec1': 0.44117647, 'rec0': 0.6481481, 'rec1': 0.8333333, 'auroc': 0.7911522633744855, 'auprc': 0.696951982730184, 'minpse': 0.6111111111111112}
epoch 23
16.107498168945312
validation set
{'acc': 0.8, 'prec0': 0.9166667, 'prec1': 0.47058824, 'rec0': 0.8301887, 'rec1': 0.6666667, 'auroc': 0.6871069182389937, 'auprc': 0.5554162481589083, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.8301887, 'prec1': 0.47368422, 'rec0': 0.8148148, 'rec1': 0.5, 'auroc': 0.7839506172839504, 'auprc': 0.6968479150509033, 'minpse': 0.5454545454545454}
epoch 24
18.17924404144287
validation set
{'acc': 0.6923077, 'prec0': 0.9230769, 'prec1': 0.34615386, 'rec0': 0.6792453, 'rec1': 0.75, 'auroc': 0.6855345911949685, 'auprc': 0.3581856241185285, 'minpse': 0.4375}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.925, 'prec1': 0.46875, 'rec0': 0.6851852, 'rec1': 0.8333333, 'auroc': 0.8281893004115226, 'auprc': 0.7223084483957887, 'minpse': 0.6111111111111112}
epoch 25
19.218623995780945
validation set
{'acc': 0.84615386, 'prec0': 0.9056604, 'prec1': 0.5833333, 'rec0': 0.9056604, 'rec1': 0.5833333, 'auroc': 0.7358490566037736, 'auprc': 0.5805699441929025, 'minpse': 0.5833333333333334}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.84210527, 'prec1': 0.6, 'rec0': 0.8888889, 'rec1': 0.5, 'auroc': 0.6985596707818931, 'auprc': 0.6464323415843096, 'minpse': 0.5555555555555556}
epoch 26
19.24703687429428
validation set
{'acc': 0.86153847, 'prec0': 0.89285713, 'prec1': 0.6666667, 'rec0': 0.9433962, 'rec1': 0.5, 'auroc': 0.6132075471698114, 'auprc': 0.5364720618714425, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8360656, 'prec1': 0.72727275, 'rec0': 0.9444444, 'rec1': 0.44444445, 'auroc': 0.7664609053497943, 'auprc': 0.6576380319631565, 'minpse': 0.5416666666666666}
epoch 27
15.526354193687439
validation set
{'acc': 0.75384617, 'prec0': 0.89361703, 'prec1': 0.3888889, 'rec0': 0.7924528, 'rec1': 0.5833333, 'auroc': 0.6163522012578617, 'auprc': 0.33991243610590216, 'minpse': 0.4166666666666667}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.8888889, 'prec1': 0.4814815, 'rec0': 0.7407407, 'rec1': 0.7222222, 'auroc': 0.8271604938271605, 'auprc': 0.7349790546139834, 'minpse': 0.631578947368421}
epoch 28
16.69626273214817
validation set
{'acc': 0.75384617, 'prec0': 0.9302326, 'prec1': 0.4090909, 'rec0': 0.754717, 'rec1': 0.75, 'auroc': 0.7405660377358492, 'auprc': 0.5403507830811132, 'minpse': 0.4090909090909091}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.88, 'prec1': 0.54545456, 'rec0': 0.8148148, 'rec1': 0.6666667, 'auroc': 0.8477366255144032, 'auprc': 0.7484377950276855, 'minpse': 0.6111111111111112}
epoch 29
14.867444336414337
validation set
{'acc': 0.6769231, 'prec0': 0.9, 'prec1': 0.32, 'rec0': 0.6792453, 'rec1': 0.6666667, 'auroc': 0.64937106918239, 'auprc': 0.49147910444019044, 'minpse': 0.3333333333333333}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.86, 'prec1': 0.5, 'rec0': 0.7962963, 'rec1': 0.6111111, 'auroc': 0.7294238683127572, 'auprc': 0.6601495203193453, 'minpse': 0.5555555555555556}
epoch 30
14.03919205069542
validation set
{'acc': 0.8153846, 'prec0': 0.8867925, 'prec1': 0.5, 'rec0': 0.8867925, 'rec1': 0.5, 'auroc': 0.5880503144654088, 'auprc': 0.5061897910884332, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.8448276, 'prec1': 0.64285713, 'rec0': 0.9074074, 'rec1': 0.5, 'auroc': 0.7181069958847737, 'auprc': 0.6535018492355795, 'minpse': 0.5}
epoch 31
13.460927799344063
validation set
{'acc': 0.6923077, 'prec0': 0.9230769, 'prec1': 0.34615386, 'rec0': 0.6792453, 'rec1': 0.75, 'auroc': 0.7279874213836478, 'auprc': 0.5190847469545062, 'minpse': 0.34615384615384615}
Mortality Prediction on the test set
{'acc': 0.6666667, 'prec0': 0.85714287, 'prec1': 0.4, 'rec0': 0.6666667, 'rec1': 0.6666667, 'auroc': 0.7530864197530864, 'auprc': 0.6671407806109706, 'minpse': 0.5789473684210527}
epoch 32
14.03214967250824
validation set
{'acc': 0.84615386, 'prec0': 0.877193, 'prec1': 0.625, 'rec0': 0.9433962, 'rec1': 0.41666666, 'auroc': 0.5471698113207547, 'auprc': 0.4939921830442031, 'minpse': 0.4166666666666667}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.828125, 'prec1': 0.875, 'rec0': 0.9814815, 'rec1': 0.3888889, 'auroc': 0.6985596707818931, 'auprc': 0.6185102317106261, 'minpse': 0.5263157894736842}
epoch 33
13.917800962924957
validation set
{'acc': 0.6615385, 'prec0': 0.9189189, 'prec1': 0.32142857, 'rec0': 0.6415094, 'rec1': 0.75, 'auroc': 0.6981132075471699, 'auprc': 0.5241142479285075, 'minpse': 0.4166666666666667}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.87234044, 'prec1': 0.48, 'rec0': 0.7592593, 'rec1': 0.6666667, 'auroc': 0.7685185185185186, 'auprc': 0.6785076380740557, 'minpse': 0.6111111111111112}
epoch 34
12.466170310974121
validation set
{'acc': 0.72307694, 'prec0': 0.90697676, 'prec1': 0.36363637, 'rec0': 0.7358491, 'rec1': 0.6666667, 'auroc': 0.6823899371069182, 'auprc': 0.507675614057155, 'minpse': 0.36363636363636365}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.88235295, 'prec1': 0.5714286, 'rec0': 0.8333333, 'rec1': 0.6666667, 'auroc': 0.7757201646090535, 'auprc': 0.6804116743140673, 'minpse': 0.6}
epoch 35
14.084109961986542
validation set
{'acc': 0.83076924, 'prec0': 0.8888889, 'prec1': 0.54545456, 'rec0': 0.9056604, 'rec1': 0.5, 'auroc': 0.5833333333333333, 'auprc': 0.5120141171359814, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.82758623, 'prec1': 0.5714286, 'rec0': 0.8888889, 'rec1': 0.44444445, 'auroc': 0.801440329218107, 'auprc': 0.682670522490708, 'minpse': 0.6111111111111112}
epoch 36
12.36074286699295
validation set
{'acc': 0.73846155, 'prec0': 0.90909094, 'prec1': 0.3809524, 'rec0': 0.754717, 'rec1': 0.6666667, 'auroc': 0.7389937106918238, 'auprc': 0.5924681999838798, 'minpse': 0.46153846153846156}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.88, 'prec1': 0.54545456, 'rec0': 0.8148148, 'rec1': 0.6666667, 'auroc': 0.8065843621399177, 'auprc': 0.6848437662619539, 'minpse': 0.6111111111111112}
epoch 37
11.905627228319645
validation set
{'acc': 0.8153846, 'prec0': 0.8867925, 'prec1': 0.5, 'rec0': 0.8867925, 'rec1': 0.5, 'auroc': 0.6352201257861636, 'auprc': 0.523883833259058, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8727273, 'prec1': 0.64705884, 'rec0': 0.8888889, 'rec1': 0.6111111, 'auroc': 0.7921810699588477, 'auprc': 0.7113046847360904, 'minpse': 0.6190476190476191}
epoch 38
12.315206676721573
validation set
{'acc': 0.8769231, 'prec0': 0.86885244, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.33333334, 'auroc': 0.6525157232704403, 'auprc': 0.49738698644454277, 'minpse': 0.3333333333333333}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.7714286, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.11111111, 'auroc': 0.7983539094650205, 'auprc': 0.7247869632989987, 'minpse': 0.6111111111111112}
epoch 39
11.955293238162994
validation set
{'acc': 0.8, 'prec0': 0.88461536, 'prec1': 0.46153846, 'rec0': 0.8679245, 'rec1': 0.5, 'auroc': 0.7044025157232704, 'auprc': 0.5354407860433411, 'minpse': 0.46153846153846156}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.86206895, 'prec1': 0.71428573, 'rec0': 0.9259259, 'rec1': 0.5555556, 'auroc': 0.8024691358024691, 'auprc': 0.7263747266400937, 'minpse': 0.6111111111111112}
epoch 40
13.500274062156677
validation set
{'acc': 0.64615387, 'prec0': 0.9166667, 'prec1': 0.31034482, 'rec0': 0.6226415, 'rec1': 0.75, 'auroc': 0.6650943396226414, 'auprc': 0.5192904827720821, 'minpse': 0.42857142857142855}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.8863636, 'prec1': 0.4642857, 'rec0': 0.7222222, 'rec1': 0.7222222, 'auroc': 0.7716049382716049, 'auprc': 0.6856787482052713, 'minpse': 0.6111111111111112}
epoch 41
12.302585124969482
validation set
{'acc': 0.8153846, 'prec0': 0.8867925, 'prec1': 0.5, 'rec0': 0.8867925, 'rec1': 0.5, 'auroc': 0.5566037735849056, 'auprc': 0.5000852923626022, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.82758623, 'prec1': 0.5714286, 'rec0': 0.8888889, 'rec1': 0.44444445, 'auroc': 0.7078189300411523, 'auprc': 0.6079022863106915, 'minpse': 0.47368421052631576}
epoch 42
13.35697853565216
validation set
{'acc': 0.8, 'prec0': 0.9, 'prec1': 0.46666667, 'rec0': 0.8490566, 'rec1': 0.5833333, 'auroc': 0.6776729559748428, 'auprc': 0.5625729491852114, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.8888889, 'prec1': 0.6666667, 'rec0': 0.8888889, 'rec1': 0.6666667, 'auroc': 0.8446502057613168, 'auprc': 0.7248691814420467, 'minpse': 0.6666666666666666}
epoch 43
12.083520501852036
validation set
{'acc': 0.8769231, 'prec0': 0.88135594, 'prec1': 0.8333333, 'rec0': 0.9811321, 'rec1': 0.41666666, 'auroc': 0.6084905660377358, 'auprc': 0.5341403419638322, 'minpse': 0.4166666666666667}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.83076924, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.3888889, 'auroc': 0.7479423868312757, 'auprc': 0.6481706105072693, 'minpse': 0.5238095238095238}
epoch 44
12.875780522823334
validation set
{'acc': 0.8153846, 'prec0': 0.9019608, 'prec1': 0.5, 'rec0': 0.8679245, 'rec1': 0.5833333, 'auroc': 0.6823899371069182, 'auprc': 0.49862778764487703, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.8703704, 'prec1': 0.6111111, 'rec0': 0.8703704, 'rec1': 0.6111111, 'auroc': 0.8508230452674896, 'auprc': 0.7660997525919715, 'minpse': 0.631578947368421}
epoch 45
12.566790848970413
validation set
{'acc': 0.83076924, 'prec0': 0.8888889, 'prec1': 0.54545456, 'rec0': 0.9056604, 'rec1': 0.5, 'auroc': 0.6226415094339621, 'auprc': 0.4343709170608034, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.84210527, 'prec1': 0.6, 'rec0': 0.8888889, 'rec1': 0.5, 'auroc': 0.8055555555555556, 'auprc': 0.7045910991289042, 'minpse': 0.6111111111111112}
epoch 46
13.84354954957962
validation set
{'acc': 0.7692308, 'prec0': 0.8958333, 'prec1': 0.4117647, 'rec0': 0.8113208, 'rec1': 0.5833333, 'auroc': 0.6257861635220127, 'auprc': 0.4900491759837354, 'minpse': 0.4166666666666667}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.86206895, 'prec1': 0.71428573, 'rec0': 0.9259259, 'rec1': 0.5555556, 'auroc': 0.8004115226337449, 'auprc': 0.6152544851218718, 'minpse': 0.5714285714285714}
epoch 47
12.01484626531601
validation set
{'acc': 0.83076924, 'prec0': 0.8888889, 'prec1': 0.54545456, 'rec0': 0.9056604, 'rec1': 0.5, 'auroc': 0.5801886792452831, 'auprc': 0.5147710109001402, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.8448276, 'prec1': 0.64285713, 'rec0': 0.9074074, 'rec1': 0.5, 'auroc': 0.7849794238683127, 'auprc': 0.6764233622136057, 'minpse': 0.6666666666666666}
epoch 48
12.642518728971481
validation set
{'acc': 0.8153846, 'prec0': 0.8867925, 'prec1': 0.5, 'rec0': 0.8867925, 'rec1': 0.5, 'auroc': 0.5864779874213837, 'auprc': 0.5011272337361232, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.8333333, 'prec1': 0.6666667, 'rec0': 0.9259259, 'rec1': 0.44444445, 'auroc': 0.7139917695473251, 'auprc': 0.6266039488736943, 'minpse': 0.5}
epoch 49
11.403490513563156
validation set
{'acc': 0.8769231, 'prec0': 0.86885244, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.33333334, 'auroc': 0.6367924528301887, 'auprc': 0.484138830063349, 'minpse': 0.3333333333333333}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.80597013, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.2777778, 'auroc': 0.7520576131687242, 'auprc': 0.659623897559974, 'minpse': 0.5555555555555556}
Reset trainable parameters of layer = Conv2d(1, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Linear(in_features=512, out_features=1000, bias=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Conv2d(64, 384, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=7200, bias=True)
Reset trainable parameters of layer = Linear(in_features=1000, out_features=6272, bias=True)
Reset trainable parameters of layer = Linear(in_features=300, out_features=600, bias=True)
Reset trainable parameters of layer = Linear(in_features=600, out_features=300, bias=True)
Reset trainable parameters of layer = Conv1d(300, 300, kernel_size=(24,), stride=(1,))
Reset trainable parameters of layer = Linear(in_features=300, out_features=1, bias=True)
Reset trainable parameters of layer = Linear(in_features=24, out_features=1, bias=True)
Removing classifier.fc.weight, number of classes has changed.
Removing classifier.fc.bias, number of classes has changed.
for distribution val
type 0= 45 type 1= 20
for distribution test
type 0= 54 type 1= 18
epoch 0
35.62128984928131
validation set
{'acc': 0.75384617, 'prec0': 0.75438595, 'prec1': 0.75, 'rec0': 0.95555556, 'rec1': 0.3, 'auroc': 0.5522222222222223, 'auprc': 0.44123594717305803, 'minpse': 0.38461538461538464}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.78688526, 'prec1': 0.45454547, 'rec0': 0.8888889, 'rec1': 0.2777778, 'auroc': 0.5565843621399177, 'auprc': 0.34649427615801015, 'minpse': 0.3333333333333333}
epoch 1
34.264461517333984
validation set
{'acc': 0.4, 'prec0': 0.61538464, 'prec1': 0.25641027, 'rec0': 0.35555556, 'rec1': 0.5, 'auroc': 0.5088888888888888, 'auprc': 0.37709545906801406, 'minpse': 0.34615384615384615}
Mortality Prediction on the test set
{'acc': 0.5, 'prec0': 0.8214286, 'prec1': 0.29545453, 'rec0': 0.42592594, 'rec1': 0.7222222, 'auroc': 0.6162551440329218, 'auprc': 0.5230387809319649, 'minpse': 0.391304347826087}
epoch 2
32.196619629859924
validation set
{'acc': 0.6769231, 'prec0': 0.77272725, 'prec1': 0.47619048, 'rec0': 0.75555557, 'rec1': 0.5, 'auroc': 0.5788888888888889, 'auprc': 0.4225550609777064, 'minpse': 0.47619047619047616}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.8148148, 'prec1': 0.44444445, 'rec0': 0.8148148, 'rec1': 0.44444445, 'auroc': 0.6358024691358024, 'auprc': 0.5186533459446526, 'minpse': 0.47368421052631576}
epoch 3
32.298567056655884
validation set
{'acc': 0.6923077, 'prec0': 0.7659575, 'prec1': 0.5, 'rec0': 0.8, 'rec1': 0.45, 'auroc': 0.5733333333333334, 'auprc': 0.3708583359115435, 'minpse': 0.45}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.8363636, 'prec1': 0.5294118, 'rec0': 0.8518519, 'rec1': 0.5, 'auroc': 0.6656378600823045, 'auprc': 0.3566734870952207, 'minpse': 0.5}
epoch 4
31.8450345993042
validation set
{'acc': 0.6923077, 'prec0': 0.75510204, 'prec1': 0.5, 'rec0': 0.82222223, 'rec1': 0.4, 'auroc': 0.5977777777777779, 'auprc': 0.4858510076008331, 'minpse': 0.4}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.83928573, 'prec1': 0.5625, 'rec0': 0.8703704, 'rec1': 0.5, 'auroc': 0.647119341563786, 'auprc': 0.6048974740638215, 'minpse': 0.5}
epoch 5
29.138901948928833
validation set
{'acc': 0.6923077, 'prec0': 0.80487806, 'prec1': 0.5, 'rec0': 0.73333335, 'rec1': 0.6, 'auroc': 0.6833333333333333, 'auprc': 0.4311926809734519, 'minpse': 0.5238095238095238}
Mortality Prediction on the test set
{'acc': 0.5277778, 'prec0': 0.72727275, 'prec1': 0.21428572, 'rec0': 0.5925926, 'rec1': 0.33333334, 'auroc': 0.46913580246913583, 'auprc': 0.31593663239001446, 'minpse': 0.2647058823529412}
epoch 6
27.58648180961609
validation set
{'acc': 0.8, 'prec0': 0.84782606, 'prec1': 0.68421054, 'rec0': 0.8666667, 'rec1': 0.65, 'auroc': 0.7433333333333334, 'auprc': 0.6775178963085378, 'minpse': 0.65}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.9183673, 'prec1': 0.6086956, 'rec0': 0.8333333, 'rec1': 0.7777778, 'auroc': 0.8065843621399178, 'auprc': 0.7514568756547496, 'minpse': 0.7222222222222222}
epoch 7
25.539834856987
validation set
{'acc': 0.83076924, 'prec0': 0.8541667, 'prec1': 0.7647059, 'rec0': 0.9111111, 'rec1': 0.65, 'auroc': 0.7433333333333334, 'auprc': 0.685506013975541, 'minpse': 0.65}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9, 'prec1': 0.59090906, 'rec0': 0.8333333, 'rec1': 0.7222222, 'auroc': 0.8713991769547326, 'auprc': 0.7985372525568095, 'minpse': 0.7222222222222222}
epoch 8
28.009242296218872
validation set
{'acc': 0.8153846, 'prec0': 0.85106385, 'prec1': 0.7222222, 'rec0': 0.8888889, 'rec1': 0.65, 'auroc': 0.7455555555555556, 'auprc': 0.6742182202830415, 'minpse': 0.65}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8679245, 'prec1': 0.57894737, 'rec0': 0.8518519, 'rec1': 0.6111111, 'auroc': 0.7973251028806585, 'auprc': 0.7000101639638336, 'minpse': 0.6111111111111112}
epoch 9
22.748416483402252
validation set
{'acc': 0.8, 'prec0': 0.84782606, 'prec1': 0.68421054, 'rec0': 0.8666667, 'rec1': 0.65, 'auroc': 0.7522222222222222, 'auprc': 0.5880699840009928, 'minpse': 0.65}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.88461536, 'prec1': 0.6, 'rec0': 0.8518519, 'rec1': 0.6666667, 'auroc': 0.8518518518518519, 'auprc': 0.7426284907356158, 'minpse': 0.6190476190476191}
epoch 10
23.057513296604156
validation set
{'acc': 0.84615386, 'prec0': 0.8301887, 'prec1': 0.9166667, 'rec0': 0.9777778, 'rec1': 0.55, 'auroc': 0.788888888888889, 'auprc': 0.732163934621602, 'minpse': 0.65}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.85, 'prec1': 0.75, 'rec0': 0.9444444, 'rec1': 0.5, 'auroc': 0.7736625514403292, 'auprc': 0.6806455325900218, 'minpse': 0.5555555555555556}
epoch 11
22.35851114988327
validation set
{'acc': 0.6769231, 'prec0': 0.7307692, 'prec1': 0.46153846, 'rec0': 0.84444445, 'rec1': 0.3, 'auroc': 0.5255555555555557, 'auprc': 0.4133619684023883, 'minpse': 0.35}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.8, 'prec1': 0.5, 'rec0': 0.8888889, 'rec1': 0.33333334, 'auroc': 0.595679012345679, 'auprc': 0.3413476942955692, 'minpse': 0.42105263157894735}
epoch 12
22.56570428609848
validation set
{'acc': 0.7846154, 'prec0': 0.81632656, 'prec1': 0.6875, 'rec0': 0.8888889, 'rec1': 0.55, 'auroc': 0.7455555555555556, 'auprc': 0.684979391368017, 'minpse': 0.55}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.86206895, 'prec1': 0.71428573, 'rec0': 0.9259259, 'rec1': 0.5555556, 'auroc': 0.7952674897119342, 'auprc': 0.6912273781479457, 'minpse': 0.5789473684210527}
epoch 13
21.01375985145569
validation set
{'acc': 0.73846155, 'prec0': 0.9117647, 'prec1': 0.5483871, 'rec0': 0.6888889, 'rec1': 0.85, 'auroc': 0.788888888888889, 'auprc': 0.64212948260711, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.6388889, 'prec0': 0.8684211, 'prec1': 0.38235295, 'rec0': 0.6111111, 'rec1': 0.7222222, 'auroc': 0.7942386831275721, 'auprc': 0.73012317621717, 'minpse': 0.6666666666666666}
epoch 14
22.32928901910782
validation set
{'acc': 0.83076924, 'prec0': 0.8695652, 'prec1': 0.7368421, 'rec0': 0.8888889, 'rec1': 0.7, 'auroc': 0.8211111111111111, 'auprc': 0.7581181067281213, 'minpse': 0.7}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.86, 'prec1': 0.5, 'rec0': 0.7962963, 'rec1': 0.6111111, 'auroc': 0.808641975308642, 'auprc': 0.7337450781659438, 'minpse': 0.6111111111111112}
epoch 15
20.198221921920776
validation set
{'acc': 0.7846154, 'prec0': 0.8604651, 'prec1': 0.6363636, 'rec0': 0.82222223, 'rec1': 0.7, 'auroc': 0.7944444444444445, 'auprc': 0.6809122680671151, 'minpse': 0.6363636363636364}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.9148936, 'prec1': 0.56, 'rec0': 0.7962963, 'rec1': 0.7777778, 'auroc': 0.8487654320987654, 'auprc': 0.7509958126709873, 'minpse': 0.65}
epoch 16
19.5960710644722
validation set
{'acc': 0.6923077, 'prec0': 0.8787879, 'prec1': 0.5, 'rec0': 0.64444447, 'rec1': 0.8, 'auroc': 0.7355555555555556, 'auprc': 0.6206600461633915, 'minpse': 0.55}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.90909094, 'prec1': 0.5, 'rec0': 0.7407407, 'rec1': 0.7777778, 'auroc': 0.8837448559670782, 'auprc': 0.7920837616092633, 'minpse': 0.6842105263157895}
epoch 17
18.9029141664505
validation set
{'acc': 0.7692308, 'prec0': 0.82608694, 'prec1': 0.6315789, 'rec0': 0.84444445, 'rec1': 0.6, 'auroc': 0.7433333333333333, 'auprc': 0.6033470768215662, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8596491, 'prec1': 0.6666667, 'rec0': 0.9074074, 'rec1': 0.5555556, 'auroc': 0.7849794238683128, 'auprc': 0.7079370461435492, 'minpse': 0.631578947368421}
epoch 18
18.960581064224243
validation set
{'acc': 0.7846154, 'prec0': 0.8604651, 'prec1': 0.6363636, 'rec0': 0.82222223, 'rec1': 0.7, 'auroc': 0.7611111111111112, 'auprc': 0.6138848926287973, 'minpse': 0.6363636363636364}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.84615386, 'prec1': 0.5, 'rec0': 0.8148148, 'rec1': 0.5555556, 'auroc': 0.7880658436213991, 'auprc': 0.7088721871186459, 'minpse': 0.5555555555555556}
epoch 19
21.632134199142456
validation set
{'acc': 0.75384617, 'prec0': 0.8717949, 'prec1': 0.5769231, 'rec0': 0.75555557, 'rec1': 0.75, 'auroc': 0.7444444444444445, 'auprc': 0.6334041821186858, 'minpse': 0.5769230769230769}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.88, 'prec1': 0.54545456, 'rec0': 0.8148148, 'rec1': 0.6666667, 'auroc': 0.772633744855967, 'auprc': 0.6990144399148129, 'minpse': 0.6111111111111112}
epoch 20
19.92087948322296
validation set
{'acc': 0.73846155, 'prec0': 0.8684211, 'prec1': 0.5555556, 'rec0': 0.73333335, 'rec1': 0.75, 'auroc': 0.7811111111111111, 'auprc': 0.7286823714551331, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.6527778, 'prec0': 0.8372093, 'prec1': 0.37931034, 'rec0': 0.6666667, 'rec1': 0.6111111, 'auroc': 0.7993827160493827, 'auprc': 0.6742402658511196, 'minpse': 0.5555555555555556}
epoch 21
20.68331378698349
validation set
{'acc': 0.7692308, 'prec0': 0.8125, 'prec1': 0.64705884, 'rec0': 0.8666667, 'rec1': 0.55, 'auroc': 0.6755555555555556, 'auprc': 0.5895118347192874, 'minpse': 0.55}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.8333333, 'prec1': 0.6666667, 'rec0': 0.9259259, 'rec1': 0.44444445, 'auroc': 0.7438271604938271, 'auprc': 0.5980267543837444, 'minpse': 0.5555555555555556}
epoch 22
17.772154092788696
validation set
{'acc': 0.75384617, 'prec0': 0.8717949, 'prec1': 0.5769231, 'rec0': 0.75555557, 'rec1': 0.75, 'auroc': 0.7544444444444445, 'auprc': 0.682482699406397, 'minpse': 0.6190476190476191}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.8958333, 'prec1': 0.5416667, 'rec0': 0.7962963, 'rec1': 0.7222222, 'auroc': 0.8343621399176955, 'auprc': 0.7233543051131488, 'minpse': 0.5789473684210527}
epoch 23
16.974032998085022
validation set
{'acc': 0.6923077, 'prec0': 0.8787879, 'prec1': 0.5, 'rec0': 0.64444447, 'rec1': 0.8, 'auroc': 0.77, 'auprc': 0.6530415692757281, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.877551, 'prec1': 0.5217391, 'rec0': 0.7962963, 'rec1': 0.6666667, 'auroc': 0.7674897119341563, 'auprc': 0.6775224097837071, 'minpse': 0.631578947368421}
epoch 24
21.59299087524414
validation set
{'acc': 0.7846154, 'prec0': 0.81632656, 'prec1': 0.6875, 'rec0': 0.8888889, 'rec1': 0.55, 'auroc': 0.7611111111111111, 'auprc': 0.6489686540361181, 'minpse': 0.5652173913043478}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8679245, 'prec1': 0.57894737, 'rec0': 0.8518519, 'rec1': 0.6111111, 'auroc': 0.7232510288065844, 'auprc': 0.6455367811601106, 'minpse': 0.6111111111111112}
epoch 25
18.15774244070053
validation set
{'acc': 0.73846155, 'prec0': 0.75, 'prec1': 0.6666667, 'rec0': 0.93333334, 'rec1': 0.3, 'auroc': 0.5955555555555555, 'auprc': 0.4332068131050298, 'minpse': 0.4166666666666667}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8095238, 'prec1': 0.6666667, 'rec0': 0.9444444, 'rec1': 0.33333334, 'auroc': 0.6337448559670782, 'auprc': 0.4510314263180737, 'minpse': 0.3888888888888889}
epoch 26
17.372424483299255
validation set
{'acc': 0.8153846, 'prec0': 0.88372093, 'prec1': 0.6818182, 'rec0': 0.84444445, 'rec1': 0.75, 'auroc': 0.7977777777777777, 'auprc': 0.7167025998240211, 'minpse': 0.6818181818181818}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.8518519, 'prec1': 0.5555556, 'rec0': 0.8518519, 'rec1': 0.5555556, 'auroc': 0.8220164609053497, 'auprc': 0.7518352242845252, 'minpse': 0.6190476190476191}
epoch 27
17.404811322689056
validation set
{'acc': 0.7692308, 'prec0': 0.875, 'prec1': 0.6, 'rec0': 0.7777778, 'rec1': 0.75, 'auroc': 0.7833333333333333, 'auprc': 0.675687844847972, 'minpse': 0.6190476190476191}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.9302326, 'prec1': 0.51724136, 'rec0': 0.7407407, 'rec1': 0.8333333, 'auroc': 0.8703703703703705, 'auprc': 0.7795462629637622, 'minpse': 0.6363636363636364}
epoch 28
17.000791251659393
validation set
{'acc': 0.72307694, 'prec0': 0.8648649, 'prec1': 0.53571427, 'rec0': 0.7111111, 'rec1': 0.75, 'auroc': 0.7544444444444444, 'auprc': 0.6732481720768027, 'minpse': 0.5714285714285714}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9347826, 'prec1': 0.5769231, 'rec0': 0.7962963, 'rec1': 0.8333333, 'auroc': 0.852880658436214, 'auprc': 0.7756383653270043, 'minpse': 0.6363636363636364}
epoch 29
16.2156782746315
validation set
{'acc': 0.8153846, 'prec0': 0.902439, 'prec1': 0.6666667, 'rec0': 0.82222223, 'rec1': 0.8, 'auroc': 0.8255555555555555, 'auprc': 0.7129907921051699, 'minpse': 0.7}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.8888889, 'prec1': 0.6666667, 'rec0': 0.8888889, 'rec1': 0.6666667, 'auroc': 0.8230452674897119, 'auprc': 0.7669588858118996, 'minpse': 0.6666666666666666}
epoch 30
16.574544370174408
validation set
{'acc': 0.75384617, 'prec0': 0.9142857, 'prec1': 0.56666666, 'rec0': 0.7111111, 'rec1': 0.85, 'auroc': 0.8344444444444444, 'auprc': 0.7481273029590261, 'minpse': 0.65}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.9302326, 'prec1': 0.51724136, 'rec0': 0.7407407, 'rec1': 0.8333333, 'auroc': 0.8467078189300412, 'auprc': 0.7768786576249035, 'minpse': 0.6842105263157895}
epoch 31
16.89930847287178
validation set
{'acc': 0.72307694, 'prec0': 0.8857143, 'prec1': 0.53333336, 'rec0': 0.6888889, 'rec1': 0.8, 'auroc': 0.7988888888888889, 'auprc': 0.666435301874887, 'minpse': 0.56}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.9302326, 'prec1': 0.51724136, 'rec0': 0.7407407, 'rec1': 0.8333333, 'auroc': 0.8343621399176955, 'auprc': 0.7653536359074039, 'minpse': 0.6666666666666666}
epoch 32
15.80336618423462
validation set
{'acc': 0.8, 'prec0': 0.88095236, 'prec1': 0.65217394, 'rec0': 0.82222223, 'rec1': 0.75, 'auroc': 0.8422222222222222, 'auprc': 0.7204820818971784, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.875, 'prec1': 0.6875, 'rec0': 0.9074074, 'rec1': 0.6111111, 'auroc': 0.8395061728395062, 'auprc': 0.7764733166404387, 'minpse': 0.6666666666666666}
epoch 33
14.712845034897327
validation set
{'acc': 0.7692308, 'prec0': 0.8947368, 'prec1': 0.5925926, 'rec0': 0.75555557, 'rec1': 0.8, 'auroc': 0.8300000000000001, 'auprc': 0.7552037619022913, 'minpse': 0.6363636363636364}
Mortality Prediction on the test set
{'acc': 0.6805556, 'prec0': 0.84444445, 'prec1': 0.4074074, 'rec0': 0.7037037, 'rec1': 0.6111111, 'auroc': 0.7736625514403292, 'auprc': 0.6644863475287739, 'minpse': 0.5}
epoch 34
14.907005786895752
validation set
{'acc': 0.75384617, 'prec0': 0.8918919, 'prec1': 0.5714286, 'rec0': 0.73333335, 'rec1': 0.8, 'auroc': 0.7977777777777777, 'auprc': 0.7108615457032298, 'minpse': 0.65}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.9047619, 'prec1': 0.46666667, 'rec0': 0.7037037, 'rec1': 0.7777778, 'auroc': 0.8148148148148149, 'auprc': 0.7563852987014821, 'minpse': 0.7222222222222222}
epoch 35
14.58292955160141
validation set
{'acc': 0.72307694, 'prec0': 0.8648649, 'prec1': 0.53571427, 'rec0': 0.7111111, 'rec1': 0.75, 'auroc': 0.7744444444444445, 'auprc': 0.6539428856299883, 'minpse': 0.5652173913043478}
Mortality Prediction on the test set
{'acc': 0.6944444, 'prec0': 0.8333333, 'prec1': 0.41666666, 'rec0': 0.7407407, 'rec1': 0.5555556, 'auroc': 0.75, 'auprc': 0.6698271509407103, 'minpse': 0.5555555555555556}
epoch 36
14.64061850309372
validation set
{'acc': 0.75384617, 'prec0': 0.9142857, 'prec1': 0.56666666, 'rec0': 0.7111111, 'rec1': 0.85, 'auroc': 0.8144444444444444, 'auprc': 0.6132110700767939, 'minpse': 0.5925925925925926}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9, 'prec1': 0.59090906, 'rec0': 0.8333333, 'rec1': 0.7222222, 'auroc': 0.8364197530864198, 'auprc': 0.753389559817164, 'minpse': 0.6842105263157895}
epoch 37
13.966121405363083
validation set
{'acc': 0.7846154, 'prec0': 0.8780488, 'prec1': 0.625, 'rec0': 0.8, 'rec1': 0.75, 'auroc': 0.7855555555555556, 'auprc': 0.6985056357758863, 'minpse': 0.65}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.9019608, 'prec1': 0.61904764, 'rec0': 0.8518519, 'rec1': 0.7222222, 'auroc': 0.8549382716049382, 'auprc': 0.7637131061455189, 'minpse': 0.6666666666666666}
epoch 38
15.382725179195404
validation set
{'acc': 0.84615386, 'prec0': 0.87234044, 'prec1': 0.7777778, 'rec0': 0.9111111, 'rec1': 0.7, 'auroc': 0.7833333333333333, 'auprc': 0.7478559891661011, 'minpse': 0.7}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.852459, 'prec1': 0.8181818, 'rec0': 0.962963, 'rec1': 0.5, 'auroc': 0.8467078189300412, 'auprc': 0.7661630645626694, 'minpse': 0.65}
epoch 39
19.51099681854248
validation set
{'acc': 0.7692308, 'prec0': 0.875, 'prec1': 0.6, 'rec0': 0.7777778, 'rec1': 0.75, 'auroc': 0.8411111111111111, 'auprc': 0.7414921856436989, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.9, 'prec1': 0.59090906, 'rec0': 0.8333333, 'rec1': 0.7222222, 'auroc': 0.8806584362139918, 'auprc': 0.8189783032165352, 'minpse': 0.7222222222222222}
epoch 40
16.760661959648132
validation set
{'acc': 0.6923077, 'prec0': 0.7777778, 'prec1': 0.5, 'rec0': 0.7777778, 'rec1': 0.5, 'auroc': 0.6311111111111112, 'auprc': 0.4010079519730044, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.7083333, 'prec0': 0.8113208, 'prec1': 0.42105263, 'rec0': 0.7962963, 'rec1': 0.44444445, 'auroc': 0.6707818930041152, 'auprc': 0.5471487497795238, 'minpse': 0.4444444444444444}
epoch 41
15.836267828941345
validation set
{'acc': 0.6923077, 'prec0': 0.82051283, 'prec1': 0.5, 'rec0': 0.7111111, 'rec1': 0.65, 'auroc': 0.7222222222222222, 'auprc': 0.577543937109511, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.875, 'prec1': 0.5, 'rec0': 0.7777778, 'rec1': 0.6666667, 'auroc': 0.7273662551440329, 'auprc': 0.6504481412249613, 'minpse': 0.5555555555555556}
epoch 42
13.690192073583603
validation set
{'acc': 0.8, 'prec0': 0.9444444, 'prec1': 0.62068963, 'rec0': 0.75555557, 'rec1': 0.9, 'auroc': 0.8688888888888888, 'auprc': 0.7673800049057737, 'minpse': 0.6818181818181818}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.8627451, 'prec1': 0.52380955, 'rec0': 0.8148148, 'rec1': 0.6111111, 'auroc': 0.7973251028806585, 'auprc': 0.7328228673096964, 'minpse': 0.5555555555555556}
epoch 43
11.694211184978485
validation set
{'acc': 0.75384617, 'prec0': 0.85365856, 'prec1': 0.5833333, 'rec0': 0.7777778, 'rec1': 0.7, 'auroc': 0.8011111111111111, 'auprc': 0.6910662752201043, 'minpse': 0.6190476190476191}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.88235295, 'prec1': 0.5714286, 'rec0': 0.8333333, 'rec1': 0.6666667, 'auroc': 0.8045267489711934, 'auprc': 0.6966821782027804, 'minpse': 0.5714285714285714}
epoch 44
10.875034719705582
validation set
{'acc': 0.7692308, 'prec0': 0.875, 'prec1': 0.6, 'rec0': 0.7777778, 'rec1': 0.75, 'auroc': 0.8233333333333333, 'auprc': 0.7220832340935934, 'minpse': 0.6363636363636364}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.877551, 'prec1': 0.5217391, 'rec0': 0.7962963, 'rec1': 0.6666667, 'auroc': 0.7952674897119342, 'auprc': 0.6848453343411954, 'minpse': 0.6}
epoch 45
12.95317792892456
validation set
{'acc': 0.7692308, 'prec0': 0.9411765, 'prec1': 0.58064514, 'rec0': 0.7111111, 'rec1': 0.9, 'auroc': 0.8355555555555555, 'auprc': 0.6309058873988329, 'minpse': 0.6818181818181818}
Mortality Prediction on the test set
{'acc': 0.7083333, 'prec0': 0.88372093, 'prec1': 0.44827586, 'rec0': 0.7037037, 'rec1': 0.7222222, 'auroc': 0.8405349794238683, 'auprc': 0.7391619298238246, 'minpse': 0.6111111111111112}
epoch 46
17.902889668941498
validation set
{'acc': 0.7846154, 'prec0': 0.8974359, 'prec1': 0.61538464, 'rec0': 0.7777778, 'rec1': 0.8, 'auroc': 0.8233333333333334, 'auprc': 0.7534603149447711, 'minpse': 0.6521739130434783}
Mortality Prediction on the test set
{'acc': 0.6527778, 'prec0': 0.8372093, 'prec1': 0.37931034, 'rec0': 0.6666667, 'rec1': 0.6111111, 'auroc': 0.7222222222222222, 'auprc': 0.680658138695102, 'minpse': 0.5555555555555556}
epoch 47
16.52735361456871
validation set
{'acc': 0.6769231, 'prec0': 0.96153843, 'prec1': 0.4871795, 'rec0': 0.5555556, 'rec1': 0.95, 'auroc': 0.81, 'auprc': 0.7056624975398387, 'minpse': 0.6}
Mortality Prediction on the test set
{'acc': 0.5833333, 'prec0': 0.96153843, 'prec1': 0.36956522, 'rec0': 0.46296296, 'rec1': 0.9444444, 'auroc': 0.8353909465020577, 'auprc': 0.7428581631849448, 'minpse': 0.6111111111111112}
epoch 48
16.0261310338974
validation set
{'acc': 0.7692308, 'prec0': 0.9166667, 'prec1': 0.5862069, 'rec0': 0.73333335, 'rec1': 0.85, 'auroc': 0.8355555555555555, 'auprc': 0.7307359209547706, 'minpse': 0.65}
Mortality Prediction on the test set
{'acc': 0.6388889, 'prec0': 0.8333333, 'prec1': 0.36666667, 'rec0': 0.6481481, 'rec1': 0.6111111, 'auroc': 0.7181069958847737, 'auprc': 0.6650029163330053, 'minpse': 0.6111111111111112}
epoch 49
14.062637686729431
validation set
{'acc': 0.63076925, 'prec0': 0.8, 'prec1': 0.43333334, 'rec0': 0.62222224, 'rec1': 0.65, 'auroc': 0.6555555555555556, 'auprc': 0.517759441984222, 'minpse': 0.45454545454545453}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.8181818, 'prec1': 0.47058824, 'rec0': 0.8333333, 'rec1': 0.44444445, 'auroc': 0.6460905349794238, 'auprc': 0.41223392476132, 'minpse': 0.4444444444444444}
Reset trainable parameters of layer = Conv2d(1, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Linear(in_features=512, out_features=1000, bias=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Conv2d(64, 384, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=7200, bias=True)
Reset trainable parameters of layer = Linear(in_features=1000, out_features=6272, bias=True)
Reset trainable parameters of layer = Linear(in_features=300, out_features=600, bias=True)
Reset trainable parameters of layer = Linear(in_features=600, out_features=300, bias=True)
Reset trainable parameters of layer = Conv1d(300, 300, kernel_size=(24,), stride=(1,))
Reset trainable parameters of layer = Linear(in_features=300, out_features=1, bias=True)
Reset trainable parameters of layer = Linear(in_features=24, out_features=1, bias=True)
Removing classifier.fc.weight, number of classes has changed.
Removing classifier.fc.bias, number of classes has changed.
for distribution val
type 0= 42 type 1= 23
for distribution test
type 0= 54 type 1= 18
epoch 0
34.696969389915466
validation set
{'acc': 0.53846157, 'prec0': 0.875, 'prec1': 0.42857143, 'rec0': 0.33333334, 'rec1': 0.9130435, 'auroc': 0.5900621118012422, 'auprc': 0.4440977644541916, 'minpse': 0.4358974358974359}
Mortality Prediction on the test set
{'acc': 0.5, 'prec0': 0.8, 'prec1': 0.2857143, 'rec0': 0.44444445, 'rec1': 0.6666667, 'auroc': 0.6563786008230452, 'auprc': 0.5634236566661682, 'minpse': 0.4444444444444444}
epoch 1
32.26803135871887
validation set
{'acc': 0.3846154, 'prec0': 0.53333336, 'prec1': 0.25714287, 'rec0': 0.3809524, 'rec1': 0.39130434, 'auroc': 0.4109730848861284, 'auprc': 0.33607453188139524, 'minpse': 0.3548387096774194}
Mortality Prediction on the test set
{'acc': 0.4861111, 'prec0': 0.79310346, 'prec1': 0.27906978, 'rec0': 0.42592594, 'rec1': 0.6666667, 'auroc': 0.5977366255144033, 'auprc': 0.44406462020266063, 'minpse': 0.3888888888888889}
epoch 2
31.795851349830627
validation set
{'acc': 0.6615385, 'prec0': 0.7777778, 'prec1': 0.51724136, 'rec0': 0.6666667, 'rec1': 0.65217394, 'auroc': 0.6594202898550725, 'auprc': 0.5431516748220899, 'minpse': 0.5172413793103449}
Mortality Prediction on the test set
{'acc': 0.5555556, 'prec0': 0.8055556, 'prec1': 0.30555555, 'rec0': 0.537037, 'rec1': 0.6111111, 'auroc': 0.6296296296296297, 'auprc': 0.5339080159104728, 'minpse': 0.5}
epoch 3
32.17758083343506
validation set
{'acc': 0.7076923, 'prec0': 0.8108108, 'prec1': 0.5714286, 'rec0': 0.71428573, 'rec1': 0.6956522, 'auroc': 0.7153209109730848, 'auprc': 0.550224769188889, 'minpse': 0.5714285714285714}
Mortality Prediction on the test set
{'acc': 0.6388889, 'prec0': 0.8684211, 'prec1': 0.38235295, 'rec0': 0.6111111, 'rec1': 0.7222222, 'auroc': 0.7695473251028807, 'auprc': 0.6507728209394217, 'minpse': 0.5555555555555556}
epoch 4
30.841092348098755
validation set
{'acc': 0.6923077, 'prec0': 0.67741936, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.13043478, 'auroc': 0.5144927536231884, 'auprc': 0.44537043019743483, 'minpse': 0.3888888888888889}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.7761194, 'prec1': 0.6, 'rec0': 0.962963, 'rec1': 0.16666667, 'auroc': 0.7294238683127572, 'auprc': 0.561171812195989, 'minpse': 0.6111111111111112}
epoch 5
33.62925863265991
validation set
{'acc': 0.75384617, 'prec0': 0.88235295, 'prec1': 0.61290324, 'rec0': 0.71428573, 'rec1': 0.82608694, 'auroc': 0.7857142857142857, 'auprc': 0.6674330350551536, 'minpse': 0.6129032258064516}
Mortality Prediction on the test set
{'acc': 0.6666667, 'prec0': 0.8947368, 'prec1': 0.4117647, 'rec0': 0.6296296, 'rec1': 0.7777778, 'auroc': 0.8384773662551441, 'auprc': 0.7084459143706465, 'minpse': 0.6666666666666666}
epoch 6
29.09132421016693
validation set
{'acc': 0.7846154, 'prec0': 0.78, 'prec1': 0.8, 'rec0': 0.9285714, 'rec1': 0.5217391, 'auroc': 0.6853002070393375, 'auprc': 0.676598492413653, 'minpse': 0.5217391304347826}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8867925, 'prec1': 0.6315789, 'rec0': 0.8703704, 'rec1': 0.6666667, 'auroc': 0.8353909465020577, 'auprc': 0.6376220326651068, 'minpse': 0.6666666666666666}
epoch 7
28.623252987861633
validation set
{'acc': 0.8769231, 'prec0': 0.8541667, 'prec1': 0.9411765, 'rec0': 0.97619045, 'rec1': 0.6956522, 'auroc': 0.8799171842650104, 'auprc': 0.8291701148196969, 'minpse': 0.6956521739130435}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.8947368, 'prec1': 0.8, 'rec0': 0.9444444, 'rec1': 0.6666667, 'auroc': 0.8343621399176955, 'auprc': 0.7770171077002698, 'minpse': 0.7222222222222222}
epoch 8
26.621413946151733
validation set
{'acc': 0.7692308, 'prec0': 0.84615386, 'prec1': 0.65384614, 'rec0': 0.78571427, 'rec1': 0.73913044, 'auroc': 0.8219461697722568, 'auprc': 0.7837012645303121, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.8888889, 'prec1': 0.6666667, 'rec0': 0.8888889, 'rec1': 0.6666667, 'auroc': 0.815843621399177, 'auprc': 0.75785162133218, 'minpse': 0.6842105263157895}
epoch 9
24.448308646678925
validation set
{'acc': 0.7076923, 'prec0': 0.96, 'prec1': 0.55, 'rec0': 0.5714286, 'rec1': 0.95652175, 'auroc': 0.8405797101449276, 'auprc': 0.7973641761602235, 'minpse': 0.6206896551724138}
Mortality Prediction on the test set
{'acc': 0.5694444, 'prec0': 0.8965517, 'prec1': 0.3488372, 'rec0': 0.4814815, 'rec1': 0.8333333, 'auroc': 0.8333333333333334, 'auprc': 0.7574247054423345, 'minpse': 0.6666666666666666}
epoch 10
25.00726717710495
validation set
{'acc': 0.7692308, 'prec0': 0.8648649, 'prec1': 0.64285713, 'rec0': 0.7619048, 'rec1': 0.7826087, 'auroc': 0.855072463768116, 'auprc': 0.7990838103770566, 'minpse': 0.6521739130434783}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.9302326, 'prec1': 0.51724136, 'rec0': 0.7407407, 'rec1': 0.8333333, 'auroc': 0.8343621399176955, 'auprc': 0.6759478955411187, 'minpse': 0.6111111111111112}
epoch 11
24.437257647514343
validation set
{'acc': 0.8, 'prec0': 0.8918919, 'prec1': 0.6785714, 'rec0': 0.78571427, 'rec1': 0.82608694, 'auroc': 0.865424430641822, 'auprc': 0.7816399070392109, 'minpse': 0.6956521739130435}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.93333334, 'prec1': 0.5555556, 'rec0': 0.7777778, 'rec1': 0.8333333, 'auroc': 0.8683127572016461, 'auprc': 0.733303262635048, 'minpse': 0.6666666666666666}
epoch 12
24.650379836559296
validation set
{'acc': 0.7692308, 'prec0': 0.9354839, 'prec1': 0.61764705, 'rec0': 0.6904762, 'rec1': 0.9130435, 'auroc': 0.8633540372670807, 'auprc': 0.7917759364738702, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.9268293, 'prec1': 0.48387095, 'rec0': 0.7037037, 'rec1': 0.8333333, 'auroc': 0.8004115226337448, 'auprc': 0.660405155676067, 'minpse': 0.5555555555555556}
epoch 13
22.122231900691986
validation set
{'acc': 0.83076924, 'prec0': 0.8604651, 'prec1': 0.77272725, 'rec0': 0.88095236, 'rec1': 0.73913044, 'auroc': 0.8167701863354039, 'auprc': 0.7423120652423496, 'minpse': 0.7391304347826086}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.86440676, 'prec1': 0.7692308, 'rec0': 0.9444444, 'rec1': 0.5555556, 'auroc': 0.7921810699588477, 'auprc': 0.5436633476326191, 'minpse': 0.6111111111111112}
epoch 14
22.11461567878723
validation set
{'acc': 0.8153846, 'prec0': 0.875, 'prec1': 0.72, 'rec0': 0.8333333, 'rec1': 0.7826087, 'auroc': 0.8747412008281573, 'auprc': 0.7645737009056579, 'minpse': 0.72}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.88461536, 'prec1': 0.6, 'rec0': 0.8518519, 'rec1': 0.6666667, 'auroc': 0.8446502057613169, 'auprc': 0.6886377085622818, 'minpse': 0.6666666666666666}
epoch 15
21.026438236236572
validation set
{'acc': 0.83076924, 'prec0': 0.82978725, 'prec1': 0.8333333, 'rec0': 0.9285714, 'rec1': 0.65217394, 'auroc': 0.8416149068322981, 'auprc': 0.7966038793944691, 'minpse': 0.7083333333333334}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.86206895, 'prec1': 0.71428573, 'rec0': 0.9259259, 'rec1': 0.5555556, 'auroc': 0.8076131687242798, 'auprc': 0.6879637540433929, 'minpse': 0.6111111111111112}
epoch 16
19.361417174339294
validation set
{'acc': 0.7846154, 'prec0': 0.78, 'prec1': 0.8, 'rec0': 0.9285714, 'rec1': 0.5217391, 'auroc': 0.7236024844720497, 'auprc': 0.6638110905528081, 'minpse': 0.6086956521739131}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.852459, 'prec1': 0.8181818, 'rec0': 0.962963, 'rec1': 0.5, 'auroc': 0.7366255144032923, 'auprc': 0.682846856430974, 'minpse': 0.5555555555555556}
epoch 17
21.910655677318573
validation set
{'acc': 0.7692308, 'prec0': 0.78723407, 'prec1': 0.7222222, 'rec0': 0.88095236, 'rec1': 0.5652174, 'auroc': 0.7018633540372671, 'auprc': 0.6726411389690582, 'minpse': 0.5652173913043478}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.84745765, 'prec1': 0.6923077, 'rec0': 0.9259259, 'rec1': 0.5, 'auroc': 0.7592592592592593, 'auprc': 0.5552171057249475, 'minpse': 0.6111111111111112}
epoch 18
21.579818785190582
validation set
{'acc': 0.7846154, 'prec0': 0.96666664, 'prec1': 0.62857145, 'rec0': 0.6904762, 'rec1': 0.95652175, 'auroc': 0.8778467908902692, 'auprc': 0.8337673922483031, 'minpse': 0.7083333333333334}
Mortality Prediction on the test set
{'acc': 0.6805556, 'prec0': 0.8974359, 'prec1': 0.42424244, 'rec0': 0.6481481, 'rec1': 0.7777778, 'auroc': 0.7932098765432098, 'auprc': 0.706347597901136, 'minpse': 0.6666666666666666}
epoch 19
19.883301496505737
validation set
{'acc': 0.7692308, 'prec0': 0.84615386, 'prec1': 0.65384614, 'rec0': 0.78571427, 'rec1': 0.73913044, 'auroc': 0.7795031055900621, 'auprc': 0.7472468222627515, 'minpse': 0.6538461538461539}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.8958333, 'prec1': 0.5416667, 'rec0': 0.7962963, 'rec1': 0.7222222, 'auroc': 0.8004115226337448, 'auprc': 0.7219275006439094, 'minpse': 0.65}
epoch 20
21.509547531604767
validation set
{'acc': 0.83076924, 'prec0': 0.8974359, 'prec1': 0.7307692, 'rec0': 0.8333333, 'rec1': 0.82608694, 'auroc': 0.8467908902691511, 'auprc': 0.7856835325178922, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8979592, 'prec1': 0.5652174, 'rec0': 0.8148148, 'rec1': 0.7222222, 'auroc': 0.79320987654321, 'auprc': 0.6498557419973536, 'minpse': 0.6111111111111112}
epoch 21
18.71017575263977
validation set
{'acc': 0.7692308, 'prec0': 0.90909094, 'prec1': 0.625, 'rec0': 0.71428573, 'rec1': 0.8695652, 'auroc': 0.8457556935817805, 'auprc': 0.8012128304471207, 'minpse': 0.6956521739130435}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.925, 'prec1': 0.46875, 'rec0': 0.6851852, 'rec1': 0.8333333, 'auroc': 0.8796296296296297, 'auprc': 0.7517363011583684, 'minpse': 0.7777777777777778}
epoch 22
18.767986297607422
validation set
{'acc': 0.83076924, 'prec0': 0.7924528, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.5217391, 'auroc': 0.7888198757763975, 'auprc': 0.7822027806181044, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.85, 'prec1': 0.75, 'rec0': 0.9444444, 'rec1': 0.5, 'auroc': 0.7304526748971193, 'auprc': 0.6644609268377373, 'minpse': 0.6666666666666666}
epoch 23
19.77441382408142
validation set
{'acc': 0.8153846, 'prec0': 0.875, 'prec1': 0.72, 'rec0': 0.8333333, 'rec1': 0.7826087, 'auroc': 0.8809523809523809, 'auprc': 0.8345828982782039, 'minpse': 0.72}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.8490566, 'prec1': 0.5263158, 'rec0': 0.8333333, 'rec1': 0.5555556, 'auroc': 0.8055555555555555, 'auprc': 0.6678361986350991, 'minpse': 0.5263157894736842}
epoch 24
19.843928575515747
validation set
{'acc': 0.7846154, 'prec0': 0.78, 'prec1': 0.8, 'rec0': 0.9285714, 'rec1': 0.5217391, 'auroc': 0.7008281573498965, 'auprc': 0.690204061285213, 'minpse': 0.5652173913043478}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.84210527, 'prec1': 0.6, 'rec0': 0.8888889, 'rec1': 0.5, 'auroc': 0.6759259259259258, 'auprc': 0.5597864789030744, 'minpse': 0.5555555555555556}
epoch 25
18.44745534658432
validation set
{'acc': 0.86153847, 'prec0': 0.9230769, 'prec1': 0.7692308, 'rec0': 0.85714287, 'rec1': 0.8695652, 'auroc': 0.8788819875776397, 'auprc': 0.8596883760706815, 'minpse': 0.7692307692307693}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.9130435, 'prec1': 0.53846157, 'rec0': 0.7777778, 'rec1': 0.7777778, 'auroc': 0.7901234567901235, 'auprc': 0.6837632435294626, 'minpse': 0.6111111111111112}
epoch 26
18.482213854789734
validation set
{'acc': 0.83076924, 'prec0': 0.8974359, 'prec1': 0.7307692, 'rec0': 0.8333333, 'rec1': 0.82608694, 'auroc': 0.8902691511387164, 'auprc': 0.7793376055229917, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.7083333, 'prec0': 0.88372093, 'prec1': 0.44827586, 'rec0': 0.7037037, 'rec1': 0.7222222, 'auroc': 0.8106995884773662, 'auprc': 0.6660754138883477, 'minpse': 0.6111111111111112}
epoch 27
18.857629537582397
validation set
{'acc': 0.8, 'prec0': 0.8717949, 'prec1': 0.6923077, 'rec0': 0.8095238, 'rec1': 0.7826087, 'auroc': 0.8612836438923396, 'auprc': 0.8409689759249059, 'minpse': 0.7083333333333334}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8979592, 'prec1': 0.5652174, 'rec0': 0.8148148, 'rec1': 0.7222222, 'auroc': 0.7952674897119342, 'auprc': 0.6526007722620293, 'minpse': 0.65}
epoch 28
16.830306500196457
validation set
{'acc': 0.84615386, 'prec0': 0.88095236, 'prec1': 0.7826087, 'rec0': 0.88095236, 'rec1': 0.7826087, 'auroc': 0.8861283643892339, 'auprc': 0.8514566640602093, 'minpse': 0.782608695652174}
Mortality Prediction on the test set
{'acc': 0.6944444, 'prec0': 0.8333333, 'prec1': 0.41666666, 'rec0': 0.7407407, 'rec1': 0.5555556, 'auroc': 0.7211934156378601, 'auprc': 0.5922802166079629, 'minpse': 0.5}
epoch 29
17.023619204759598
validation set
{'acc': 0.8, 'prec0': 0.8717949, 'prec1': 0.6923077, 'rec0': 0.8095238, 'rec1': 0.7826087, 'auroc': 0.84472049689441, 'auprc': 0.8079924563425127, 'minpse': 0.6956521739130435}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.8913044, 'prec1': 0.5, 'rec0': 0.7592593, 'rec1': 0.7222222, 'auroc': 0.7870370370370371, 'auprc': 0.6805478969102468, 'minpse': 0.7222222222222222}
epoch 30
17.703923225402832
validation set
{'acc': 0.7692308, 'prec0': 0.8, 'prec1': 0.7, 'rec0': 0.85714287, 'rec1': 0.6086956, 'auroc': 0.7784679089026916, 'auprc': 0.7409718622275411, 'minpse': 0.6086956521739131}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.8627451, 'prec1': 0.52380955, 'rec0': 0.8148148, 'rec1': 0.6111111, 'auroc': 0.7767489711934156, 'auprc': 0.6777570961738688, 'minpse': 0.6111111111111112}
epoch 31
16.52346646785736
validation set
{'acc': 0.8, 'prec0': 0.8372093, 'prec1': 0.72727275, 'rec0': 0.85714287, 'rec1': 0.6956522, 'auroc': 0.7660455486542443, 'auprc': 0.6716633566928815, 'minpse': 0.6956521739130435}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.84, 'prec1': 0.45454547, 'rec0': 0.7777778, 'rec1': 0.5555556, 'auroc': 0.7407407407407407, 'auprc': 0.552022131652917, 'minpse': 0.5}
epoch 32
21.51999419927597
validation set
{'acc': 0.84615386, 'prec0': 0.82, 'prec1': 0.93333334, 'rec0': 0.97619045, 'rec1': 0.6086956, 'auroc': 0.8084886128364389, 'auprc': 0.744718642280956, 'minpse': 0.6956521739130435}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8360656, 'prec1': 0.72727275, 'rec0': 0.9444444, 'rec1': 0.44444445, 'auroc': 0.801440329218107, 'auprc': 0.6809377994895937, 'minpse': 0.631578947368421}
epoch 33
18.459279894828796
validation set
{'acc': 0.84615386, 'prec0': 0.8636364, 'prec1': 0.8095238, 'rec0': 0.9047619, 'rec1': 0.73913044, 'auroc': 0.8612836438923395, 'auprc': 0.8407982847956996, 'minpse': 0.7391304347826086}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.8363636, 'prec1': 0.5294118, 'rec0': 0.8518519, 'rec1': 0.5, 'auroc': 0.7458847736625515, 'auprc': 0.6486369149180246, 'minpse': 0.5263157894736842}
epoch 34
15.872833549976349
validation set
{'acc': 0.8, 'prec0': 0.76363635, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.4347826, 'auroc': 0.6407867494824017, 'auprc': 0.6642196173792898, 'minpse': 0.5217391304347826}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.8333333, 'prec1': 0.6666667, 'rec0': 0.9259259, 'rec1': 0.44444445, 'auroc': 0.7253086419753086, 'auprc': 0.6113753440173999, 'minpse': 0.5}
epoch 35
15.06772643327713
validation set
{'acc': 0.8, 'prec0': 0.8372093, 'prec1': 0.72727275, 'rec0': 0.85714287, 'rec1': 0.6956522, 'auroc': 0.8219461697722568, 'auprc': 0.7999428786559533, 'minpse': 0.6956521739130435}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.89361703, 'prec1': 0.52, 'rec0': 0.7777778, 'rec1': 0.7222222, 'auroc': 0.7993827160493827, 'auprc': 0.6852123321133509, 'minpse': 0.5555555555555556}
epoch 36
18.371984362602234
validation set
{'acc': 0.8, 'prec0': 0.8717949, 'prec1': 0.6923077, 'rec0': 0.8095238, 'rec1': 0.7826087, 'auroc': 0.8457556935817805, 'auprc': 0.8042374776329129, 'minpse': 0.7083333333333334}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.877551, 'prec1': 0.5217391, 'rec0': 0.7962963, 'rec1': 0.6666667, 'auroc': 0.7839506172839505, 'auprc': 0.6840168627937642, 'minpse': 0.6111111111111112}
epoch 37
18.055073738098145
validation set
{'acc': 0.8153846, 'prec0': 0.8125, 'prec1': 0.8235294, 'rec0': 0.9285714, 'rec1': 0.6086956, 'auroc': 0.7349896480331263, 'auprc': 0.7526988313917969, 'minpse': 0.6086956521739131}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.85714287, 'prec1': 0.625, 'rec0': 0.8888889, 'rec1': 0.5555556, 'auroc': 0.6574074074074074, 'auprc': 0.6178711045132013, 'minpse': 0.5555555555555556}
epoch 38
16.027156472206116
validation set
{'acc': 0.83076924, 'prec0': 0.8039216, 'prec1': 0.9285714, 'rec0': 0.97619045, 'rec1': 0.5652174, 'auroc': 0.6977225672877847, 'auprc': 0.7138286796005999, 'minpse': 0.6086956521739131}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.84745765, 'prec1': 0.6923077, 'rec0': 0.9259259, 'rec1': 0.5, 'auroc': 0.7407407407407408, 'auprc': 0.6321283716980386, 'minpse': 0.631578947368421}
epoch 39
17.884581834077835
validation set
{'acc': 0.86153847, 'prec0': 0.8666667, 'prec1': 0.85, 'rec0': 0.9285714, 'rec1': 0.73913044, 'auroc': 0.8478260869565217, 'auprc': 0.8393070133979317, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.9056604, 'prec1': 0.68421054, 'rec0': 0.8888889, 'rec1': 0.7222222, 'auroc': 0.8106995884773662, 'auprc': 0.7448592390691793, 'minpse': 0.7222222222222222}
epoch 40
15.630167126655579
validation set
{'acc': 0.7846154, 'prec0': 0.7692308, 'prec1': 0.84615386, 'rec0': 0.95238096, 'rec1': 0.47826087, 'auroc': 0.6832298136645962, 'auprc': 0.6630432322366209, 'minpse': 0.5217391304347826}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.8548387, 'prec1': 0.9, 'rec0': 0.9814815, 'rec1': 0.5, 'auroc': 0.7386831275720165, 'auprc': 0.6807921227856144, 'minpse': 0.6111111111111112}
epoch 41
16.78836563229561
validation set
{'acc': 0.8153846, 'prec0': 0.8, 'prec1': 0.8666667, 'rec0': 0.95238096, 'rec1': 0.5652174, 'auroc': 0.772256728778468, 'auprc': 0.7252600515874399, 'minpse': 0.6521739130434783}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8360656, 'prec1': 0.72727275, 'rec0': 0.9444444, 'rec1': 0.44444445, 'auroc': 0.7109053497942387, 'auprc': 0.6633847304233513, 'minpse': 0.5555555555555556}
epoch 42
15.482688039541245
validation set
{'acc': 0.7692308, 'prec0': 0.8, 'prec1': 0.7, 'rec0': 0.85714287, 'rec1': 0.6086956, 'auroc': 0.7039337474120082, 'auprc': 0.6613653333360622, 'minpse': 0.625}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.85714287, 'prec1': 0.625, 'rec0': 0.8888889, 'rec1': 0.5555556, 'auroc': 0.6718106995884774, 'auprc': 0.6409018528499426, 'minpse': 0.5555555555555556}
epoch 43
15.2390878200531
validation set
{'acc': 0.7846154, 'prec0': 0.8181818, 'prec1': 0.71428573, 'rec0': 0.85714287, 'rec1': 0.65217394, 'auroc': 0.727743271221532, 'auprc': 0.6711328260706122, 'minpse': 0.6521739130434783}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.875, 'prec1': 0.6875, 'rec0': 0.9074074, 'rec1': 0.6111111, 'auroc': 0.7129629629629629, 'auprc': 0.6826937076078008, 'minpse': 0.6111111111111112}
epoch 44
14.456760883331299
validation set
{'acc': 0.75384617, 'prec0': 0.7708333, 'prec1': 0.7058824, 'rec0': 0.88095236, 'rec1': 0.5217391, 'auroc': 0.6666666666666666, 'auprc': 0.6177419463065049, 'minpse': 0.5217391304347826}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.8125, 'prec1': 0.75, 'rec0': 0.962963, 'rec1': 0.33333334, 'auroc': 0.7232510288065844, 'auprc': 0.6048050764393442, 'minpse': 0.5555555555555556}
epoch 45
14.286163628101349
validation set
{'acc': 0.8, 'prec0': 0.80851066, 'prec1': 0.7777778, 'rec0': 0.9047619, 'rec1': 0.6086956, 'auroc': 0.7194616977225673, 'auprc': 0.6900986635809435, 'minpse': 0.6086956521739131}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.86440676, 'prec1': 0.7692308, 'rec0': 0.9444444, 'rec1': 0.5555556, 'auroc': 0.6563786008230452, 'auprc': 0.6401831994773313, 'minpse': 0.5555555555555556}
epoch 46
13.796836003661156
validation set
{'acc': 0.8, 'prec0': 0.8372093, 'prec1': 0.72727275, 'rec0': 0.85714287, 'rec1': 0.6956522, 'auroc': 0.7784679089026916, 'auprc': 0.7378158567378729, 'minpse': 0.6956521739130435}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.85714287, 'prec1': 0.47826087, 'rec0': 0.7777778, 'rec1': 0.6111111, 'auroc': 0.7510288065843622, 'auprc': 0.6400140835297099, 'minpse': 0.5263157894736842}
epoch 47
14.452753007411957
validation set
{'acc': 0.7692308, 'prec0': 0.8292683, 'prec1': 0.6666667, 'rec0': 0.8095238, 'rec1': 0.6956522, 'auroc': 0.7898550724637681, 'auprc': 0.7338173974579281, 'minpse': 0.6666666666666666}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8679245, 'prec1': 0.57894737, 'rec0': 0.8518519, 'rec1': 0.6111111, 'auroc': 0.742798353909465, 'auprc': 0.650146121239783, 'minpse': 0.6111111111111112}
epoch 48
13.304931819438934
validation set
{'acc': 0.7846154, 'prec0': 0.78, 'prec1': 0.8, 'rec0': 0.9285714, 'rec1': 0.5217391, 'auroc': 0.7308488612836439, 'auprc': 0.6976564236923235, 'minpse': 0.6086956521739131}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.86206895, 'prec1': 0.71428573, 'rec0': 0.9259259, 'rec1': 0.5555556, 'auroc': 0.728395061728395, 'auprc': 0.6615647385796564, 'minpse': 0.6111111111111112}
epoch 49
14.278798550367355
validation set
{'acc': 0.7692308, 'prec0': 0.78723407, 'prec1': 0.7222222, 'rec0': 0.88095236, 'rec1': 0.5652174, 'auroc': 0.6977225672877846, 'auprc': 0.6650444011888716, 'minpse': 0.5652173913043478}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.84745765, 'prec1': 0.6923077, 'rec0': 0.9259259, 'rec1': 0.5, 'auroc': 0.7253086419753086, 'auprc': 0.6556834231505008, 'minpse': 0.5}
Reset trainable parameters of layer = Conv2d(1, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Linear(in_features=512, out_features=1000, bias=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Conv2d(64, 384, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=7200, bias=True)
Reset trainable parameters of layer = Linear(in_features=1000, out_features=6272, bias=True)
Reset trainable parameters of layer = Linear(in_features=300, out_features=600, bias=True)
Reset trainable parameters of layer = Linear(in_features=600, out_features=300, bias=True)
Reset trainable parameters of layer = Conv1d(300, 300, kernel_size=(24,), stride=(1,))
Reset trainable parameters of layer = Linear(in_features=300, out_features=1, bias=True)
Reset trainable parameters of layer = Linear(in_features=24, out_features=1, bias=True)
Removing classifier.fc.weight, number of classes has changed.
Removing classifier.fc.bias, number of classes has changed.
for distribution val
type 0= 49 type 1= 16
for distribution test
type 0= 54 type 1= 18
epoch 0
35.21896982192993
validation set
{'acc': 0.50769234, 'prec0': 0.8148148, 'prec1': 0.28947368, 'rec0': 0.4489796, 'rec1': 0.6875, 'auroc': 0.5318877551020409, 'auprc': 0.2721519933247488, 'minpse': 0.2894736842105263}
Mortality Prediction on the test set
{'acc': 0.5416667, 'prec0': 0.8181818, 'prec1': 0.30769232, 'rec0': 0.5, 'rec1': 0.6666667, 'auroc': 0.5514403292181069, 'auprc': 0.3006491577423257, 'minpse': 0.32558139534883723}
epoch 1
35.25022637844086
validation set
{'acc': 0.3846154, 'prec0': 0.6666667, 'prec1': 0.18421052, 'rec0': 0.36734694, 'rec1': 0.4375, 'auroc': 0.4719387755102041, 'auprc': 0.22860201908255046, 'minpse': 0.2777777777777778}
Mortality Prediction on the test set
{'acc': 0.5, 'prec0': 0.7647059, 'prec1': 0.2631579, 'rec0': 0.4814815, 'rec1': 0.5555556, 'auroc': 0.5267489711934157, 'auprc': 0.33357213320919943, 'minpse': 0.3103448275862069}
epoch 2
34.185214161872864
validation set
{'acc': 0.6769231, 'prec0': 0.8333333, 'prec1': 0.39130434, 'rec0': 0.71428573, 'rec1': 0.5625, 'auroc': 0.5854591836734694, 'auprc': 0.3920421977299775, 'minpse': 0.42105263157894735}
Mortality Prediction on the test set
{'acc': 0.6666667, 'prec0': 0.82608694, 'prec1': 0.3846154, 'rec0': 0.7037037, 'rec1': 0.5555556, 'auroc': 0.6141975308641975, 'auprc': 0.47744823171057654, 'minpse': 0.45}
epoch 3
32.310638189315796
validation set
{'acc': 0.7846154, 'prec0': 0.84313726, 'prec1': 0.5714286, 'rec0': 0.877551, 'rec1': 0.5, 'auroc': 0.6466836734693878, 'auprc': 0.49068098261558135, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.6805556, 'prec0': 0.7924528, 'prec1': 0.36842105, 'rec0': 0.7777778, 'rec1': 0.3888889, 'auroc': 0.595679012345679, 'auprc': 0.4764054017215795, 'minpse': 0.3888888888888889}
epoch 4
33.245389342308044
validation set
{'acc': 0.73846155, 'prec0': 0.84782606, 'prec1': 0.47368422, 'rec0': 0.79591835, 'rec1': 0.5625, 'auroc': 0.6275510204081632, 'auprc': 0.45939399742566933, 'minpse': 0.47368421052631576}
Mortality Prediction on the test set
{'acc': 0.6666667, 'prec0': 0.78846157, 'prec1': 0.35, 'rec0': 0.7592593, 'rec1': 0.3888889, 'auroc': 0.617283950617284, 'auprc': 0.4686938598513298, 'minpse': 0.3888888888888889}
epoch 5
31.720540046691895
validation set
{'acc': 0.8153846, 'prec0': 0.8627451, 'prec1': 0.64285713, 'rec0': 0.8979592, 'rec1': 0.5625, 'auroc': 0.7219387755102041, 'auprc': 0.5506169180290044, 'minpse': 0.5625}
Mortality Prediction on the test set
{'acc': 0.6527778, 'prec0': 0.80851066, 'prec1': 0.36, 'rec0': 0.7037037, 'rec1': 0.5, 'auroc': 0.624485596707819, 'auprc': 0.48901532657228153, 'minpse': 0.5}
epoch 6
30.307885885238647
validation set
{'acc': 0.64615387, 'prec0': 0.88235295, 'prec1': 0.38709676, 'rec0': 0.6122449, 'rec1': 0.75, 'auroc': 0.7040816326530612, 'auprc': 0.4776121842001233, 'minpse': 0.4117647058823529}
Mortality Prediction on the test set
{'acc': 0.5694444, 'prec0': 0.8108108, 'prec1': 0.31428573, 'rec0': 0.5555556, 'rec1': 0.6111111, 'auroc': 0.6965020576131686, 'auprc': 0.4249916449546216, 'minpse': 0.42857142857142855}
epoch 7
30.941458821296692
validation set
{'acc': 0.7846154, 'prec0': 0.8181818, 'prec1': 0.6, 'rec0': 0.9183673, 'rec1': 0.375, 'auroc': 0.6428571428571429, 'auprc': 0.527271483810148, 'minpse': 0.42105263157894735}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8196721, 'prec1': 0.6363636, 'rec0': 0.9259259, 'rec1': 0.3888889, 'auroc': 0.7253086419753086, 'auprc': 0.5850171493566979, 'minpse': 0.4444444444444444}
epoch 8
29.348782658576965
validation set
{'acc': 0.8153846, 'prec0': 0.8135593, 'prec1': 0.8333333, 'rec0': 0.97959185, 'rec1': 0.3125, 'auroc': 0.6364795918367346, 'auprc': 0.5051664747271732, 'minpse': 0.35}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.7941176, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.22222222, 'auroc': 0.73559670781893, 'auprc': 0.6345736611852676, 'minpse': 0.5555555555555556}
epoch 9
24.37169921398163
validation set
{'acc': 0.8153846, 'prec0': 0.8135593, 'prec1': 0.8333333, 'rec0': 0.97959185, 'rec1': 0.3125, 'auroc': 0.673469387755102, 'auprc': 0.5328640500421056, 'minpse': 0.42105263157894735}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.8064516, 'prec1': 0.6, 'rec0': 0.9259259, 'rec1': 0.33333334, 'auroc': 0.713991769547325, 'auprc': 0.5651526397614568, 'minpse': 0.5}
epoch 10
25.610457360744476
validation set
{'acc': 0.83076924, 'prec0': 0.83928573, 'prec1': 0.7777778, 'rec0': 0.9591837, 'rec1': 0.4375, 'auroc': 0.7117346938775511, 'auprc': 0.5966150488293812, 'minpse': 0.47058823529411764}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.84210527, 'prec1': 0.6, 'rec0': 0.8888889, 'rec1': 0.5, 'auroc': 0.838477366255144, 'auprc': 0.7318426802879536, 'minpse': 0.5555555555555556}
epoch 11
24.355858623981476
validation set
{'acc': 0.84615386, 'prec0': 0.84210527, 'prec1': 0.875, 'rec0': 0.97959185, 'rec1': 0.4375, 'auroc': 0.6785714285714286, 'auprc': 0.5919684163264127, 'minpse': 0.4444444444444444}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.8333333, 'prec1': 0.6666667, 'rec0': 0.9259259, 'rec1': 0.44444445, 'auroc': 0.7705761316872427, 'auprc': 0.6226728668911994, 'minpse': 0.5}
epoch 12
22.17026275396347
validation set
{'acc': 0.7846154, 'prec0': 0.84313726, 'prec1': 0.5714286, 'rec0': 0.877551, 'rec1': 0.5, 'auroc': 0.7066326530612245, 'auprc': 0.6032861085904813, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.86538464, 'prec1': 0.55, 'rec0': 0.8333333, 'rec1': 0.6111111, 'auroc': 0.7983539094650205, 'auprc': 0.6481072747460772, 'minpse': 0.5555555555555556}
epoch 13
20.402365684509277
validation set
{'acc': 0.7846154, 'prec0': 0.84313726, 'prec1': 0.5714286, 'rec0': 0.877551, 'rec1': 0.5, 'auroc': 0.6517857142857143, 'auprc': 0.5566389594423176, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.8490566, 'prec1': 0.5263158, 'rec0': 0.8333333, 'rec1': 0.5555556, 'auroc': 0.7448559670781894, 'auprc': 0.5957591195943241, 'minpse': 0.5263157894736842}
epoch 14
18.408241271972656
validation set
{'acc': 0.83076924, 'prec0': 0.83928573, 'prec1': 0.7777778, 'rec0': 0.9591837, 'rec1': 0.4375, 'auroc': 0.6772959183673469, 'auprc': 0.573832579139222, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.7083333, 'prec0': 0.7894737, 'prec1': 0.4, 'rec0': 0.8333333, 'rec1': 0.33333334, 'auroc': 0.5576131687242799, 'auprc': 0.477700400043024, 'minpse': 0.3684210526315789}
epoch 15
17.355753242969513
validation set
{'acc': 0.8, 'prec0': 0.8333333, 'prec1': 0.6363636, 'rec0': 0.9183673, 'rec1': 0.4375, 'auroc': 0.6913265306122449, 'auprc': 0.5502465545715554, 'minpse': 0.4375}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.8103448, 'prec1': 0.5, 'rec0': 0.8703704, 'rec1': 0.3888889, 'auroc': 0.7469135802469137, 'auprc': 0.5600708330372843, 'minpse': 0.5714285714285714}
epoch 16
18.551743268966675
validation set
{'acc': 0.6615385, 'prec0': 0.81395346, 'prec1': 0.36363637, 'rec0': 0.71428573, 'rec1': 0.5, 'auroc': 0.5548469387755102, 'auprc': 0.43040923987296786, 'minpse': 0.375}
Mortality Prediction on the test set
{'acc': 0.6111111, 'prec0': 0.7826087, 'prec1': 0.30769232, 'rec0': 0.6666667, 'rec1': 0.44444445, 'auroc': 0.5576131687242798, 'auprc': 0.4635290175548967, 'minpse': 0.4444444444444444}
epoch 17
19.013121783733368
validation set
{'acc': 0.5846154, 'prec0': 0.89285713, 'prec1': 0.35135135, 'rec0': 0.5102041, 'rec1': 0.8125, 'auroc': 0.667091836734694, 'auprc': 0.4772708513612758, 'minpse': 0.375}
Mortality Prediction on the test set
{'acc': 0.5555556, 'prec0': 0.9230769, 'prec1': 0.3478261, 'rec0': 0.44444445, 'rec1': 0.8888889, 'auroc': 0.7613168724279836, 'auprc': 0.5759812085836558, 'minpse': 0.5555555555555556}
epoch 18
15.798865363001823
validation set
{'acc': 0.8, 'prec0': 0.8214286, 'prec1': 0.6666667, 'rec0': 0.93877554, 'rec1': 0.375, 'auroc': 0.6479591836734694, 'auprc': 0.5039163263762902, 'minpse': 0.375}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.81666666, 'prec1': 0.5833333, 'rec0': 0.9074074, 'rec1': 0.3888889, 'auroc': 0.7613168724279835, 'auprc': 0.6175161559182045, 'minpse': 0.5555555555555556}
epoch 19
17.84740138053894
validation set
{'acc': 0.83076924, 'prec0': 0.83928573, 'prec1': 0.7777778, 'rec0': 0.9591837, 'rec1': 0.4375, 'auroc': 0.7142857142857143, 'auprc': 0.573809082379958, 'minpse': 0.4375}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.7936508, 'prec1': 0.5555556, 'rec0': 0.9259259, 'rec1': 0.2777778, 'auroc': 0.7047325102880658, 'auprc': 0.4578562695426041, 'minpse': 0.4782608695652174}
epoch 20
21.18207538127899
validation set
{'acc': 0.6615385, 'prec0': 0.84615386, 'prec1': 0.3846154, 'rec0': 0.67346936, 'rec1': 0.625, 'auroc': 0.6326530612244898, 'auprc': 0.49665699346878556, 'minpse': 0.391304347826087}
Mortality Prediction on the test set
{'acc': 0.6666667, 'prec0': 0.82608694, 'prec1': 0.3846154, 'rec0': 0.7037037, 'rec1': 0.5555556, 'auroc': 0.6522633744855968, 'auprc': 0.4878219237865499, 'minpse': 0.5}
epoch 21
16.760664880275726
validation set
{'acc': 0.6923077, 'prec0': 0.79591835, 'prec1': 0.375, 'rec0': 0.79591835, 'rec1': 0.375, 'auroc': 0.5497448979591837, 'auprc': 0.3964946448708636, 'minpse': 0.375}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.8214286, 'prec1': 0.5, 'rec0': 0.8518519, 'rec1': 0.44444445, 'auroc': 0.6563786008230453, 'auprc': 0.45901993884661796, 'minpse': 0.5}
epoch 22
15.576220899820328
validation set
{'acc': 0.6923077, 'prec0': 0.80851066, 'prec1': 0.3888889, 'rec0': 0.7755102, 'rec1': 0.4375, 'auroc': 0.5829081632653061, 'auprc': 0.42611846221017324, 'minpse': 0.3888888888888889}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.83928573, 'prec1': 0.5625, 'rec0': 0.8703704, 'rec1': 0.5, 'auroc': 0.6862139917695473, 'auprc': 0.44913924718996745, 'minpse': 0.5}
epoch 23
20.861939013004303
validation set
{'acc': 0.73846155, 'prec0': 0.82, 'prec1': 0.46666667, 'rec0': 0.8367347, 'rec1': 0.4375, 'auroc': 0.6045918367346939, 'auprc': 0.40145946573584346, 'minpse': 0.4375}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.85, 'prec1': 0.75, 'rec0': 0.9444444, 'rec1': 0.5, 'auroc': 0.7993827160493827, 'auprc': 0.6746578190731066, 'minpse': 0.6111111111111112}
epoch 24
16.548855245113373
validation set
{'acc': 0.4923077, 'prec0': 0.9, 'prec1': 0.31111112, 'rec0': 0.36734694, 'rec1': 0.875, 'auroc': 0.6211734693877551, 'auprc': 0.3151158684901838, 'minpse': 0.3684210526315789}
Mortality Prediction on the test set
{'acc': 0.5277778, 'prec0': 0.9166667, 'prec1': 0.33333334, 'rec0': 0.4074074, 'rec1': 0.8888889, 'auroc': 0.8261316872427984, 'auprc': 0.5925627828368861, 'minpse': 0.6111111111111112}
epoch 25
17.96618103981018
validation set
{'acc': 0.64615387, 'prec0': 0.8611111, 'prec1': 0.37931034, 'rec0': 0.63265306, 'rec1': 0.6875, 'auroc': 0.6772959183673469, 'auprc': 0.4826662298177657, 'minpse': 0.4375}
Mortality Prediction on the test set
{'acc': 0.6666667, 'prec0': 0.85714287, 'prec1': 0.4, 'rec0': 0.6666667, 'rec1': 0.6666667, 'auroc': 0.727366255144033, 'auprc': 0.6019672596498792, 'minpse': 0.6111111111111112}
epoch 26
18.89054000377655
validation set
{'acc': 0.8153846, 'prec0': 0.8032787, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.25, 'auroc': 0.6033163265306123, 'auprc': 0.4792902152914086, 'minpse': 0.4117647058823529}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.796875, 'prec1': 0.625, 'rec0': 0.9444444, 'rec1': 0.2777778, 'auroc': 0.7736625514403292, 'auprc': 0.5462834773898004, 'minpse': 0.5714285714285714}
epoch 27
15.356509625911713
validation set
{'acc': 0.83076924, 'prec0': 0.83928573, 'prec1': 0.7777778, 'rec0': 0.9591837, 'rec1': 0.4375, 'auroc': 0.6709183673469389, 'auprc': 0.5773641278548917, 'minpse': 0.4375}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.82539684, 'prec1': 0.7777778, 'rec0': 0.962963, 'rec1': 0.3888889, 'auroc': 0.7685185185185185, 'auprc': 0.6713220453820655, 'minpse': 0.5789473684210527}
epoch 28
14.257427453994751
validation set
{'acc': 0.75384617, 'prec0': 0.85106385, 'prec1': 0.5, 'rec0': 0.81632656, 'rec1': 0.5625, 'auroc': 0.7270408163265306, 'auprc': 0.6121404332760629, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.875, 'prec1': 0.6875, 'rec0': 0.9074074, 'rec1': 0.6111111, 'auroc': 0.8281893004115226, 'auprc': 0.7103437733244542, 'minpse': 0.6111111111111112}
epoch 29
12.333461910486221
validation set
{'acc': 0.72307694, 'prec0': 0.8039216, 'prec1': 0.42857143, 'rec0': 0.8367347, 'rec1': 0.375, 'auroc': 0.5931122448979591, 'auprc': 0.33691788141234347, 'minpse': 0.375}
Mortality Prediction on the test set
{'acc': 0.7638889, 'prec0': 0.8245614, 'prec1': 0.53333336, 'rec0': 0.8703704, 'rec1': 0.44444445, 'auroc': 0.6553497942386831, 'auprc': 0.5607719758566883, 'minpse': 0.5}
epoch 30
20.933074831962585
validation set
{'acc': 0.8769231, 'prec0': 0.8596491, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.5, 'auroc': 0.6849489795918368, 'auprc': 0.654232446157311, 'minpse': 0.5625}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.8181818, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.33333334, 'auroc': 0.8065843621399178, 'auprc': 0.6793743863123733, 'minpse': 0.6111111111111112}
epoch 31
23.777644336223602
validation set
{'acc': 0.6615385, 'prec0': 0.84615386, 'prec1': 0.3846154, 'rec0': 0.67346936, 'rec1': 0.625, 'auroc': 0.6084183673469389, 'auprc': 0.3392390702688145, 'minpse': 0.3888888888888889}
Mortality Prediction on the test set
{'acc': 0.7083333, 'prec0': 0.8666667, 'prec1': 0.44444445, 'rec0': 0.7222222, 'rec1': 0.6666667, 'auroc': 0.7932098765432098, 'auprc': 0.5934199040723227, 'minpse': 0.5555555555555556}
epoch 32
16.797711312770844
validation set
{'acc': 0.83076924, 'prec0': 0.82758623, 'prec1': 0.85714287, 'rec0': 0.97959185, 'rec1': 0.375, 'auroc': 0.6721938775510203, 'auprc': 0.4948138554552065, 'minpse': 0.4375}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.80597013, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.2777778, 'auroc': 0.802469135802469, 'auprc': 0.6722973723436356, 'minpse': 0.5454545454545454}
epoch 33
14.138101190328598
validation set
{'acc': 0.83076924, 'prec0': 0.83928573, 'prec1': 0.7777778, 'rec0': 0.9591837, 'rec1': 0.4375, 'auroc': 0.7117346938775511, 'auprc': 0.583611383701796, 'minpse': 0.47058823529411764}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.80597013, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.2777778, 'auroc': 0.7942386831275721, 'auprc': 0.6866555112432063, 'minpse': 0.5714285714285714}
epoch 34
13.93114286661148
validation set
{'acc': 0.5846154, 'prec0': 0.89285713, 'prec1': 0.35135135, 'rec0': 0.5102041, 'rec1': 0.8125, 'auroc': 0.6760204081632653, 'auprc': 0.48883352236260835, 'minpse': 0.4375}
Mortality Prediction on the test set
{'acc': 0.5416667, 'prec0': 0.8181818, 'prec1': 0.30769232, 'rec0': 0.5, 'rec1': 0.6666667, 'auroc': 0.6985596707818931, 'auprc': 0.597862719466453, 'minpse': 0.5555555555555556}
epoch 35
14.130905985832214
validation set
{'acc': 0.53846157, 'prec0': 0.88, 'prec1': 0.325, 'rec0': 0.4489796, 'rec1': 0.8125, 'auroc': 0.6122448979591836, 'auprc': 0.44990313101058543, 'minpse': 0.375}
Mortality Prediction on the test set
{'acc': 0.45833334, 'prec0': 0.82608694, 'prec1': 0.2857143, 'rec0': 0.35185185, 'rec1': 0.7777778, 'auroc': 0.7078189300411522, 'auprc': 0.6093648144606028, 'minpse': 0.6111111111111112}
epoch 36
15.623848646879196
validation set
{'acc': 0.8, 'prec0': 0.84615386, 'prec1': 0.61538464, 'rec0': 0.8979592, 'rec1': 0.5, 'auroc': 0.6568877551020409, 'auprc': 0.4370304149702987, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.86206895, 'prec1': 0.71428573, 'rec0': 0.9259259, 'rec1': 0.5555556, 'auroc': 0.8220164609053497, 'auprc': 0.6440404494797033, 'minpse': 0.6666666666666666}
epoch 37
16.456876516342163
validation set
{'acc': 0.7846154, 'prec0': 0.84313726, 'prec1': 0.5714286, 'rec0': 0.877551, 'rec1': 0.5, 'auroc': 0.6568877551020409, 'auprc': 0.4139628744933587, 'minpse': 0.5}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.82258064, 'prec1': 0.7, 'rec0': 0.9444444, 'rec1': 0.3888889, 'auroc': 0.8148148148148148, 'auprc': 0.6272044224489115, 'minpse': 0.6111111111111112}
epoch 38
12.981479823589325
validation set
{'acc': 0.75384617, 'prec0': 0.8113208, 'prec1': 0.5, 'rec0': 0.877551, 'rec1': 0.375, 'auroc': 0.5918367346938775, 'auprc': 0.4086357441251115, 'minpse': 0.375}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.8666667, 'prec1': 0.8333333, 'rec0': 0.962963, 'rec1': 0.5555556, 'auroc': 0.7613168724279835, 'auprc': 0.6936565285683649, 'minpse': 0.6111111111111112}
epoch 39
13.3638955950737
validation set
{'acc': 0.8153846, 'prec0': 0.8032787, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.25, 'auroc': 0.5727040816326531, 'auprc': 0.4549956413640537, 'minpse': 0.3125}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.7910448, 'prec1': 0.8, 'rec0': 0.9814815, 'rec1': 0.22222222, 'auroc': 0.7304526748971194, 'auprc': 0.6264382386217545, 'minpse': 0.6111111111111112}
epoch 40
12.035322487354279
validation set
{'acc': 0.7846154, 'prec0': 0.8301887, 'prec1': 0.5833333, 'rec0': 0.8979592, 'rec1': 0.4375, 'auroc': 0.667091836734694, 'auprc': 0.5109083434979186, 'minpse': 0.4375}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.82758623, 'prec1': 0.5714286, 'rec0': 0.8888889, 'rec1': 0.44444445, 'auroc': 0.8024691358024691, 'auprc': 0.7110326525596797, 'minpse': 0.65}
epoch 41
12.173337399959564
validation set
{'acc': 0.8153846, 'prec0': 0.8032787, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.25, 'auroc': 0.5905612244897959, 'auprc': 0.47105810972165213, 'minpse': 0.375}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.80597013, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.2777778, 'auroc': 0.7139917695473251, 'auprc': 0.6489805276224124, 'minpse': 0.5789473684210527}
epoch 42
12.038317739963531
validation set
{'acc': 0.8153846, 'prec0': 0.8363636, 'prec1': 0.7, 'rec0': 0.93877554, 'rec1': 0.4375, 'auroc': 0.6568877551020408, 'auprc': 0.42989143516641415, 'minpse': 0.4375}
Mortality Prediction on the test set
{'acc': 0.875, 'prec0': 0.85714287, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.5, 'auroc': 0.8312757201646089, 'auprc': 0.7632775559155851, 'minpse': 0.631578947368421}
epoch 43
11.149232774972916
validation set
{'acc': 0.8, 'prec0': 0.8333333, 'prec1': 0.6363636, 'rec0': 0.9183673, 'rec1': 0.4375, 'auroc': 0.6364795918367347, 'auprc': 0.5028470245723521, 'minpse': 0.4375}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.84, 'prec1': 0.45454547, 'rec0': 0.7777778, 'rec1': 0.5555556, 'auroc': 0.661522633744856, 'auprc': 0.427683183232618, 'minpse': 0.45454545454545453}
epoch 44
13.108581334352493
validation set
{'acc': 0.5846154, 'prec0': 0.8666667, 'prec1': 0.34285715, 'rec0': 0.53061223, 'rec1': 0.75, 'auroc': 0.6352040816326531, 'auprc': 0.4839801769181577, 'minpse': 0.375}
Mortality Prediction on the test set
{'acc': 0.6527778, 'prec0': 0.8918919, 'prec1': 0.4, 'rec0': 0.6111111, 'rec1': 0.7777778, 'auroc': 0.7613168724279835, 'auprc': 0.6934980413153584, 'minpse': 0.6666666666666666}
epoch 45
13.157142877578735
validation set
{'acc': 0.8, 'prec0': 0.8333333, 'prec1': 0.6363636, 'rec0': 0.9183673, 'rec1': 0.4375, 'auroc': 0.6556122448979592, 'auprc': 0.4944172747262253, 'minpse': 0.4375}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8360656, 'prec1': 0.72727275, 'rec0': 0.9444444, 'rec1': 0.44444445, 'auroc': 0.8189300411522633, 'auprc': 0.7043383441980814, 'minpse': 0.6666666666666666}
epoch 46
10.79780387878418
validation set
{'acc': 0.61538464, 'prec0': 0.85294116, 'prec1': 0.3548387, 'rec0': 0.59183675, 'rec1': 0.6875, 'auroc': 0.6454081632653061, 'auprc': 0.5160843526626367, 'minpse': 0.3888888888888889}
Mortality Prediction on the test set
{'acc': 0.6944444, 'prec0': 0.8636364, 'prec1': 0.42857143, 'rec0': 0.7037037, 'rec1': 0.6666667, 'auroc': 0.7541152263374484, 'auprc': 0.6534968888700772, 'minpse': 0.6}
epoch 47
11.482522457838058
validation set
{'acc': 0.5538462, 'prec0': 0.85714287, 'prec1': 0.3243243, 'rec0': 0.48979592, 'rec1': 0.75, 'auroc': 0.5982142857142857, 'auprc': 0.4556180525127439, 'minpse': 0.375}
Mortality Prediction on the test set
{'acc': 0.5277778, 'prec0': 0.85714287, 'prec1': 0.3181818, 'rec0': 0.44444445, 'rec1': 0.7777778, 'auroc': 0.7551440329218108, 'auprc': 0.6579383694324866, 'minpse': 0.6111111111111112}
epoch 48
11.849505931138992
validation set
{'acc': 0.73846155, 'prec0': 0.8076923, 'prec1': 0.46153846, 'rec0': 0.85714287, 'rec1': 0.375, 'auroc': 0.5956632653061225, 'auprc': 0.459202702980721, 'minpse': 0.375}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.8301887, 'prec1': 0.47368422, 'rec0': 0.8148148, 'rec1': 0.5, 'auroc': 0.6882716049382716, 'auprc': 0.5403942279389149, 'minpse': 0.47368421052631576}
epoch 49
12.938729166984558
validation set
{'acc': 0.5846154, 'prec0': 0.8666667, 'prec1': 0.34285715, 'rec0': 0.53061223, 'rec1': 0.75, 'auroc': 0.6441326530612245, 'auprc': 0.4779664095256684, 'minpse': 0.4375}
Mortality Prediction on the test set
{'acc': 0.6527778, 'prec0': 0.8717949, 'prec1': 0.3939394, 'rec0': 0.6296296, 'rec1': 0.7222222, 'auroc': 0.7746913580246915, 'auprc': 0.6758323866172378, 'minpse': 0.6666666666666666}
Reset trainable parameters of layer = Conv2d(1, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Linear(in_features=512, out_features=1000, bias=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Conv2d(64, 384, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=7200, bias=True)
Reset trainable parameters of layer = Linear(in_features=1000, out_features=6272, bias=True)
Reset trainable parameters of layer = Linear(in_features=300, out_features=600, bias=True)
Reset trainable parameters of layer = Linear(in_features=600, out_features=300, bias=True)
Reset trainable parameters of layer = Conv1d(300, 300, kernel_size=(24,), stride=(1,))
Reset trainable parameters of layer = Linear(in_features=300, out_features=1, bias=True)
Reset trainable parameters of layer = Linear(in_features=24, out_features=1, bias=True)
Removing classifier.fc.weight, number of classes has changed.
Removing classifier.fc.bias, number of classes has changed.
for distribution val
type 0= 41 type 1= 23
for distribution test
type 0= 54 type 1= 18
epoch 0
35.98899579048157
validation set
{'acc': 0.6875, 'prec0': 0.6909091, 'prec1': 0.6666667, 'rec0': 0.9268293, 'rec1': 0.26086956, 'auroc': 0.49522799575821846, 'auprc': 0.42618964356054456, 'minpse': 0.41379310344827586}
Mortality Prediction on the test set
{'acc': 0.625, 'prec0': 0.72131145, 'prec1': 0.09090909, 'rec0': 0.8148148, 'rec1': 0.055555556, 'auroc': 0.4547325102880658, 'auprc': 0.2278588548385409, 'minpse': 0.2727272727272727}
epoch 1
33.3396680355072
validation set
{'acc': 0.3125, 'prec0': 0.2, 'prec1': 0.3220339, 'rec0': 0.024390243, 'rec1': 0.82608694, 'auroc': 0.5174973488865324, 'auprc': 0.3998927876924512, 'minpse': 0.4230769230769231}
Mortality Prediction on the test set
{'acc': 0.2638889, 'prec0': 0.6666667, 'prec1': 0.24637681, 'rec0': 0.037037037, 'rec1': 0.9444444, 'auroc': 0.5174897119341564, 'auprc': 0.2883038095297168, 'minpse': 0.3055555555555556}
epoch 2
33.86140024662018
validation set
{'acc': 0.75, 'prec0': 0.7777778, 'prec1': 0.68421054, 'rec0': 0.85365856, 'rec1': 0.5652174, 'auroc': 0.6808059384941676, 'auprc': 0.5850543478371353, 'minpse': 0.5652173913043478}
Mortality Prediction on the test set
{'acc': 0.6388889, 'prec0': 0.7692308, 'prec1': 0.3, 'rec0': 0.7407407, 'rec1': 0.33333334, 'auroc': 0.49074074074074076, 'auprc': 0.2575724626559164, 'minpse': 0.3333333333333333}
epoch 3
33.3524786233902
validation set
{'acc': 0.765625, 'prec0': 0.76, 'prec1': 0.78571427, 'rec0': 0.9268293, 'rec1': 0.47826087, 'auroc': 0.7051961823966066, 'auprc': 0.5778927855889148, 'minpse': 0.6086956521739131}
Mortality Prediction on the test set
{'acc': 0.6666667, 'prec0': 0.75, 'prec1': 0.25, 'rec0': 0.8333333, 'rec1': 0.16666667, 'auroc': 0.49176954732510286, 'auprc': 0.244887602771779, 'minpse': 0.3333333333333333}
epoch 4
33.33675146102905
validation set
{'acc': 0.765625, 'prec0': 0.7708333, 'prec1': 0.75, 'rec0': 0.902439, 'rec1': 0.5217391, 'auroc': 0.7338282078472959, 'auprc': 0.7158502163831237, 'minpse': 0.5714285714285714}
Mortality Prediction on the test set
{'acc': 0.6527778, 'prec0': 0.7735849, 'prec1': 0.31578946, 'rec0': 0.7592593, 'rec1': 0.33333334, 'auroc': 0.5925925925925926, 'auprc': 0.40662866686605464, 'minpse': 0.3333333333333333}
epoch 5
33.685635685920715
validation set
{'acc': 0.734375, 'prec0': 0.78571427, 'prec1': 0.6363636, 'rec0': 0.80487806, 'rec1': 0.6086956, 'auroc': 0.7465535524920466, 'auprc': 0.6549265962331856, 'minpse': 0.6086956521739131}
Mortality Prediction on the test set
{'acc': 0.6527778, 'prec0': 0.7735849, 'prec1': 0.31578946, 'rec0': 0.7592593, 'rec1': 0.33333334, 'auroc': 0.5699588477366255, 'auprc': 0.3333262830909889, 'minpse': 0.3333333333333333}
epoch 6
31.934493899345398
validation set
{'acc': 0.78125, 'prec0': 0.754717, 'prec1': 0.90909094, 'rec0': 0.9756098, 'rec1': 0.4347826, 'auroc': 0.6447507953340403, 'auprc': 0.6531581061857237, 'minpse': 0.5416666666666666}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.8, 'prec1': 0.5, 'rec0': 0.8888889, 'rec1': 0.33333334, 'auroc': 0.5257201646090535, 'auprc': 0.49293958613457717, 'minpse': 0.3888888888888889}
epoch 7
28.677257299423218
validation set
{'acc': 0.875, 'prec0': 0.902439, 'prec1': 0.82608694, 'rec0': 0.902439, 'rec1': 0.82608694, 'auroc': 0.8621420996818664, 'auprc': 0.8257291638343134, 'minpse': 0.8260869565217391}
Mortality Prediction on the test set
{'acc': 0.7777778, 'prec0': 0.88, 'prec1': 0.54545456, 'rec0': 0.8148148, 'rec1': 0.6666667, 'auroc': 0.7911522633744855, 'auprc': 0.6494256479782369, 'minpse': 0.6111111111111112}
epoch 8
27.83953356742859
validation set
{'acc': 0.75, 'prec0': 0.71929824, 'prec1': 1.0, 'rec0': 1.0, 'rec1': 0.3043478, 'auroc': 0.6405090137857902, 'auprc': 0.6118491817193988, 'minpse': 0.4782608695652174}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.78125, 'prec1': 0.5, 'rec0': 0.9259259, 'rec1': 0.22222222, 'auroc': 0.5596707818930041, 'auprc': 0.3756557812536888, 'minpse': 0.3888888888888889}
epoch 9
24.780795872211456
validation set
{'acc': 0.890625, 'prec0': 0.925, 'prec1': 0.8333333, 'rec0': 0.902439, 'rec1': 0.8695652, 'auroc': 0.8939554612937433, 'auprc': 0.8933794905872643, 'minpse': 0.8333333333333334}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.90384614, 'prec1': 0.65, 'rec0': 0.8703704, 'rec1': 0.7222222, 'auroc': 0.8631687242798353, 'auprc': 0.6893677756180278, 'minpse': 0.6666666666666666}
epoch 10
23.960509181022644
validation set
{'acc': 0.90625, 'prec0': 0.8888889, 'prec1': 0.94736844, 'rec0': 0.9756098, 'rec1': 0.7826087, 'auroc': 0.9088016967126193, 'auprc': 0.909802768958221, 'minpse': 0.782608695652174}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.877193, 'prec1': 0.73333335, 'rec0': 0.9259259, 'rec1': 0.6111111, 'auroc': 0.8672839506172839, 'auprc': 0.7742850759964321, 'minpse': 0.7368421052631579}
epoch 11
23.35144954919815
validation set
{'acc': 0.875, 'prec0': 0.902439, 'prec1': 0.82608694, 'rec0': 0.902439, 'rec1': 0.82608694, 'auroc': 0.9088016967126193, 'auprc': 0.89285095766004, 'minpse': 0.8260869565217391}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.88235295, 'prec1': 0.5714286, 'rec0': 0.8333333, 'rec1': 0.6666667, 'auroc': 0.8539094650205762, 'auprc': 0.7312048696442832, 'minpse': 0.6111111111111112}
epoch 12
21.186182737350464
validation set
{'acc': 0.890625, 'prec0': 0.8863636, 'prec1': 0.9, 'rec0': 0.9512195, 'rec1': 0.7826087, 'auroc': 0.8992576882290562, 'auprc': 0.8926832022489019, 'minpse': 0.7916666666666666}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.8596491, 'prec1': 0.6666667, 'rec0': 0.9074074, 'rec1': 0.5555556, 'auroc': 0.7602880658436214, 'auprc': 0.6359553240536836, 'minpse': 0.5789473684210527}
epoch 13
21.79133778810501
validation set
{'acc': 0.859375, 'prec0': 0.92105263, 'prec1': 0.7692308, 'rec0': 0.85365856, 'rec1': 0.8695652, 'auroc': 0.9066808059384942, 'auprc': 0.8799620453141663, 'minpse': 0.7916666666666666}
Mortality Prediction on the test set
{'acc': 0.6805556, 'prec0': 0.82978725, 'prec1': 0.4, 'rec0': 0.7222222, 'rec1': 0.5555556, 'auroc': 0.7479423868312757, 'auprc': 0.5692928411792795, 'minpse': 0.5263157894736842}
epoch 14
26.076858580112457
validation set
{'acc': 0.84375, 'prec0': 0.94285715, 'prec1': 0.7241379, 'rec0': 0.80487806, 'rec1': 0.9130435, 'auroc': 0.8992576882290563, 'auprc': 0.8979836514231807, 'minpse': 0.7916666666666666}
Mortality Prediction on the test set
{'acc': 0.6111111, 'prec0': 0.79545456, 'prec1': 0.32142857, 'rec0': 0.6481481, 'rec1': 0.5, 'auroc': 0.581275720164609, 'auprc': 0.5035612350712705, 'minpse': 0.4444444444444444}
epoch 15
20.273310244083405
validation set
{'acc': 0.859375, 'prec0': 0.9, 'prec1': 0.7916667, 'rec0': 0.8780488, 'rec1': 0.82608694, 'auroc': 0.8844114528101803, 'auprc': 0.8815340901473279, 'minpse': 0.7916666666666666}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.84210527, 'prec1': 0.6, 'rec0': 0.8888889, 'rec1': 0.5, 'auroc': 0.6779835390946503, 'auprc': 0.5907409799558142, 'minpse': 0.5}
epoch 16
19.51833200454712
validation set
{'acc': 0.875, 'prec0': 0.88372093, 'prec1': 0.85714287, 'rec0': 0.9268293, 'rec1': 0.7826087, 'auroc': 0.9098621420996819, 'auprc': 0.8938027149418071, 'minpse': 0.7916666666666666}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.82258064, 'prec1': 0.7, 'rec0': 0.9444444, 'rec1': 0.3888889, 'auroc': 0.6471193415637859, 'auprc': 0.5865288080400246, 'minpse': 0.5}
epoch 17
19.1148619055748
validation set
{'acc': 0.90625, 'prec0': 0.94871795, 'prec1': 0.84, 'rec0': 0.902439, 'rec1': 0.9130435, 'auroc': 0.9215270413573702, 'auprc': 0.9056935350468369, 'minpse': 0.84}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.9183673, 'prec1': 0.6086956, 'rec0': 0.8333333, 'rec1': 0.7777778, 'auroc': 0.8724279835390947, 'auprc': 0.7176548314282891, 'minpse': 0.6363636363636364}
epoch 18
19.590915858745575
validation set
{'acc': 0.78125, 'prec0': 0.9354839, 'prec1': 0.6363636, 'rec0': 0.70731705, 'rec1': 0.9130435, 'auroc': 0.8706256627783668, 'auprc': 0.8355851584071914, 'minpse': 0.7391304347826086}
Mortality Prediction on the test set
{'acc': 0.6944444, 'prec0': 0.8636364, 'prec1': 0.42857143, 'rec0': 0.7037037, 'rec1': 0.6666667, 'auroc': 0.7242798353909464, 'auprc': 0.6398380041269047, 'minpse': 0.5555555555555556}
epoch 19
16.075411200523376
validation set
{'acc': 0.828125, 'prec0': 0.96875, 'prec1': 0.6875, 'rec0': 0.75609756, 'rec1': 0.95652175, 'auroc': 0.9077412513255568, 'auprc': 0.8875385621695687, 'minpse': 0.782608695652174}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.925, 'prec1': 0.46875, 'rec0': 0.6851852, 'rec1': 0.8333333, 'auroc': 0.8127572016460906, 'auprc': 0.7148439705836434, 'minpse': 0.6111111111111112}
epoch 20
16.850000619888306
validation set
{'acc': 0.875, 'prec0': 0.88372093, 'prec1': 0.85714287, 'rec0': 0.9268293, 'rec1': 0.7826087, 'auroc': 0.9045599151643691, 'auprc': 0.879019865236226, 'minpse': 0.782608695652174}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.86206895, 'prec1': 0.71428573, 'rec0': 0.9259259, 'rec1': 0.5555556, 'auroc': 0.7654320987654321, 'auprc': 0.6978788436081562, 'minpse': 0.6111111111111112}
epoch 21
17.34935349225998
validation set
{'acc': 0.828125, 'prec0': 0.96875, 'prec1': 0.6875, 'rec0': 0.75609756, 'rec1': 0.95652175, 'auroc': 0.9172852598091198, 'auprc': 0.8910927870439025, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.6944444, 'prec0': 0.9444444, 'prec1': 0.44444445, 'rec0': 0.6296296, 'rec1': 0.8888889, 'auroc': 0.8148148148148148, 'auprc': 0.628925811488212, 'minpse': 0.5789473684210527}
epoch 22
17.159219682216644
validation set
{'acc': 0.828125, 'prec0': 0.8947368, 'prec1': 0.7307692, 'rec0': 0.8292683, 'rec1': 0.82608694, 'auroc': 0.8812301166489925, 'auprc': 0.8535897226713969, 'minpse': 0.7307692307692307}
Mortality Prediction on the test set
{'acc': 0.6388889, 'prec0': 0.8181818, 'prec1': 0.35714287, 'rec0': 0.6666667, 'rec1': 0.5555556, 'auroc': 0.6923868312757202, 'auprc': 0.5303533501771394, 'minpse': 0.4444444444444444}
epoch 23
15.737091183662415
validation set
{'acc': 0.859375, 'prec0': 0.92105263, 'prec1': 0.7692308, 'rec0': 0.85365856, 'rec1': 0.8695652, 'auroc': 0.9395546129374338, 'auprc': 0.9114783376567228, 'minpse': 0.7916666666666666}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.90697676, 'prec1': 0.4827586, 'rec0': 0.7222222, 'rec1': 0.7777778, 'auroc': 0.8467078189300412, 'auprc': 0.7040443206859448, 'minpse': 0.5555555555555556}
epoch 24
14.33072766661644
validation set
{'acc': 0.765625, 'prec0': 0.96428573, 'prec1': 0.6111111, 'rec0': 0.6585366, 'rec1': 0.95652175, 'auroc': 0.8928950159066809, 'auprc': 0.8438623613552368, 'minpse': 0.7083333333333334}
Mortality Prediction on the test set
{'acc': 0.5277778, 'prec0': 0.85714287, 'prec1': 0.3181818, 'rec0': 0.44444445, 'rec1': 0.7777778, 'auroc': 0.7952674897119341, 'auprc': 0.7284049017382632, 'minpse': 0.6190476190476191}
epoch 25
15.913929045200348
validation set
{'acc': 0.84375, 'prec0': 0.8974359, 'prec1': 0.76, 'rec0': 0.85365856, 'rec1': 0.82608694, 'auroc': 0.9141039236479321, 'auprc': 0.8920917213957437, 'minpse': 0.76}
Mortality Prediction on the test set
{'acc': 0.7222222, 'prec0': 0.84, 'prec1': 0.45454547, 'rec0': 0.7777778, 'rec1': 0.5555556, 'auroc': 0.7489711934156379, 'auprc': 0.6784322213533698, 'minpse': 0.5555555555555556}
epoch 26
17.764985859394073
validation set
{'acc': 0.859375, 'prec0': 0.84782606, 'prec1': 0.8888889, 'rec0': 0.9512195, 'rec1': 0.6956522, 'auroc': 0.8928950159066807, 'auprc': 0.8537603953152137, 'minpse': 0.7391304347826086}
Mortality Prediction on the test set
{'acc': 0.8611111, 'prec0': 0.8548387, 'prec1': 0.9, 'rec0': 0.9814815, 'rec1': 0.5, 'auroc': 0.8559670781893004, 'auprc': 0.7702542365313949, 'minpse': 0.6842105263157895}
epoch 27
17.73530662059784
validation set
{'acc': 0.859375, 'prec0': 0.9, 'prec1': 0.7916667, 'rec0': 0.8780488, 'rec1': 0.82608694, 'auroc': 0.895015906680806, 'auprc': 0.881697052642914, 'minpse': 0.7916666666666666}
Mortality Prediction on the test set
{'acc': 0.6944444, 'prec0': 0.84782606, 'prec1': 0.42307693, 'rec0': 0.7222222, 'rec1': 0.6111111, 'auroc': 0.787037037037037, 'auprc': 0.5283130533696101, 'minpse': 0.5555555555555556}
epoch 28
17.7136068046093
validation set
{'acc': 0.8125, 'prec0': 0.9142857, 'prec1': 0.6896552, 'rec0': 0.7804878, 'rec1': 0.8695652, 'auroc': 0.8992576882290562, 'auprc': 0.8647312407202228, 'minpse': 0.7083333333333334}
Mortality Prediction on the test set
{'acc': 0.6388889, 'prec0': 0.85, 'prec1': 0.375, 'rec0': 0.6296296, 'rec1': 0.6666667, 'auroc': 0.7345679012345678, 'auprc': 0.6361740778024122, 'minpse': 0.5555555555555556}
epoch 29
19.138317227363586
validation set
{'acc': 0.84375, 'prec0': 0.8780488, 'prec1': 0.7826087, 'rec0': 0.8780488, 'rec1': 0.7826087, 'auroc': 0.9066808059384941, 'auprc': 0.8709259382511614, 'minpse': 0.782608695652174}
Mortality Prediction on the test set
{'acc': 0.6944444, 'prec0': 0.8333333, 'prec1': 0.41666666, 'rec0': 0.7407407, 'rec1': 0.5555556, 'auroc': 0.7438271604938271, 'auprc': 0.6292655461450332, 'minpse': 0.5}
epoch 30
14.725787222385406
validation set
{'acc': 0.8125, 'prec0': 0.9142857, 'prec1': 0.6896552, 'rec0': 0.7804878, 'rec1': 0.8695652, 'auroc': 0.8759278897136797, 'auprc': 0.8572122173900569, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.625, 'prec0': 0.8648649, 'prec1': 0.37142858, 'rec0': 0.5925926, 'rec1': 0.7222222, 'auroc': 0.7469135802469136, 'auprc': 0.5667003271517548, 'minpse': 0.5555555555555556}
epoch 31
16.34603214263916
validation set
{'acc': 0.828125, 'prec0': 0.96875, 'prec1': 0.6875, 'rec0': 0.75609756, 'rec1': 0.95652175, 'auroc': 0.9056203605514316, 'auprc': 0.8908540094472874, 'minpse': 0.7391304347826086}
Mortality Prediction on the test set
{'acc': 0.6111111, 'prec0': 0.88235295, 'prec1': 0.36842105, 'rec0': 0.5555556, 'rec1': 0.7777778, 'auroc': 0.7386831275720165, 'auprc': 0.5324772656293626, 'minpse': 0.5}
epoch 32
15.803137987852097
validation set
{'acc': 0.84375, 'prec0': 0.84444445, 'prec1': 0.84210527, 'rec0': 0.9268293, 'rec1': 0.6956522, 'auroc': 0.8600212089077411, 'auprc': 0.8566824685681451, 'minpse': 0.7391304347826086}
Mortality Prediction on the test set
{'acc': 0.8194444, 'prec0': 0.84745765, 'prec1': 0.6923077, 'rec0': 0.9259259, 'rec1': 0.5, 'auroc': 0.7222222222222222, 'auprc': 0.5492945383586213, 'minpse': 0.5555555555555556}
epoch 33
13.559294164180756
validation set
{'acc': 0.859375, 'prec0': 0.88095236, 'prec1': 0.8181818, 'rec0': 0.902439, 'rec1': 0.7826087, 'auroc': 0.8907741251325558, 'auprc': 0.8842352574639263, 'minpse': 0.782608695652174}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.84210527, 'prec1': 0.6, 'rec0': 0.8888889, 'rec1': 0.5, 'auroc': 0.7304526748971194, 'auprc': 0.550726255264796, 'minpse': 0.5789473684210527}
epoch 34
14.829883933067322
validation set
{'acc': 0.78125, 'prec0': 0.81395346, 'prec1': 0.71428573, 'rec0': 0.85365856, 'rec1': 0.65217394, 'auroc': 0.777306468716861, 'auprc': 0.7578475157300715, 'minpse': 0.6521739130434783}
Mortality Prediction on the test set
{'acc': 0.6944444, 'prec0': 0.8333333, 'prec1': 0.41666666, 'rec0': 0.7407407, 'rec1': 0.5555556, 'auroc': 0.6820987654320988, 'auprc': 0.4714328419896768, 'minpse': 0.47619047619047616}
epoch 35
13.010753124952316
validation set
{'acc': 0.875, 'prec0': 0.8666667, 'prec1': 0.8947368, 'rec0': 0.9512195, 'rec1': 0.73913044, 'auroc': 0.9056203605514315, 'auprc': 0.8944525961326049, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.8333333, 'prec0': 0.85, 'prec1': 0.75, 'rec0': 0.9444444, 'rec1': 0.5, 'auroc': 0.7705761316872428, 'auprc': 0.5647781977736459, 'minpse': 0.5714285714285714}
epoch 36
13.35694134235382
validation set
{'acc': 0.859375, 'prec0': 0.8333333, 'prec1': 0.9375, 'rec0': 0.9756098, 'rec1': 0.65217394, 'auroc': 0.8133616118769884, 'auprc': 0.8338822639031591, 'minpse': 0.7391304347826086}
Mortality Prediction on the test set
{'acc': 0.8472222, 'prec0': 0.84126985, 'prec1': 0.8888889, 'rec0': 0.9814815, 'rec1': 0.44444445, 'auroc': 0.7191358024691359, 'auprc': 0.6254059236769653, 'minpse': 0.5789473684210527}
epoch 37
12.406616479158401
validation set
{'acc': 0.828125, 'prec0': 0.9166667, 'prec1': 0.71428573, 'rec0': 0.80487806, 'rec1': 0.8695652, 'auroc': 0.897136797454931, 'auprc': 0.8744855229194779, 'minpse': 0.782608695652174}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.8913044, 'prec1': 0.5, 'rec0': 0.7592593, 'rec1': 0.7222222, 'auroc': 0.7736625514403292, 'auprc': 0.5745618247929603, 'minpse': 0.5555555555555556}
epoch 38
12.918498277664185
validation set
{'acc': 0.875, 'prec0': 0.902439, 'prec1': 0.82608694, 'rec0': 0.902439, 'rec1': 0.82608694, 'auroc': 0.9066808059384942, 'auprc': 0.8946368745246107, 'minpse': 0.8260869565217391}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.88461536, 'prec1': 0.6, 'rec0': 0.8518519, 'rec1': 0.6666667, 'auroc': 0.8076131687242798, 'auprc': 0.6063165651301455, 'minpse': 0.6111111111111112}
epoch 39
11.24545305967331
validation set
{'acc': 0.828125, 'prec0': 0.875, 'prec1': 0.75, 'rec0': 0.85365856, 'rec1': 0.7826087, 'auroc': 0.83881230116649, 'auprc': 0.8086432036843081, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.5972222, 'prec0': 0.7906977, 'prec1': 0.31034482, 'rec0': 0.6296296, 'rec1': 0.5, 'auroc': 0.7016460905349794, 'auprc': 0.42714843450082984, 'minpse': 0.42105263157894735}
epoch 40
13.089278429746628
validation set
{'acc': 0.84375, 'prec0': 0.9189189, 'prec1': 0.7407407, 'rec0': 0.8292683, 'rec1': 0.8695652, 'auroc': 0.8950159066808059, 'auprc': 0.8857270557405441, 'minpse': 0.782608695652174}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.8913044, 'prec1': 0.5, 'rec0': 0.7592593, 'rec1': 0.7222222, 'auroc': 0.7685185185185185, 'auprc': 0.5600422796809298, 'minpse': 0.5789473684210527}
epoch 41
12.148179769515991
validation set
{'acc': 0.84375, 'prec0': 0.8974359, 'prec1': 0.76, 'rec0': 0.85365856, 'rec1': 0.82608694, 'auroc': 0.8950159066808059, 'auprc': 0.8771793521702194, 'minpse': 0.76}
Mortality Prediction on the test set
{'acc': 0.7361111, 'prec0': 0.85714287, 'prec1': 0.47826087, 'rec0': 0.7777778, 'rec1': 0.6111111, 'auroc': 0.7520576131687243, 'auprc': 0.6766588166847443, 'minpse': 0.6111111111111112}
epoch 42
11.33774046227336
validation set
{'acc': 0.890625, 'prec0': 0.925, 'prec1': 0.8333333, 'rec0': 0.902439, 'rec1': 0.8695652, 'auroc': 0.9130434782608695, 'auprc': 0.818862289857667, 'minpse': 0.8333333333333334}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.9148936, 'prec1': 0.56, 'rec0': 0.7962963, 'rec1': 0.7777778, 'auroc': 0.8528806584362141, 'auprc': 0.6416686141466115, 'minpse': 0.6363636363636364}
epoch 43
12.720998764038086
validation set
{'acc': 0.828125, 'prec0': 0.85714287, 'prec1': 0.77272725, 'rec0': 0.8780488, 'rec1': 0.73913044, 'auroc': 0.870625662778367, 'auprc': 0.8558042074023805, 'minpse': 0.7391304347826086}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.84615386, 'prec1': 0.5, 'rec0': 0.8148148, 'rec1': 0.5555556, 'auroc': 0.6995884773662551, 'auprc': 0.6547531181853944, 'minpse': 0.5555555555555556}
epoch 44
11.824824213981628
validation set
{'acc': 0.90625, 'prec0': 0.9268293, 'prec1': 0.8695652, 'rec0': 0.9268293, 'rec1': 0.8695652, 'auroc': 0.9045599151643691, 'auprc': 0.9007413053711351, 'minpse': 0.8695652173913043}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.8703704, 'prec1': 0.6111111, 'rec0': 0.8703704, 'rec1': 0.6111111, 'auroc': 0.852880658436214, 'auprc': 0.6070348290723218, 'minpse': 0.631578947368421}
epoch 45
11.978848576545715
validation set
{'acc': 0.828125, 'prec0': 0.8947368, 'prec1': 0.7307692, 'rec0': 0.8292683, 'rec1': 0.82608694, 'auroc': 0.8960763520678685, 'auprc': 0.8753737110234011, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.75, 'prec0': 0.8913044, 'prec1': 0.5, 'rec0': 0.7592593, 'rec1': 0.7222222, 'auroc': 0.7880658436213992, 'auprc': 0.7110553053837566, 'minpse': 0.631578947368421}
epoch 46
12.788899809122086
validation set
{'acc': 0.859375, 'prec0': 0.92105263, 'prec1': 0.7692308, 'rec0': 0.85365856, 'rec1': 0.8695652, 'auroc': 0.8918345705196182, 'auprc': 0.8819434447581918, 'minpse': 0.7916666666666666}
Mortality Prediction on the test set
{'acc': 0.6666667, 'prec0': 0.84090906, 'prec1': 0.39285713, 'rec0': 0.6851852, 'rec1': 0.6111111, 'auroc': 0.7479423868312757, 'auprc': 0.5431286776628916, 'minpse': 0.5555555555555556}
epoch 47
13.716400384902954
validation set
{'acc': 0.84375, 'prec0': 0.81632656, 'prec1': 0.93333334, 'rec0': 0.9756098, 'rec1': 0.6086956, 'auroc': 0.7327677624602333, 'auprc': 0.7690921645308573, 'minpse': 0.6521739130434783}
Mortality Prediction on the test set
{'acc': 0.8055556, 'prec0': 0.8448276, 'prec1': 0.64285713, 'rec0': 0.9074074, 'rec1': 0.5, 'auroc': 0.727366255144033, 'auprc': 0.5763288632123049, 'minpse': 0.5}
epoch 48
13.034880638122559
validation set
{'acc': 0.84375, 'prec0': 0.82978725, 'prec1': 0.88235295, 'rec0': 0.9512195, 'rec1': 0.65217394, 'auroc': 0.8133616118769883, 'auprc': 0.8164404186760166, 'minpse': 0.6956521739130435}
Mortality Prediction on the test set
{'acc': 0.7916667, 'prec0': 0.8305085, 'prec1': 0.61538464, 'rec0': 0.9074074, 'rec1': 0.44444445, 'auroc': 0.7685185185185185, 'auprc': 0.5173276944311929, 'minpse': 0.5555555555555556}
epoch 49
11.77732327580452
validation set
{'acc': 0.8125, 'prec0': 0.9142857, 'prec1': 0.6896552, 'rec0': 0.7804878, 'rec1': 0.8695652, 'auroc': 0.8918345705196182, 'auprc': 0.871598421810439, 'minpse': 0.75}
Mortality Prediction on the test set
{'acc': 0.6805556, 'prec0': 0.84444445, 'prec1': 0.4074074, 'rec0': 0.7037037, 'rec1': 0.6111111, 'auroc': 0.7273662551440329, 'auprc': 0.5833469670446636, 'minpse': 0.47368421052631576}
Reset trainable parameters of layer = Conv2d(1, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Reset trainable parameters of layer = BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Reset trainable parameters of layer = Linear(in_features=512, out_features=1000, bias=True)
Reset trainable parameters of layer = Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Conv2d(64, 384, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=False)
Reset trainable parameters of layer = Linear(in_features=384, out_features=384, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1152, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=1152, out_features=384, bias=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=1, bias=True)
Reset trainable parameters of layer = LayerNorm((384,), eps=1e-05, elementwise_affine=True)
Reset trainable parameters of layer = Linear(in_features=384, out_features=7200, bias=True)
Reset trainable parameters of layer = Linear(in_features=1000, out_features=6272, bias=True)
Reset trainable parameters of layer = Linear(in_features=300, out_features=600, bias=True)
Reset trainable parameters of layer = Linear(in_features=600, out_features=300, bias=True)
Reset trainable parameters of layer = Conv1d(300, 300, kernel_size=(24,), stride=(1,))
Reset trainable parameters of layer = Linear(in_features=300, out_features=1, bias=True)
Reset trainable parameters of layer = Linear(in_features=24, out_features=1, bias=True)
for mortality prediction
sensitivity
0.6666666865348816
mean is 0.7833333313465118 and variance is 0.018796295214582592
specificity
0.9074074029922485
mean is 0.7574074029922485 and variance is 0.02033264739686743
accuracy
0.8472222089767456
mean is 0.7638888895511627 and variance is 0.006597220732106343
AUC of ROC
mean is 0.8731481481481481 and variance is 0.00046085666141678993
[0.85185185 0.88786008 0.8755144  0.88888889 0.84259259 0.91049383
 0.88374486 0.87962963 0.83847737 0.87242798]
[0.84848485 0.83035714 0.94736842 0.71666667 0.8816568  0.80503145
 0.73555556 0.84575569 0.71173469 0.92152704]
